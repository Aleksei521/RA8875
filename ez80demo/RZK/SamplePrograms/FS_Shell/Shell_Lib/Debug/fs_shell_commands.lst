Zilog eZ80 Macro Assembler Version 4.2 (17030704)                                                                                                                                                               13-Apr-17     11:32:23     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch -debug
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\Src\fs_shell_commands.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "devCap",4
                           A   144    .DEFINE "devType"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 12
                           A   148    .ENDEF
                           A   149    .DEFINE "devHdl"
                           A   150    .VALUE 1
                           A   151    .CLASS 8
                           A   152    .TYPE 33
                           A   153    .ENDEF
                           A   154    .ENDREC "devCap"
                           A   155    .BEGREC "RZK_DEVICE_CB_t",54
                           A   156    .DEFINE "InUse"
                           A   157    .VALUE 0
                           A   158    .CLASS 8
                           A   159    .TYPE 12
                           A   160    .ENDEF
                           A   161    .DEFINE "devName"
                           A   162    .VALUE 1
                           A   163    .CLASS 8
                           A   164    .DIM 12
                           A   165    .TYPE 98
                           A   166    .ENDEF
                           A   167    .DEFINE "fnInit"
                           A   168    .VALUE 13
                           A   169    .CLASS 8
                           A   170    .TYPE 549
                           A   171    .ENDEF
                           A   172    .DEFINE "fnStop"
                           A   173    .VALUE 16
                           A   174    .CLASS 8
                           A   175    .TYPE 549
                           A   176    .ENDEF
                           A   177    .DEFINE "fnOpen"
                           A   178    .VALUE 19
                           A   179    .CLASS 8
                           A   180    .TYPE 549
                           A   181    .ENDEF
                           A   182    .DEFINE "fnClose"
                           A   183    .VALUE 22
                           A   184    .CLASS 8
                           A   185    .TYPE 549
                           A   186    .ENDEF
                           A   187    .DEFINE "fnRead"
                           A   188    .VALUE 25
                           A   189    .CLASS 8
                           A   190    .TYPE 549
                           A   191    .ENDEF
                           A   192    .DEFINE "fnWrite"
                           A   193    .VALUE 28
                           A   194    .CLASS 8
                           A   195    .TYPE 549
                           A   196    .ENDEF
                           A   197    .DEFINE "fnSeek"
                           A   198    .VALUE 31
                           A   199    .CLASS 8
                           A   200    .TYPE 549
                           A   201    .ENDEF
                           A   202    .DEFINE "fnGetc"
                           A   203    .VALUE 34
                           A   204    .CLASS 8
                           A   205    .TYPE 549
                           A   206    .ENDEF
                           A   207    .DEFINE "fnPutc"
                           A   208    .VALUE 37
                           A   209    .CLASS 8
                           A   210    .TYPE 549
                           A   211    .ENDEF
                           A   212    .DEFINE "fnIoctl"
                           A   213    .VALUE 40
                           A   214    .CLASS 8
                           A   215    .TYPE 549
                           A   216    .ENDEF
                           A   217    .DEFINE "dvintvector"
                           A   218    .VALUE 43
                           A   219    .CLASS 8
                           A   220    .TYPE 33
                           A   221    .ENDEF
                           A   222    .DEFINE "dvivec"
                           A   223    .VALUE 46
                           A   224    .CLASS 8
                           A   225    .TYPE 13
                           A   226    .ENDEF
                           A   227    .DEFINE "dvinputoutput"
                           A   228    .VALUE 48
                           A   229    .CLASS 8
                           A   230    .TYPE 44
                           A   231    .ENDEF
                           A   232    .DEFINE "devMode"
                           A   233    .VALUE 51
                           A   234    .CLASS 8
                           A   235    .TYPE 2
                           A   236    .ENDEF
                           A   237    .DEFINE "dvminor"
                           A   238    .VALUE 52
                           A   239    .CLASS 8
                           A   240    .TYPE 13
                           A   241    .ENDEF
                           A   242    .ENDREC "RZK_DEVICE_CB_t"
                           A   243    .BEGREC "CPU_REG",32
                           A   244    .DEFINE "regAFz"
                           A   245    .VALUE 0
                           A   246    .CLASS 8
                           A   247    .TYPE 15
                           A   248    .ENDEF
                           A   249    .DEFINE "regBCz"
                           A   250    .VALUE 4
                           A   251    .CLASS 8
                           A   252    .TYPE 15
                           A   253    .ENDEF
                           A   254    .DEFINE "regDEz"
                           A   255    .VALUE 8
                           A   256    .CLASS 8
                           A   257    .TYPE 15
                           A   258    .ENDEF
                           A   259    .DEFINE "regHLz"
                           A   260    .VALUE 12
                           A   261    .CLASS 8
                           A   262    .TYPE 15
                           A   263    .ENDEF
                           A   264    .DEFINE "regIXz"
                           A   265    .VALUE 16
                           A   266    .CLASS 8
                           A   267    .TYPE 15
                           A   268    .ENDEF
                           A   269    .DEFINE "regIYz"
                           A   270    .VALUE 20
                           A   271    .CLASS 8
                           A   272    .TYPE 15
                           A   273    .ENDEF
                           A   274    .DEFINE "regPCz"
                           A   275    .VALUE 24
                           A   276    .CLASS 8
                           A   277    .TYPE 15
                           A   278    .ENDEF
                           A   279    .DEFINE "regSPz"
                           A   280    .VALUE 28
                           A   281    .CLASS 8
                           A   282    .TYPE 15
                           A   283    .ENDEF
                           A   284    .ENDREC "CPU_REG"
                           A   285    .BEGREC "THREADPARAMS_STRUCT_t",22
                           A   286    .DEFINE "szName"
                           A   287    .VALUE 0
                           A   288    .CLASS 8
                           A   289    .DIM 12
                           A   290    .TYPE 108
                           A   291    .ENDEF
                           A   292    .DEFINE "uState"
                           A   293    .VALUE 12
                           A   294    .CLASS 8
                           A   295    .TYPE 12
                           A   296    .ENDEF
                           A   297    .DEFINE "uBankSelector"
                           A   298    .VALUE 13
                           A   299    .CLASS 8
                           A   300    .TYPE 12
                           A   301    .ENDEF
                           A   302    .DEFINE "uOperationMode"
                           A   303    .VALUE 14
                           A   304    .CLASS 8
                           A   305    .TYPE 12
                           A   306    .ENDEF
                           A   307    .DEFINE "tQuantum"
                           A   308    .VALUE 15
                           A   309    .CLASS 8
                           A   310    .TYPE 14
                           A   311    .ENDEF
                           A   312    .DEFINE "cPriority"
                           A   313    .VALUE 18
                           A   314    .CLASS 8
                           A   315    .TYPE 12
                           A   316    .ENDEF
                           A   317    .DEFINE "sSignalReceive"
                           A   318    .VALUE 19
                           A   319    .CLASS 8
                           A   320    .TYPE 14
                           A   321    .ENDEF
                           A   322    .ENDREC "THREADPARAMS_STRUCT_t"
                           A   323    .BEGREC "RZK_THREAD_CB",127
                           A   324    .DEFINE "CB"
                           A   325    .VALUE 0
                           A   326    .CLASS 8
                           A   327    .DIM 127
                           A   328    .TYPE 108
                           A   329    .ENDEF
                           A   330    .ENDREC "RZK_THREAD_CB"
                           A   331    .BEGREC "NONAME3",29
                           A   332    .DEFINE "fd_name"
                           A   333    .VALUE 0
                           A   334    .CLASS 8
                           A   335    .DIM 17
                           A   336    .TYPE 98
                           A   337    .ENDEF
                           A   338    .DEFINE "fd_type"
                           A   339    .VALUE 17
                           A   340    .CLASS 8
                           A   341    .TYPE 12
                           A   342    .ENDEF
                           A   343    .DEFINE "fd_size"
                           A   344    .VALUE 18
                           A   345    .CLASS 8
                           A   346    .TYPE 15
                           A   347    .ENDEF
                           A   348    .DEFINE "fd_sec"
                           A   349    .VALUE 22
                           A   350    .CLASS 8
                           A   351    .TYPE 12
                           A   352    .ENDEF
                           A   353    .DEFINE "fd_min"
                           A   354    .VALUE 23
                           A   355    .CLASS 8
                           A   356    .TYPE 12
                           A   357    .ENDEF
                           A   358    .DEFINE "fd_hrs"
                           A   359    .VALUE 24
                           A   360    .CLASS 8
                           A   361    .TYPE 12
                           A   362    .ENDEF
                           A   363    .DEFINE "fd_day"
                           A   364    .VALUE 25
                           A   365    .CLASS 8
                           A   366    .TYPE 12
                           A   367    .ENDEF
                           A   368    .DEFINE "fd_mon"
                           A   369    .VALUE 26
                           A   370    .CLASS 8
                           A   371    .TYPE 12
                           A   372    .ENDEF
                           A   373    .DEFINE "fd_year"
                           A   374    .VALUE 27
                           A   375    .CLASS 8
                           A   376    .TYPE 12
                           A   377    .ENDEF
                           A   378    .DEFINE "fd_century"
                           A   379    .VALUE 28
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .ENDREC "NONAME3"
                           A   384    .BEGREC "NONAME4",34
                           A   385    .DEFINE "vol_name"
                           A   386    .VALUE 0
                           A   387    .CLASS 8
                           A   388    .DIM 17
                           A   389    .TYPE 108
                           A   390    .ENDEF
                           A   391    .DEFINE "is_valid"
                           A   392    .VALUE 17
                           A   393    .CLASS 8
                           A   394    .TYPE 12
                           A   395    .ENDEF
                           A   396    .DEFINE "vol_size"
                           A   397    .VALUE 18
                           A   398    .CLASS 8
                           A   399    .TYPE 15
                           A   400    .ENDEF
                           A   401    .DEFINE "free_space"
                           A   402    .VALUE 22
                           A   403    .CLASS 8
                           A   404    .TYPE 15
                           A   405    .ENDEF
                           A   406    .DEFINE "used_space"
                           A   407    .VALUE 26
                           A   408    .CLASS 8
                           A   409    .TYPE 15
                           A   410    .ENDEF
                           A   411    .DEFINE "dirty_space"
                           A   412    .VALUE 30
                           A   413    .CLASS 8
                           A   414    .TYPE 15
                           A   415    .ENDEF
                           A   416    .ENDREC "NONAME4"
                           A   417    .BEGREC "CFI_QRY_ID_s",11
                           A   418    .DEFINE "IdStr"
                           A   419    .VALUE 0
                           A   420    .CLASS 8
                           A   421    .DIM 3
                           A   422    .TYPE 98
                           A   423    .ENDEF
                           A   424    .DEFINE "PriCmdSet"
                           A   425    .VALUE 3
                           A   426    .CLASS 8
                           A   427    .TYPE 13
                           A   428    .ENDEF
                           A   429    .DEFINE "PriExtQryOfs"
                           A   430    .VALUE 5
                           A   431    .CLASS 8
                           A   432    .TYPE 13
                           A   433    .ENDEF
                           A   434    .DEFINE "AltCmdSet"
                           A   435    .VALUE 7
                           A   436    .CLASS 8
                           A   437    .TYPE 13
                           A   438    .ENDEF
                           A   439    .DEFINE "AltExtQryOfs"
                           A   440    .VALUE 9
                           A   441    .CLASS 8
                           A   442    .TYPE 13
                           A   443    .ENDEF
                           A   444    .ENDREC "CFI_QRY_ID_s"
                           A   445    .BEGREC "CFI_SYSTEM_INFO_s",12
                           A   446    .DEFINE "bcdMinVccProg_V"
                           A   447    .VALUE 0
                           A   448    .CLASS 8
                           A   449    .TYPE 12
                           A   450    .ENDEF
                           A   451    .DEFINE "bcdMaxVccProg_V"
                           A   452    .VALUE 1
                           A   453    .CLASS 8
                           A   454    .TYPE 12
                           A   455    .ENDEF
                           A   456    .DEFINE "bcdMinVppProg_V"
                           A   457    .VALUE 2
                           A   458    .CLASS 8
                           A   459    .TYPE 12
                           A   460    .ENDEF
                           A   461    .DEFINE "bcdMaxVppProg_V"
                           A   462    .VALUE 3
                           A   463    .CLASS 8
                           A   464    .TYPE 12
                           A   465    .ENDEF
                           A   466    .DEFINE "ttoByteWr_us"
                           A   467    .VALUE 4
                           A   468    .CLASS 8
                           A   469    .TYPE 12
                           A   470    .ENDEF
                           A   471    .DEFINE "ttoBufferWr_us"
                           A   472    .VALUE 5
                           A   473    .CLASS 8
                           A   474    .TYPE 12
                           A   475    .ENDEF
                           A   476    .DEFINE "ttoBlockErase_ms"
                           A   477    .VALUE 6
                           A   478    .CLASS 8
                           A   479    .TYPE 12
                           A   480    .ENDEF
                           A   481    .DEFINE "ttoChipErase_ms"
                           A   482    .VALUE 7
                           A   483    .CLASS 8
                           A   484    .TYPE 12
                           A   485    .ENDEF
                           A   486    .DEFINE "rmtoByteWr"
                           A   487    .VALUE 8
                           A   488    .CLASS 8
                           A   489    .TYPE 12
                           A   490    .ENDEF
                           A   491    .DEFINE "rmtoBufferWr"
                           A   492    .VALUE 9
                           A   493    .CLASS 8
                           A   494    .TYPE 12
                           A   495    .ENDEF
                           A   496    .DEFINE "rmtoBlockErase"
                           A   497    .VALUE 10
                           A   498    .CLASS 8
                           A   499    .TYPE 12
                           A   500    .ENDEF
                           A   501    .DEFINE "rmtoChipErase"
                           A   502    .VALUE 11
                           A   503    .CLASS 8
                           A   504    .TYPE 12
                           A   505    .ENDEF
                           A   506    .ENDREC "CFI_SYSTEM_INFO_s"
                           A   507    .BEGREC "CFI_REGION_s",4
                           A   508    .DEFINE "NumBlocks"
                           A   509    .VALUE 0
                           A   510    .CLASS 8
                           A   511    .TYPE 13
                           A   512    .ENDEF
                           A   513    .DEFINE "BlockSize"
                           A   514    .VALUE 2
                           A   515    .CLASS 8
                           A   516    .TYPE 13
                           A   517    .ENDEF
                           A   518    .ENDREC "CFI_REGION_s"
                           A   519    .BEGREC "CFI_GEOMETRY_HDR_s",6
                           A   520    .DEFINE "SizeExp"
                           A   521    .VALUE 0
                           A   522    .CLASS 8
                           A   523    .TYPE 12
                           A   524    .ENDEF
                           A   525    .DEFINE "InterfaceID"
                           A   526    .VALUE 1
                           A   527    .CLASS 8
                           A   528    .TYPE 13
                           A   529    .ENDEF
                           A   530    .DEFINE "MaxWriteBytes"
                           A   531    .VALUE 3
                           A   532    .CLASS 8
                           A   533    .TYPE 13
                           A   534    .ENDEF
                           A   535    .DEFINE "NumRegions"
                           A   536    .VALUE 5
                           A   537    .CLASS 8
                           A   538    .TYPE 12
                           A   539    .ENDEF
                           A   540    .ENDREC "CFI_GEOMETRY_HDR_s"
                           A   541    .BEGREC "CFI_GEOMETRY_s",70
                           A   542    .DEFINE "Hdr"
                           A   543    .VALUE 0
                           A   544    .CLASS 8
                           A   545    .TAG "CFI_GEOMETRY_HDR_s"
                           A   546    .TYPE 8
                           A   547    .ENDEF
                           A   548    .DEFINE "Regions"
                           A   549    .VALUE 6
                           A   550    .CLASS 8
                           A   551    .DIM 16
                           A   552    .TAG "CFI_REGION_s"
                           A   553    .TYPE 104
                           A   554    .ENDEF
                           A   555    .ENDREC "CFI_GEOMETRY_s"
                           A   556    .BEGREC "AMD_PRI_EXT_QRY_ID_s",16
                           A   557    .DEFINE "IdStr"
                           A   558    .VALUE 0
                           A   559    .CLASS 8
                           A   560    .DIM 3
                           A   561    .TYPE 98
                           A   562    .ENDEF
                           A   563    .DEFINE "MajorVersion"
                           A   564    .VALUE 3
                           A   565    .CLASS 8
                           A   566    .TYPE 2
                           A   567    .ENDEF
                           A   568    .DEFINE "MinorVersion"
                           A   569    .VALUE 4
                           A   570    .CLASS 8
                           A   571    .TYPE 2
                           A   572    .ENDEF
                           A   573    .DEFINE "AddrSensitivUnlock"
                           A   574    .VALUE 5
                           A   575    .CLASS 8
                           A   576    .TYPE 12
                           A   577    .ENDEF
                           A   578    .DEFINE "EraseSuspend"
                           A   579    .VALUE 6
                           A   580    .CLASS 8
                           A   581    .TYPE 12
                           A   582    .ENDEF
                           A   583    .DEFINE "SectorProtect"
                           A   584    .VALUE 7
                           A   585    .CLASS 8
                           A   586    .TYPE 12
                           A   587    .ENDEF
                           A   588    .DEFINE "TempSectorUnprotect"
                           A   589    .VALUE 8
                           A   590    .CLASS 8
                           A   591    .TYPE 12
                           A   592    .ENDEF
                           A   593    .DEFINE "SectorProtectAlg"
                           A   594    .VALUE 9
                           A   595    .CLASS 8
                           A   596    .TYPE 12
                           A   597    .ENDEF
                           A   598    .DEFINE "SimultaneousOp"
                           A   599    .VALUE 10
                           A   600    .CLASS 8
                           A   601    .TYPE 12
                           A   602    .ENDEF
                           A   603    .DEFINE "BurstModeType"
                           A   604    .VALUE 11
                           A   605    .CLASS 8
                           A   606    .TYPE 12
                           A   607    .ENDEF
                           A   608    .DEFINE "PageModeType"
                           A   609    .VALUE 12
                           A   610    .CLASS 8
                           A   611    .TYPE 12
                           A   612    .ENDEF
                           A   613    .DEFINE "AccelVoltageMin"
                           A   614    .VALUE 13
                           A   615    .CLASS 8
                           A   616    .TYPE 12
                           A   617    .ENDEF
                           A   618    .DEFINE "AccelVoltageMax"
                           A   619    .VALUE 14
                           A   620    .CLASS 8
                           A   621    .TYPE 12
                           A   622    .ENDEF
                           A   623    .DEFINE "BootType"
                           A   624    .VALUE 15
                           A   625    .CLASS 8
                           A   626    .TYPE 12
                           A   627    .ENDEF
                           A   628    .ENDREC "AMD_PRI_EXT_QRY_ID_s"
                           A   629    .BEGREC "NON_CFI_DEV",7
                           A   630    .DEFINE "ManId"
                           A   631    .VALUE 0
                           A   632    .CLASS 8
                           A   633    .TYPE 12
                           A   634    .ENDEF
                           A   635    .DEFINE "DevId"
                           A   636    .VALUE 1
                           A   637    .CLASS 8
                           A   638    .TYPE 12
                           A   639    .ENDEF
                           A   640    .DEFINE "SizeExp"
                           A   641    .VALUE 2
                           A   642    .CLASS 8
                           A   643    .TYPE 12
                           A   644    .ENDEF
                           A   645    .DEFINE "NumRegions"
                           A   646    .VALUE 3
                           A   647    .CLASS 8
                           A   648    .TYPE 12
                           A   649    .ENDEF
                           A   650    .DEFINE "pRegions"
                           A   651    .VALUE 4
                           A   652    .CLASS 8
                           A   653    .TAG "CFI_REGION_s"
                           A   654    .TYPE 40
                           A   655    .ENDEF
                           A   656    .ENDREC "NON_CFI_DEV"
                           A   657    .BEGREC "XFL_DEVICE_INFO_S",16
                           A   658    .DEFINE "CSx"
                           A   659    .VALUE 0
                           A   660    .CLASS 8
                           A   661    .TYPE 12
                           A   662    .ENDEF
                           A   663    .DEFINE "Is_CFI"
                           A   664    .VALUE 1
                           A   665    .CLASS 8
                           A   666    .TYPE 12
                           A   667    .ENDEF
                           A   668    .DEFINE "ManId"
                           A   669    .VALUE 2
                           A   670    .CLASS 8
                           A   671    .TYPE 12
                           A   672    .ENDEF
                           A   673    .DEFINE "DevId"
                           A   674    .VALUE 3
                           A   675    .CLASS 8
                           A   676    .TYPE 12
                           A   677    .ENDEF
                           A   678    .DEFINE "CmdSet"
                           A   679    .VALUE 4
                           A   680    .CLASS 8
                           A   681    .TYPE 13
                           A   682    .ENDEF
                           A   683    .DEFINE "pBaseAddr"
                           A   684    .VALUE 6
                           A   685    .CLASS 8
                           A   686    .TYPE 44
                           A   687    .ENDEF
                           A   688    .DEFINE "pEndAddr"
                           A   689    .VALUE 9
                           A   690    .CLASS 8
                           A   691    .TYPE 44
                           A   692    .ENDEF
                           A   693    .DEFINE "Size"
                           A   694    .VALUE 12
                           A   695    .CLASS 8
                           A   696    .TYPE 15
                           A   697    .ENDEF
                           A   698    .ENDREC "XFL_DEVICE_INFO_S"
                           A   699    .BEGREC "CMD_SET_INFO_s",17
                           A   700    .DEFINE "CmdSetId"
                           A   701    .VALUE 0
                           A   702    .CLASS 8
                           A   703    .TYPE 13
                           A   704    .ENDEF
                           A   705    .DEFINE "fpQuery"
                           A   706    .VALUE 2
                           A   707    .CLASS 8
                           A   708    .TYPE 546
                           A   709    .ENDEF
                           A   710    .DEFINE "fpErase"
                           A   711    .VALUE 5
                           A   712    .CLASS 8
                           A   713    .TYPE 546
                           A   714    .ENDEF
                           A   715    .DEFINE "fpEraseBlock"
                           A   716    .VALUE 8
                           A   717    .CLASS 8
                           A   718    .TYPE 546
                           A   719    .ENDEF
                           A   720    .DEFINE "fpProgram"
                           A   721    .VALUE 11
                           A   722    .CLASS 8
                           A   723    .TYPE 546
                           A   724    .ENDEF
                           A   725    .DEFINE "fpRead"
                           A   726    .VALUE 14
                           A   727    .CLASS 8
                           A   728    .TYPE 546
                           A   729    .ENDEF
                           A   730    .ENDREC "CMD_SET_INFO_s"
                           A   731    .BEGREC "LE_OFS_SEG_s",3
                           A   732    .DEFINE "Ofs"
                           A   733    .VALUE 0
                           A   734    .CLASS 8
                           A   735    .TYPE 13
                           A   736    .ENDEF
                           A   737    .DEFINE "Seg"
                           A   738    .VALUE 2
                           A   739    .CLASS 8
                           A   740    .TYPE 12
                           A   741    .ENDEF
                           A   742    .ENDREC "LE_OFS_SEG_s"
                           A   743    .BEGREC "PTR_OFS_SEG_u",3
                           A   744    .DEFINE "x"
                           A   745    .VALUE 0
                           A   746    .CLASS 11
                           A   747    .TAG "LE_OFS_SEG_s"
                           A   748    .TYPE 8
                           A   749    .ENDEF
                           A   750    .DEFINE "Ptr"
                           A   751    .VALUE 0
                           A   752    .CLASS 11
                           A   753    .TYPE 33
                           A   754    .ENDEF
                           A   755    .ENDREC "PTR_OFS_SEG_u"
                           A   756    .BEGREC "ZFS_CONFIG_s",39
                           A   757    .DEFINE "vol_name"
                           A   758    .VALUE 0
                           A   759    .CLASS 8
                           A   760    .DIM 17
                           A   761    .TYPE 98
                           A   762    .ENDEF
                           A   763    .DEFINE "vol_type"
                           A   764    .VALUE 17
                           A   765    .CLASS 8
                           A   766    .TYPE 12
                           A   767    .ENDEF
                           A   768    .DEFINE "vol_addr"
                           A   769    .VALUE 18
                           A   770    .CLASS 8
                           A   771    .TAG "PTR_OFS_SEG_u"
                           A   772    .TYPE 8
                           A   773    .ENDEF
                           A   774    .DEFINE "vol_blk_size"
                           A   775    .VALUE 21
                           A   776    .CLASS 8
                           A   777    .TYPE 14
                           A   778    .ENDEF
                           A   779    .DEFINE "vol_blks"
                           A   780    .VALUE 24
                           A   781    .CLASS 8
                           A   782    .TYPE 14
                           A   783    .ENDEF
                           A   784    .DEFINE "fpInit"
                           A   785    .VALUE 27
                           A   786    .CLASS 8
                           A   787    .TYPE 546
                           A   788    .ENDEF
                           A   789    .DEFINE "fpErase"
                           A   790    .VALUE 30
                           A   791    .CLASS 8
                           A   792    .TYPE 546
                           A   793    .ENDEF
                           A   794    .DEFINE "fpProgram"
                           A   795    .VALUE 33
                           A   796    .CLASS 8
                           A   797    .TYPE 546
                           A   798    .ENDEF
                           A   799    .DEFINE "fpRead"
                           A   800    .VALUE 36
                           A   801    .CLASS 8
                           A   802    .TYPE 546
                           A   803    .ENDEF
                           A   804    .ENDREC "ZFS_CONFIG_s"
                           A   805    .BEGREC "shvars",308
                           A   806    .DEFINE "shlast"
                           A   807    .VALUE 0
                           A   808    .CLASS 8
                           A   809    .TYPE 15
                           A   810    .ENDEF
                           A   811    .DEFINE "shlogon"
                           A   812    .VALUE 4
                           A   813    .CLASS 8
                           A   814    .TYPE 15
                           A   815    .ENDEF
                           A   816    .DEFINE "shused"
                           A   817    .VALUE 8
                           A   818    .CLASS 8
                           A   819    .TYPE 12
                           A   820    .ENDEF
                           A   821    .DEFINE "shuser"
                           A   822    .VALUE 9
                           A   823    .CLASS 8
                           A   824    .DIM 9
                           A   825    .TYPE 98
                           A   826    .ENDEF
                           A   827    .DEFINE "shmach"
                           A   828    .VALUE 18
                           A   829    .CLASS 8
                           A   830    .DIM 64
                           A   831    .TYPE 98
                           A   832    .ENDEF
                           A   833    .DEFINE "shbuf"
                           A   834    .VALUE 82
                           A   835    .CLASS 8
                           A   836    .DIM 80
                           A   837    .TYPE 98
                           A   838    .ENDEF
                           A   839    .DEFINE "shtok"
                           A   840    .VALUE 162
                           A   841    .CLASS 8
                           A   842    .DIM 16
                           A   843    .TYPE 354
                           A   844    .ENDEF
                           A   845    .DEFINE "shtktyp"
                           A   846    .VALUE 210
                           A   847    .CLASS 8
                           A   848    .DIM 16
                           A   849    .TYPE 98
                           A   850    .ENDEF
                           A   851    .DEFINE "shargst"
                           A   852    .VALUE 226
                           A   853    .CLASS 8
                           A   854    .DIM 82
                           A   855    .TYPE 98
                           A   856    .ENDEF
                           A   857    .ENDREC "shvars"
                           A   858    .BEGREC "cmdent",13
                           A   859    .DEFINE "cmdnam"
                           A   860    .VALUE 0
                           A   861    .CLASS 8
                           A   862    .TYPE 34
                           A   863    .ENDEF
                           A   864    .DEFINE "cbuiltin"
                           A   865    .VALUE 3
                           A   866    .CLASS 8
                           A   867    .TYPE 12
                           A   868    .ENDEF
                           A   869    .DEFINE "cproc"
                           A   870    .VALUE 4
                           A   871    .CLASS 8
                           A   872    .TYPE 547
                           A   873    .ENDEF
                           A   874    .DEFINE "cnext"
                           A   875    .VALUE 7
                           A   876    .CLASS 8
                           A   877    .TAG "cmdent"
                           A   878    .TYPE 40
                           A   879    .ENDEF
                           A   880    .DEFINE "helpDesc"
                           A   881    .VALUE 10
                           A   882    .CLASS 8
                           A   883    .TYPE 34
                           A   884    .ENDEF
                           A   885    .ENDREC "cmdent"
                           A   886    .BEGREC "TIME",8
                           A   887    .DEFINE "sec"
                           A   888    .VALUE 0
                           A   889    .CLASS 8
                           A   890    .TYPE 12
                           A   891    .ENDEF
                           A   892    .DEFINE "minutes"
                           A   893    .VALUE 1
                           A   894    .CLASS 8
                           A   895    .TYPE 12
                           A   896    .ENDEF
                           A   897    .DEFINE "hrs"
                           A   898    .VALUE 2
                           A   899    .CLASS 8
                           A   900    .TYPE 12
                           A   901    .ENDEF
                           A   902    .DEFINE "dayOfMonth"
                           A   903    .VALUE 3
                           A   904    .CLASS 8
                           A   905    .TYPE 12
                           A   906    .ENDEF
                           A   907    .DEFINE "dayOfWeek"
                           A   908    .VALUE 4
                           A   909    .CLASS 8
                           A   910    .TYPE 12
                           A   911    .ENDEF
                           A   912    .DEFINE "mon"
                           A   913    .VALUE 5
                           A   914    .CLASS 8
                           A   915    .TYPE 12
                           A   916    .ENDEF
                           A   917    .DEFINE "year"
                           A   918    .VALUE 6
                           A   919    .CLASS 8
                           A   920    .TYPE 12
                           A   921    .ENDEF
                           A   922    .DEFINE "cent"
                           A   923    .VALUE 7
                           A   924    .CLASS 8
                           A   925    .TYPE 12
                           A   926    .ENDEF
                           A   927    .ENDREC "TIME"
                           A   928    ;    1	/************************************************************************************
                           A   929    ;    2	 * File       :     fs_shell_Commands.c
                           A   930    ;    3	 *
                           A   931    ;    4	 * Description:		This file contains the implementation of FS 
                           A   932    ;    5	 *					Shell commands.
                           A   933    ;    6	 *
                           A   934    ;    7	 * Copyright 2016 ZiLOG Inc.  ALL RIGHTS RESERVED.
                           A   935    ;    8	 *
                           A   936    ;    9	 * This file contains unpublished confidential and proprietary information
                           A   937    ;   10	 * of ZiLOG, Inc.
                           A   938    ;   11	 * NO PART OF THIS WORK MAY BE DUPLICATED, STORED, PUBLISHED OR DISCLOSED 
                           A   939    ;   12	 * IN ANY FORM WITHOUT THE PRIOR WRITTEN CONSENT OF ZiLOG, INC.
                           A   940    ;   13	 * This is not a license and no use of any kind of this work is authorized
                           A   941    ;   14	 * in the absence of a written license granted by ZiLOG, Inc. in ZiLOG's 
                           A   942    ;   15	 * sole discretion 
                           A   943    ;   16	 ************************************************************************************/
                           A   944    ;   17	
                           A   945    ;   18	// standard headers
                           A   946    ;   19	#include <stdio.h>
                           A   947    ;   20	#include <string.h>
                           A   948    ;   21	#include <stdlib.h>
                           A   949    ;   22	
                           A   950    ;   23	/** RXK Includes */
                           A   951    ;   24	#include "ZSysgen.h"
                           A   952    ;   25	#include "ZTypes.h"
                           A   953    ;   26	#include "ZDevice.h"
                           A   954    ;   27	#include "ZThread.h"
                           A   955    ;   28	
                           A   956    ;   29	/** File system Includes */
                           A   957    ;   30	#include "ZFSTypes.h"
                           A   958    ;   31	#include "ZFSApi.h"
                           A   959    ;   32	#include "ZFSCfg.h"
                           A   960    ;   33	/** Shell Includes */
                           A   961    ;   34	#include "Shell.h"
                           A   962    ;   35	#include "FS_Shell.h"
                           A   963    ;   36	
                           A   964    ;   37	#include "rtc.h"
                           A   965    ;   38	#define	COLUMNS	4
                           A   966    ;   39	
                           A   967    ;   40	#define MAX_FILE_PATH_SIZE	(256)
                           A   968    ;   41	
                           A   969    ;   42	extern void GetString( RZK_DEVICE_CB_t * dev, INT8 *pbuf, UINT max_len, INT* len ) ;
                           A   970    ;   43	
                           A   971    ;   44	/** This function separates Directory name and the file Name */
                           A   972    ;   45	void Shell_ZFSGetDirFileName( INT8		*pathName,
                           A   973    ;   46								  INT8		*dirName,
                           A   974    ;   47								  INT8		*argv[]
                           A   975    ;   48								 )
                           A   976    ;   49	{
000000                     A   977    _Shell_ZFSGetDirFileName:
                           A   978    .DEFINE "_Shell_ZFSGetDirFileName"
                           A   979    
                           A   980    .VALUE _Shell_ZFSGetDirFileName
                           A   981    
                           A   982    .CLASS 2
                           A   983    
                           A   984    .TYPE 65
                           A   985    
                           A   986    .ENDEF
                           A   987    
                           A   988    .BEGFUNC "Shell_ZFSGetDirFileName",49,"_Shell_ZFSGetDirFileName"
                           A   989    
                           A   990    .LINE 49
                           A   991    
                           A   992    .DEFINE "pathName"
                           A   993    
                           A   994    .CLASS 65
                           A   995    
                           A   996    .VALUE 6
                           A   997    
                           A   998    .TYPE 34
                           A   999    
                           A  1000    .ENDEF
                           A  1001    
                           A  1002    .DEFINE "dirName"
                           A  1003    
                           A  1004    .CLASS 65
                           A  1005    
                           A  1006    .VALUE 9
                           A  1007    
                           A  1008    .TYPE 34
                           A  1009    
                           A  1010    .ENDEF
                           A  1011    
                           A  1012    .DEFINE "argv"
                           A  1013    
                           A  1014    .CLASS 65
                           A  1015    
                           A  1016    .VALUE 12
                           A  1017    
                           A  1018    .TYPE 290
                           A  1019    
                           A  1020    .ENDEF
                           A  1021    
                           A  1022    .DEFINE "path"
                           A  1023    
                           A  1024    .CLASS 65
                           A  1025    
                           A  1026    .VALUE -3
                           A  1027    
                           A  1028    .TYPE 34
                           A  1029    
                           A  1030    .ENDEF
                           A  1031    
                           A  1032    .DEFINE "i"
                           A  1033    
                           A  1034    .CLASS 65
                           A  1035    
                           A  1036    .VALUE -5
                           A  1037    
                           A  1038    .TYPE 3
                           A  1039    
                           A  1040    .ENDEF
                           A  1041    
                           A  1042    .DEFINE "len"
                           A  1043    
                           A  1044    .CLASS 65
                           A  1045    
                           A  1046    .VALUE -7
                           A  1047    
                           A  1048    .TYPE 3
                           A  1049    
                           A  1050    .ENDEF
                           A  1051    
                           A  1052    .DEFINE "checkForCwd"
                           A  1053    
                           A  1054    .CLASS 65
                           A  1055    
                           A  1056    .VALUE -8
                           A  1057    
                           A  1058    .TYPE 12
                           A  1059    
                           A  1060    .ENDEF
                           A  1061    
000000 DDE5                A  1062    	PUSH	IX
000002 DD210000 00         A  1063    	LD	IX,0
000007 DD39                A  1064    	ADD	IX,SP
000009 ED22F0              A  1065    	LEA	HL,IX+%FFFFFFF0
00000C F9                  A  1066    	LD	SP,HL
                           A  1067    ;   50		INT16 len ;
                           A  1068    ;   51		UINT8 checkForCwd = 1;
                           A  1069    .LINE 51
                           A  1070    
00000D DD36F801            A  1071    	LD	(IX+%FFFFFFF8),%1
                           A  1072    ;   52		INT8 *path;
                           A  1073    ;   53		INT16 i = 0;
                           A  1074    .LINE 53
                           A  1075    
000011 DD36FB00            A  1076    	LD	(IX+%FFFFFFFB),%0
000015 DD36FC00            A  1077    	LD	(IX+%FFFFFFFC),%0
                           A  1078    ;   54	
                           A  1079    ;   55		/** Get the length */
                           A  1080    ;   56		len = strlen( argv[1] );
                           A  1081    .LINE 56
                           A  1082    
000019 DD310C              A  1083    	LD	IY,(IX+%C)
00001C ED2303              A  1084    	LEA	HL,IY+%3
00001F ED07                A  1085    	LD	BC,(HL)
000021 C5                  A  1086    	PUSH	BC
000022 CD 00 00 00         A  1087    	CALL	_strlen
000026 C1                  A  1088    	POP	BC
000027 DD75F9              A  1089    	LD	(IX+%FFFFFFF9),L
00002A DD74FA              A  1090    	LD	(IX+%FFFFFFFA),H
                           A  1091    ;   57		path = (INT8 *)argv[1];
                           A  1092    .LINE 57
                           A  1093    
00002D DD310C              A  1094    	LD	IY,(IX+%C)
000030 ED2303              A  1095    	LEA	HL,IY+%3
000033 ED07                A  1096    	LD	BC,(HL)
000035 DD0FFD              A  1097    	LD	(IX+%FFFFFFFD),BC
                           A  1098    ;   58	
                           A  1099    ;   59		/** Get the directory Name alone */
                           A  1100    ;   60		while( len != 0 )
                           A  1101    .LINE 60
                           A  1102    
000038 18 58               A  1103    	JR	L_6
00003A                     A  1104    L_7:
                           A  1105    ;   61		{
                           A  1106    ;   62			if( *path == '/' )
                           A  1107    .LINE 62
                           A  1108    
00003A DD27FD              A  1109    	LD	HL,(IX+%FFFFFFFD)
00003D 7E                  A  1110    	LD	A,(HL)
00003E 47                  A  1111    	LD	B,A
00003F 17ED62              A  1112    	SEXT	HL
000042 68                  A  1113    	LD	L,B
000043 012F0000            A  1114    	LD	BC,47
000047 B7                  A  1115    	OR	A,A
000048 ED42                A  1116    	SBC	HL,BC
00004A 20 13               A  1117    	JR	NZ,L_3
                           A  1118    ;   63			{
                           A  1119    ;   64				i = 0;
                           A  1120    .LINE 64
                           A  1121    
00004C DD36FB00            A  1122    	LD	(IX+%FFFFFFFB),%0
000050 DD36FC00            A  1123    	LD	(IX+%FFFFFFFC),%0
                           A  1124    ;   65				checkForCwd = 0;
                           A  1125    .LINE 65
                           A  1126    
000054 DD36F800            A  1127    	LD	(IX+%FFFFFFF8),%0
                           A  1128    ;   66				path++;
                           A  1129    .LINE 66
                           A  1130    
000058 DD07FD              A  1131    	LD	BC,(IX+%FFFFFFFD)
00005B 03                  A  1132    	INC	BC
00005C DD0FFD              A  1133    	LD	(IX+%FFFFFFFD),BC
                           A  1134    ;   67			}
00005F                     A  1135    L_3:
                           A  1136    .LINE 67
                           A  1137    
                           A  1138    ;   68			dirName[i] = *path++;
                           A  1139    .LINE 68
                           A  1140    
00005F DD07FD              A  1141    	LD	BC,(IX+%FFFFFFFD)
000062 DD0FF5              A  1142    	LD	(IX+%FFFFFFF5),BC
000065 DD31F5              A  1143    	LD	IY,(IX+%FFFFFFF5)
000068 DD07FB              A  1144    	LD	BC,(IX+%FFFFFFFB)
00006B CD 00 00 00         A  1145    	CALL	__stoi
00006F DD0709              A  1146    	LD	BC,(IX+%9)
000072 09                  A  1147    	ADD	HL,BC
000073 FD7E00              A  1148    	LD	A,(IY)
000076 77                  A  1149    	LD	(HL),A
000077 DD07FD              A  1150    	LD	BC,(IX+%FFFFFFFD)
00007A 03                  A  1151    	INC	BC
00007B DD0FFD              A  1152    	LD	(IX+%FFFFFFFD),BC
                           A  1153    ;   69			i++;
                           A  1154    .LINE 69
                           A  1155    
00007E DD27FB              A  1156    	LD	HL,(IX+%FFFFFFFB)
000081 23                  A  1157    	INC	HL
000082 DD75FB              A  1158    	LD	(IX+%FFFFFFFB),L
000085 DD74FC              A  1159    	LD	(IX+%FFFFFFFC),H
                           A  1160    ;   70			len--;
                           A  1161    .LINE 70
                           A  1162    
000088 DD27F9              A  1163    	LD	HL,(IX+%FFFFFFF9)
00008B 2B                  A  1164    	DEC	HL
00008C DD75F9              A  1165    	LD	(IX+%FFFFFFF9),L
00008F DD74FA              A  1166    	LD	(IX+%FFFFFFFA),H
                           A  1167    ;   71		}
000092                     A  1168    L_6:
                           A  1169    .LINE 71
                           A  1170    
000092 DD27F9              A  1171    	LD	HL,(IX+%FFFFFFF9)
000095 CD 00 00 00         A  1172    	CALL	__scmpzero
000099 20 9F               A  1173    	JR	NZ,L_7
                           A  1174    ;   72		dirName[i] = '\0' ;
                           A  1175    .LINE 72
                           A  1176    
00009B DD07FB              A  1177    	LD	BC,(IX+%FFFFFFFB)
00009E CD 00 00 00         A  1178    	CALL	__stoi
0000A2 DD0709              A  1179    	LD	BC,(IX+%9)
0000A5 09                  A  1180    	ADD	HL,BC
0000A6 3600                A  1181    	LD	(HL),%0
                           A  1182    ;   73	
                           A  1183    ;   74		if( checkForCwd == 0 )
                           A  1184    .LINE 74
                           A  1185    
0000A8 DD7EF8              A  1186    	LD	A,(IX+%FFFFFFF8)
0000AB B7                  A  1187    	OR	A,A
0000AC 20 4F               A  1188    	JR	NZ,L_10
                           A  1189    ;   75		{
                           A  1190    ;   76			/** Get the path name alone */
                           A  1191    ;   77			memcpy(pathName, argv[1], strlen(argv[1])-strlen((const INT8 *)dirName));
                           A  1192    .LINE 77
                           A  1193    
0000AE DD310C              A  1194    	LD	IY,(IX+%C)
0000B1 ED2303              A  1195    	LEA	HL,IY+%3
0000B4 ED07                A  1196    	LD	BC,(HL)
0000B6 C5                  A  1197    	PUSH	BC
0000B7 DD77F4              A  1198    	LD	(IX+%FFFFFFF4),A
0000BA CD 00 00 00         A  1199    	CALL	_strlen
0000BE DD7EF4              A  1200    	LD	A,(IX+%FFFFFFF4)
0000C1 C1                  A  1201    	POP	BC
0000C2 E5D1                A  1202    	LD	DE,HL
0000C4 DD0709              A  1203    	LD	BC,(IX+%9)
0000C7 C5                  A  1204    	PUSH	BC
0000C8 DD1FF2              A  1205    	LD	(IX+%FFFFFFF2),DE
0000CB DD77F1              A  1206    	LD	(IX+%FFFFFFF1),A
0000CE DD72F0              A  1207    	LD	(IX+%FFFFFFF0),D
0000D1 CD 00 00 00         A  1208    	CALL	_strlen
0000D5 DD17F2              A  1209    	LD	DE,(IX+%FFFFFFF2)
0000D8 DD7EF1              A  1210    	LD	A,(IX+%FFFFFFF1)
0000DB DD56F0              A  1211    	LD	D,(IX+%FFFFFFF0)
0000DE C1                  A  1212    	POP	BC
0000DF E5C1                A  1213    	LD	BC,HL
0000E1 D5E1                A  1214    	LD	HL,DE
0000E3 B7                  A  1215    	OR	A,A
0000E4 ED42                A  1216    	SBC	HL,BC
0000E6 E5                  A  1217    	PUSH	HL
0000E7 DD310C              A  1218    	LD	IY,(IX+%C)
0000EA ED2303              A  1219    	LEA	HL,IY+%3
0000ED ED07                A  1220    	LD	BC,(HL)
0000EF C5                  A  1221    	PUSH	BC
0000F0 DD0706              A  1222    	LD	BC,(IX+%6)
0000F3 C5                  A  1223    	PUSH	BC
0000F4 CD 00 00 00         A  1224    	CALL	_memcpy
0000F8 C1                  A  1225    	POP	BC
0000F9 C1                  A  1226    	POP	BC
0000FA C1                  A  1227    	POP	BC
                           A  1228    ;   78		}
                           A  1229    ;   79		else
                           A  1230    .LINE 79
                           A  1231    
0000FB 18 0F               A  1232    	JR	L_11
0000FD                     A  1233    L_10:
                           A  1234    ;   80			strcpy((INT8 *)pathName, "./");
                           A  1235    .LINE 80
                           A  1236    
0000FD 01 00 00 00         A  1237    	LD	BC,L__3
000101 C5                  A  1238    	PUSH	BC
000102 DD0706              A  1239    	LD	BC,(IX+%6)
000105 C5                  A  1240    	PUSH	BC
000106 CD 00 00 00         A  1241    	CALL	_strcpy
00010A C1                  A  1242    	POP	BC
00010B C1                  A  1243    	POP	BC
                           A  1244    ;   81	}
00010C                     A  1245    L_11:
                           A  1246    .LINE 81
                           A  1247    
00010C DDF9                A  1248    	LD	SP,IX
00010E DDE1                A  1249    	POP	IX
000110 C9                  A  1250    	RET	
                           A  1251    
                           A  1252    
                           A  1253    ;**************************** _Shell_ZFSGetDirFileName ***************************
                           A  1254    ;Name                         Addr/Register   Size   Type
                           A  1255    ;_strcpy                             IMPORT  -----   function
                           A  1256    ;_memcpy                             IMPORT  -----   function
                           A  1257    ;_strlen                             IMPORT  -----   function
                           A  1258    ;checkForCwd                           IX-8      1   variable
                           A  1259    ;len                                   IX-7      2   variable
                           A  1260    ;i                                     IX-5      2   variable
                           A  1261    ;path                                  IX-3      3   variable
                           A  1262    ;argv                                 IX+12      3   parameter
                           A  1263    ;dirName                               IX+9      3   parameter
                           A  1264    ;pathName                              IX+6      3   parameter
                           A  1265    
                           A  1266    
                           A  1267    ; Stack Frame Size: 31 (bytes)
                           A  1268    ;       Spill Code: 0 (instruction)
                           A  1269    
                           A  1270    
                           A  1271    .ENDFUNC "Shell_ZFSGetDirFileName",81,"_Shell_ZFSGetDirFileName"
                           A  1272    	SEGMENT STRSECT
000000                     A  1273    L__3:
000000 2E2F                A  1274    	DB	"./"
000002 00                  A  1275    	DB	0
                           A  1276    	SEGMENT CODE
                           A  1277    ;   82	
                           A  1278    ;   83	
                           A  1279    ;   84	/* The following function is used to create a 
                           A  1280    ;   85	   directory given by the user */
                           A  1281    ;   86	INT16 Shell_ZFSMkdir (
                           A  1282    ;   87		struct shvars *			Shl,
                           A  1283    ;   88		RZK_DEVICE_CB_t *						stdin,
                           A  1284    ;   89		RZK_DEVICE_CB_t *						stdout, 
                           A  1285    ;   90		RZK_DEVICE_CB_t *						stderr, 
                           A  1286    ;   91		UINT16					nargs,
                           A  1287    ;   92		INT8					*argv[]
                           A  1288    ;   93	)
                           A  1289    ;   94	{
000111                     A  1290    _Shell_ZFSMkdir:
                           A  1291    .DEFINE "_Shell_ZFSMkdir"
                           A  1292    
                           A  1293    .VALUE _Shell_ZFSMkdir
                           A  1294    
                           A  1295    .CLASS 2
                           A  1296    
                           A  1297    .TYPE 67
                           A  1298    
                           A  1299    .ENDEF
                           A  1300    
                           A  1301    .BEGFUNC "Shell_ZFSMkdir",94,"_Shell_ZFSMkdir"
                           A  1302    
                           A  1303    .LINE 94
                           A  1304    
                           A  1305    .DEFINE "Shl"
                           A  1306    
                           A  1307    .CLASS 65
                           A  1308    
                           A  1309    .VALUE 6
                           A  1310    
                           A  1311    .TAG "shvars"
                           A  1312    
                           A  1313    .TYPE 40
                           A  1314    
                           A  1315    .ENDEF
                           A  1316    
                           A  1317    .DEFINE "stdin"
                           A  1318    
                           A  1319    .CLASS 65
                           A  1320    
                           A  1321    .VALUE 9
                           A  1322    
                           A  1323    .TAG "RZK_DEVICE_CB_t"
                           A  1324    
                           A  1325    .TYPE 40
                           A  1326    
                           A  1327    .ENDEF
                           A  1328    
                           A  1329    .DEFINE "stdout"
                           A  1330    
                           A  1331    .CLASS 65
                           A  1332    
                           A  1333    .VALUE 12
                           A  1334    
                           A  1335    .TAG "RZK_DEVICE_CB_t"
                           A  1336    
                           A  1337    .TYPE 40
                           A  1338    
                           A  1339    .ENDEF
                           A  1340    
                           A  1341    .DEFINE "stderr"
                           A  1342    
                           A  1343    .CLASS 65
                           A  1344    
                           A  1345    .VALUE 15
                           A  1346    
                           A  1347    .TAG "RZK_DEVICE_CB_t"
                           A  1348    
                           A  1349    .TYPE 40
                           A  1350    
                           A  1351    .ENDEF
                           A  1352    
                           A  1353    .DEFINE "nargs"
                           A  1354    
                           A  1355    .CLASS 65
                           A  1356    
                           A  1357    .VALUE 18
                           A  1358    
                           A  1359    .TYPE 13
                           A  1360    
                           A  1361    .ENDEF
                           A  1362    
                           A  1363    .DEFINE "argv"
                           A  1364    
                           A  1365    .CLASS 65
                           A  1366    
                           A  1367    .VALUE 21
                           A  1368    
                           A  1369    .TYPE 290
                           A  1370    
                           A  1371    .ENDEF
                           A  1372    
                           A  1373    .DEFINE "pathName"
                           A  1374    
                           A  1375    .CLASS 65
                           A  1376    
                           A  1377    .VALUE -3
                           A  1378    
                           A  1379    .TYPE 34
                           A  1380    
                           A  1381    .ENDEF
                           A  1382    
                           A  1383    .DEFINE "dirName"
                           A  1384    
                           A  1385    .CLASS 65
                           A  1386    
                           A  1387    .VALUE -6
                           A  1388    
                           A  1389    .TYPE 34
                           A  1390    
                           A  1391    .ENDEF
                           A  1392    
                           A  1393    .DEFINE "status"
                           A  1394    
                           A  1395    .CLASS 65
                           A  1396    
                           A  1397    .VALUE -9
                           A  1398    
                           A  1399    .TYPE 4
                           A  1400    
                           A  1401    .ENDEF
                           A  1402    
                           A  1403    .DEFINE "ret_val"
                           A  1404    
                           A  1405    .CLASS 65
                           A  1406    
                           A  1407    .VALUE -11
                           A  1408    
                           A  1409    .TYPE 3
                           A  1410    
                           A  1411    .ENDEF
                           A  1412    
000111 DDE5                A  1413    	PUSH	IX
000113 DD210000 00         A  1414    	LD	IX,0
000118 DD39                A  1415    	ADD	IX,SP
00011A ED22F5              A  1416    	LEA	HL,IX+%FFFFFFF5
00011D F9                  A  1417    	LD	SP,HL
                           A  1418    ;   95		INT8 *pathName = ( INT8* ) NULL ;
                           A  1419    .LINE 95
                           A  1420    
00011E 01000000            A  1421    	LD	BC,0
000122 DD0FFD              A  1422    	LD	(IX+%FFFFFFFD),BC
                           A  1423    ;   96		INT8 *dirName = ( INT8* ) NULL ;
                           A  1424    .LINE 96
                           A  1425    
000125 DD0FFA              A  1426    	LD	(IX+%FFFFFFFA),BC
                           A  1427    ;   97		ZFS_STATUS_t status;
                           A  1428    ;   98		INT16	ret_val = ZSHELL_FAILURE;
                           A  1429    .LINE 98
                           A  1430    
000128 DD36F5FF            A  1431    	LD	(IX+%FFFFFFF5),%FF
00012C DD36F6FF            A  1432    	LD	(IX+%FFFFFFF6),%FF
                           A  1433    ;   99	
                           A  1434    ;  100		/** Validate the number of arguments */
                           A  1435    ;  101		if( nargs != 2 )
                           A  1436    .LINE 101
                           A  1437    
000130 49010200            A  1438    	LD.LIS	BC,2
000134 DD2712              A  1439    	LD	HL,(IX+%12)
000137 B7                  A  1440    	OR	A,A
000138 40ED42              A  1441    	SBC.SIS	HL,BC
00013B 28 1C               A  1442    	JR	Z,L_13
                           A  1443    ;  102		{
                           A  1444    ;  103			printf("\nThe syntax of the command is incorrect\n");
                           A  1445    .LINE 103
                           A  1446    
00013D 01 03 00 00         A  1447    	LD	BC,L__6
000141 C5                  A  1448    	PUSH	BC
000142 CD 00 00 00         A  1449    	CALL	_printf
000146 C1                  A  1450    	POP	BC
                           A  1451    ;  104			printf("md <directory Name>\n");
                           A  1452    .LINE 104
                           A  1453    
000147 01 2C 00 00         A  1454    	LD	BC,L__7
00014B C5                  A  1455    	PUSH	BC
00014C CD 00 00 00         A  1456    	CALL	_printf
000150 C1                  A  1457    	POP	BC
                           A  1458    ;  105			return ZSHELL_FAILURE ;
                           A  1459    .LINE 105
                           A  1460    
000151 4921FFFF            A  1461    	LD.LIS	HL,-1
000155 C3 B9 02 00         A  1462    	JR	L_36
                           A  1463    ;  106		}
000159                     A  1464    L_13:
                           A  1465    .LINE 106
                           A  1466    
                           A  1467    ;  107	
                           A  1468    ;  108		pathName = ( INT8* ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  1469    .LINE 108
                           A  1470    
000159 01000100            A  1471    	LD	BC,256
00015D C5                  A  1472    	PUSH	BC
00015E CD 00 00 00         A  1473    	CALL	_malloc
000162 C1                  A  1474    	POP	BC
000163 DD2FFD              A  1475    	LD	(IX+%FFFFFFFD),HL
                           A  1476    ;  109		dirName = ( INT8* ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  1477    .LINE 109
                           A  1478    
000166 01000100            A  1479    	LD	BC,256
00016A C5                  A  1480    	PUSH	BC
00016B CD 00 00 00         A  1481    	CALL	_malloc
00016F C1                  A  1482    	POP	BC
000170 DD2FFA              A  1483    	LD	(IX+%FFFFFFFA),HL
                           A  1484    ;  110	
                           A  1485    ;  111		if( pathName == NULL || dirName == NULL )
                           A  1486    .LINE 111
                           A  1487    
000173 DD27FD              A  1488    	LD	HL,(IX+%FFFFFFFD)
000176 CD 00 00 00         A  1489    	CALL	__icmpzero
00017A CA 92 02 00         A  1490    	JR	Z,L_15
00017E DD27FA              A  1491    	LD	HL,(IX+%FFFFFFFA)
000181 CD 00 00 00         A  1492    	CALL	__icmpzero
000185 CA 92 02 00         A  1493    	JR	Z,L_15
                           A  1494    ;  112			goto _end_Shell_ZFSMkdir ;
                           A  1495    ;  113	
                           A  1496    ;  114		memset( pathName, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  1497    .LINE 114
                           A  1498    
000189 01000100            A  1499    	LD	BC,256
00018D C5                  A  1500    	PUSH	BC
00018E 01000000            A  1501    	LD	BC,0
000192 C5                  A  1502    	PUSH	BC
000193 DD07FD              A  1503    	LD	BC,(IX+%FFFFFFFD)
000196 C5                  A  1504    	PUSH	BC
000197 CD 00 00 00         A  1505    	CALL	_memset
00019B C1                  A  1506    	POP	BC
00019C C1                  A  1507    	POP	BC
00019D C1                  A  1508    	POP	BC
                           A  1509    ;  115		memset( dirName, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  1510    .LINE 115
                           A  1511    
00019E 01000100            A  1512    	LD	BC,256
0001A2 C5                  A  1513    	PUSH	BC
0001A3 01000000            A  1514    	LD	BC,0
0001A7 C5                  A  1515    	PUSH	BC
0001A8 DD07FA              A  1516    	LD	BC,(IX+%FFFFFFFA)
0001AB C5                  A  1517    	PUSH	BC
0001AC CD 00 00 00         A  1518    	CALL	_memset
0001B0 C1                  A  1519    	POP	BC
0001B1 C1                  A  1520    	POP	BC
0001B2 C1                  A  1521    	POP	BC
                           A  1522    ;  116		Shell_ZFSGetDirFileName( pathName, dirName, (INT8 **)argv );
                           A  1523    .LINE 116
                           A  1524    
0001B3 DD0715              A  1525    	LD	BC,(IX+%15)
0001B6 C5                  A  1526    	PUSH	BC
0001B7 DD07FA              A  1527    	LD	BC,(IX+%FFFFFFFA)
0001BA C5                  A  1528    	PUSH	BC
0001BB DD07FD              A  1529    	LD	BC,(IX+%FFFFFFFD)
0001BE C5                  A  1530    	PUSH	BC
0001BF CD 00 00 00         A  1531    	CALL	_Shell_ZFSGetDirFileName
0001C3 C1                  A  1532    	POP	BC
0001C4 C1                  A  1533    	POP	BC
0001C5 C1                  A  1534    	POP	BC
                           A  1535    ;  117	
                           A  1536    ;  118		/** Call the Make directory API of ZFS */
                           A  1537    ;  119		status = ZFSMkdir( pathName, dirName );
                           A  1538    .LINE 119
                           A  1539    
0001C6 DD07FA              A  1540    	LD	BC,(IX+%FFFFFFFA)
0001C9 C5                  A  1541    	PUSH	BC
0001CA DD07FD              A  1542    	LD	BC,(IX+%FFFFFFFD)
0001CD C5                  A  1543    	PUSH	BC
0001CE CD 00 00 00         A  1544    	CALL	_ZFSMkdir
0001D2 C1                  A  1545    	POP	BC
0001D3 C1                  A  1546    	POP	BC
0001D4 DD2FF7              A  1547    	LD	(IX+%FFFFFFF7),HL
                           A  1548    ;  120		if( status == ZFSERR_SUCCESS )
                           A  1549    .LINE 120
                           A  1550    
0001D7 CD 00 00 00         A  1551    	CALL	__icmpzero
0001DB 20 20               A  1552    	JR	NZ,L_30
                           A  1553    ;  121		{
                           A  1554    ;  122			printf("\nA subdirectory %s is created\n", argv[1]);
                           A  1555    .LINE 122
                           A  1556    
0001DD DD3115              A  1557    	LD	IY,(IX+%15)
0001E0 ED2303              A  1558    	LEA	HL,IY+%3
0001E3 ED07                A  1559    	LD	BC,(HL)
0001E5 C5                  A  1560    	PUSH	BC
0001E6 01 41 00 00         A  1561    	LD	BC,L__11
0001EA C5                  A  1562    	PUSH	BC
0001EB CD 00 00 00         A  1563    	CALL	_printf
0001EF C1                  A  1564    	POP	BC
0001F0 C1                  A  1565    	POP	BC
                           A  1566    ;  123			ret_val = ZSHELL_SUCCESS ;
                           A  1567    .LINE 123
                           A  1568    
0001F1 DD36F500            A  1569    	LD	(IX+%FFFFFFF5),%0
0001F5 DD36F600            A  1570    	LD	(IX+%FFFFFFF6),%0
                           A  1571    ;  124			goto _end_Shell_ZFSMkdir ;
                           A  1572    .LINE 124
                           A  1573    
0001F9 C3 92 02 00         A  1574    	JR	L_15
                           A  1575    ;  125		}
                           A  1576    ;  126		else
0001FD                     A  1577    L_30:
                           A  1578    .LINE 126
                           A  1579    
                           A  1580    ;  127		if ( status == ZFSERR_FILE_DIR_ALREADY_EXISTS )
                           A  1581    .LINE 127
                           A  1582    
0001FD 01F8FFFF            A  1583    	LD	BC,16777208
000201 DD27F7              A  1584    	LD	HL,(IX+%FFFFFFF7)
000204 B7                  A  1585    	OR	A,A
000205 ED42                A  1586    	SBC	HL,BC
000207 20 11               A  1587    	JR	NZ,L_28
                           A  1588    ;  128		{
                           A  1589    ;  129			printf("\nA subdirectory or file %s already exists\n", dirName );
                           A  1590    .LINE 129
                           A  1591    
000209 DD07FA              A  1592    	LD	BC,(IX+%FFFFFFFA)
00020C C5                  A  1593    	PUSH	BC
00020D 01 60 00 00         A  1594    	LD	BC,L__13
000211 C5                  A  1595    	PUSH	BC
000212 CD 00 00 00         A  1596    	CALL	_printf
000216 C1                  A  1597    	POP	BC
000217 C1                  A  1598    	POP	BC
                           A  1599    ;  130		}
                           A  1600    ;  131		else if( status == ZFSERR_FILE_DIR_DOES_NOT_EXIST )
                           A  1601    .LINE 131
                           A  1602    
000218 18 78               A  1603    	JR	L_32
00021A                     A  1604    L_28:
00021A 01F3FFFF            A  1605    	LD	BC,16777203
00021E DD27F7              A  1606    	LD	HL,(IX+%FFFFFFF7)
000221 B7                  A  1607    	OR	A,A
000222 ED42                A  1608    	SBC	HL,BC
000224 20 11               A  1609    	JR	NZ,L_26
                           A  1610    ;  132		{
                           A  1611    ;  133			printf("\nThe subdirectory %s does not exist\n", pathName );
                           A  1612    .LINE 133
                           A  1613    
000226 DD07FD              A  1614    	LD	BC,(IX+%FFFFFFFD)
000229 C5                  A  1615    	PUSH	BC
00022A 01 8B 00 00         A  1616    	LD	BC,L__15
00022E C5                  A  1617    	PUSH	BC
00022F CD 00 00 00         A  1618    	CALL	_printf
000233 C1                  A  1619    	POP	BC
000234 C1                  A  1620    	POP	BC
                           A  1621    ;  134		}
                           A  1622    ;  135		else if( status == ZFSERR_INVALID_FILEDIR_PATH )
                           A  1623    .LINE 135
                           A  1624    
000235 18 5B               A  1625    	JR	L_32
000237                     A  1626    L_26:
000237 01FCFFFF            A  1627    	LD	BC,16777212
00023B DD27F7              A  1628    	LD	HL,(IX+%FFFFFFF7)
00023E B7                  A  1629    	OR	A,A
00023F ED42                A  1630    	SBC	HL,BC
000241 20 0C               A  1631    	JR	NZ,L_24
                           A  1632    ;  136		{
                           A  1633    ;  137			printf("\nThe directory path is invalid\n" );
                           A  1634    .LINE 137
                           A  1635    
000243 01 B0 00 00         A  1636    	LD	BC,L__17
000247 C5                  A  1637    	PUSH	BC
000248 CD 00 00 00         A  1638    	CALL	_printf
00024C C1                  A  1639    	POP	BC
                           A  1640    ;  138		}
                           A  1641    ;  139		else if( status == ZFSERR_INVALID_FILE_DIR_NAME )
                           A  1642    .LINE 139
                           A  1643    
00024D 18 43               A  1644    	JR	L_32
00024F                     A  1645    L_24:
00024F 01F9FFFF            A  1646    	LD	BC,16777209
000253 DD27F7              A  1647    	LD	HL,(IX+%FFFFFFF7)
000256 B7                  A  1648    	OR	A,A
000257 ED42                A  1649    	SBC	HL,BC
000259 20 0C               A  1650    	JR	NZ,L_22
                           A  1651    ;  140		{
                           A  1652    ;  141			printf("\nThe directory name syntax is incorrect.\n");
                           A  1653    .LINE 141
                           A  1654    
00025B 01 D0 00 00         A  1655    	LD	BC,L__19
00025F C5                  A  1656    	PUSH	BC
000260 CD 00 00 00         A  1657    	CALL	_printf
000264 C1                  A  1658    	POP	BC
                           A  1659    ;  142		}
                           A  1660    ;  143		else if( status == ZFSERR_INVALID_VOLUME )
                           A  1661    .LINE 143
                           A  1662    
000265 18 2B               A  1663    	JR	L_32
000267                     A  1664    L_22:
000267 01E7FFFF            A  1665    	LD	BC,16777191
00026B DD27F7              A  1666    	LD	HL,(IX+%FFFFFFF7)
00026E B7                  A  1667    	OR	A,A
00026F ED42                A  1668    	SBC	HL,BC
000271 20 0C               A  1669    	JR	NZ,L_20
                           A  1670    ;  144		{
                           A  1671    ;  145			printf("\nAccessed volume is invalid. Format the volume to make it valid\n");
                           A  1672    .LINE 145
                           A  1673    
000273 01 FA 00 00         A  1674    	LD	BC,L__21
000277 C5                  A  1675    	PUSH	BC
000278 CD 00 00 00         A  1676    	CALL	_printf
00027C C1                  A  1677    	POP	BC
                           A  1678    ;  146		}
                           A  1679    ;  147		else if( status != ZFSERR_SUCCESS )
                           A  1680    .LINE 147
                           A  1681    
00027D 18 13               A  1682    	JR	L_32
00027F                     A  1683    L_20:
00027F DD27F7              A  1684    	LD	HL,(IX+%FFFFFFF7)
000282 CD 00 00 00         A  1685    	CALL	__icmpzero
000286 28 0A               A  1686    	JR	Z,L_32
                           A  1687    ;  148		{
                           A  1688    ;  149			printf("\nmd failed to create a directory\n");
                           A  1689    .LINE 149
                           A  1690    
000288 01 3B 01 00         A  1691    	LD	BC,L__23
00028C C5                  A  1692    	PUSH	BC
00028D CD 00 00 00         A  1693    	CALL	_printf
000291 C1                  A  1694    	POP	BC
                           A  1695    ;  150		}
000292                     A  1696    L_32:
                           A  1697    .LINE 150
                           A  1698    
000292                     A  1699    L_15:
                           A  1700    ;  151	
                           A  1701    ;  152	_end_Shell_ZFSMkdir:
                           A  1702    ;  153		if( pathName )
                           A  1703    .LINE 153
                           A  1704    
000292 DD27FD              A  1705    	LD	HL,(IX+%FFFFFFFD)
000295 CD 00 00 00         A  1706    	CALL	__icmpzero
000299 28 09               A  1707    	JR	Z,L_34
                           A  1708    ;  154			free( pathName ) ;
                           A  1709    .LINE 154
                           A  1710    
00029B DD07FD              A  1711    	LD	BC,(IX+%FFFFFFFD)
00029E C5                  A  1712    	PUSH	BC
00029F CD 00 00 00         A  1713    	CALL	_free
0002A3 C1                  A  1714    	POP	BC
0002A4                     A  1715    L_34:
                           A  1716    ;  155		if( dirName )
                           A  1717    .LINE 155
                           A  1718    
0002A4 DD27FA              A  1719    	LD	HL,(IX+%FFFFFFFA)
0002A7 CD 00 00 00         A  1720    	CALL	__icmpzero
0002AB 28 09               A  1721    	JR	Z,L_35
                           A  1722    ;  156			free( dirName ) ;
                           A  1723    .LINE 156
                           A  1724    
0002AD DD07FA              A  1725    	LD	BC,(IX+%FFFFFFFA)
0002B0 C5                  A  1726    	PUSH	BC
0002B1 CD 00 00 00         A  1727    	CALL	_free
0002B5 C1                  A  1728    	POP	BC
0002B6                     A  1729    L_35:
                           A  1730    ;  157	
                           A  1731    ;  158		return ret_val;
                           A  1732    .LINE 158
                           A  1733    
0002B6 DD27F5              A  1734    	LD	HL,(IX+%FFFFFFF5)
                           A  1735    ;  159	}
0002B9                     A  1736    L_36:
                           A  1737    .LINE 159
                           A  1738    
0002B9 DDF9                A  1739    	LD	SP,IX
0002BB DDE1                A  1740    	POP	IX
0002BD C9                  A  1741    	RET	
                           A  1742    
                           A  1743    
                           A  1744    ;**************************** _Shell_ZFSMkdir ***************************
                           A  1745    ;Name                         Addr/Register   Size   Type
                           A  1746    ;_free                               IMPORT  -----   function
                           A  1747    ;_ZFSMkdir                           IMPORT  -----   function
                           A  1748    ;_memset                             IMPORT  -----   function
                           A  1749    ;_malloc                             IMPORT  -----   function
                           A  1750    ;_printf                             IMPORT  -----   function
                           A  1751    ;ret_val                              IX-11      2   variable
                           A  1752    ;status                                IX-9      3   variable
                           A  1753    ;dirName                               IX-6      3   variable
                           A  1754    ;pathName                              IX-3      3   variable
                           A  1755    ;argv                                 IX+21      3   parameter
                           A  1756    ;nargs                                IX+18      2   parameter
                           A  1757    ;stderr                               IX+15      3   parameter
                           A  1758    ;stdout                               IX+12      3   parameter
                           A  1759    ;stdin                                 IX+9      3   parameter
                           A  1760    ;Shl                                   IX+6      3   parameter
                           A  1761    
                           A  1762    
                           A  1763    ; Stack Frame Size: 35 (bytes)
                           A  1764    ;       Spill Code: 0 (instruction)
                           A  1765    
                           A  1766    
                           A  1767    .ENDFUNC "Shell_ZFSMkdir",159,"_Shell_ZFSMkdir"
                           A  1768    	SEGMENT STRSECT
000003                     A  1769    L__6:
000003 0A                  A  1770    	DB	10
000004 54686520 73796E74   A  1771    	DB	"The syntax of the command is incorrect"
00000C 6178206F 66207468 
000014 6520636F 6D6D616E 
00001C 64206973 20696E63 
000024 6F727265 6374 
00002A 0A00                A  1772    	DB	10,0
00002C                     A  1773    L__7:
00002C 6D64203C 64697265   A  1774    	DB	"md <directory Name>"
000034 63746F72 79204E61 
00003C 6D653E 
00003F 0A00                A  1775    	DB	10,0
000041                     A  1776    L__11:
000041 0A                  A  1777    	DB	10
000042 41207375 62646972   A  1778    	DB	"A subdirectory %s is created"
00004A 6563746F 72792025 
000052 73206973 20637265 
00005A 61746564 
00005E 0A00                A  1779    	DB	10,0
000060                     A  1780    L__13:
000060 0A                  A  1781    	DB	10
000061 41207375 62646972   A  1782    	DB	"A subdirectory or file %s already exists"
000069 6563746F 7279206F 
000071 72206669 6C652025 
000079 7320616C 72656164 
000081 79206578 69737473 
000089 0A00                A  1783    	DB	10,0
00008B                     A  1784    L__15:
00008B 0A                  A  1785    	DB	10
00008C 54686520 73756264   A  1786    	DB	"The subdirectory %s does not exist"
000094 69726563 746F7279 
00009C 20257320 646F6573 
0000A4 206E6F74 20657869 
0000AC 7374 
0000AE 0A00                A  1787    	DB	10,0
0000B0                     A  1788    L__17:
0000B0 0A                  A  1789    	DB	10
0000B1 54686520 64697265   A  1790    	DB	"The directory path is invalid"
0000B9 63746F72 79207061 
0000C1 74682069 7320696E 
0000C9 76616C69 64 
0000CE 0A00                A  1791    	DB	10,0
0000D0                     A  1792    L__19:
0000D0 0A                  A  1793    	DB	10
0000D1 54686520 64697265   A  1794    	DB	"The directory name syntax is incorrect."
0000D9 63746F72 79206E61 
0000E1 6D652073 796E7461 
0000E9 78206973 20696E63 
0000F1 6F727265 63742E 
0000F8 0A00                A  1795    	DB	10,0
0000FA                     A  1796    L__21:
0000FA 0A                  A  1797    	DB	10
0000FB 41636365 73736564   A  1798    	DB	"Accessed volume is invalid. Format the volume to make it valid"
000103 20766F6C 756D6520 
00010B 69732069 6E76616C 
000113 69642E20 466F726D 
00011B 61742074 68652076 
000123 6F6C756D 6520746F 
00012B 206D616B 65206974 
000133 2076616C 6964 
000139 0A00                A  1799    	DB	10,0
00013B                     A  1800    L__23:
00013B 0A                  A  1801    	DB	10
00013C 6D642066 61696C65   A  1802    	DB	"md failed to create a directory"
000144 6420746F 20637265 
00014C 61746520 61206469 
000154 72656374 6F7279 
00015B 0A00                A  1803    	DB	10,0
                           A  1804    	SEGMENT CODE
                           A  1805    ;  160	
                           A  1806    ;  161	/* The following function is used to change the 
                           A  1807    ;  162	   current working directory to a new directory given by 
                           A  1808    ;  163	   the user */
                           A  1809    ;  164	INT16 Shell_ZFSChdir (
                           A  1810    ;  165		struct shvars *			Shl,
                           A  1811    ;  166		RZK_DEVICE_CB_t *						stdin,
                           A  1812    ;  167		RZK_DEVICE_CB_t *						stdout, 
                           A  1813    ;  168		RZK_DEVICE_CB_t *						stderr, 
                           A  1814    ;  169		UINT16					nargs,
                           A  1815    ;  170		INT8					*argv[]
                           A  1816    ;  171	)
                           A  1817    ;  172	{
0002BE                     A  1818    _Shell_ZFSChdir:
                           A  1819    .DEFINE "_Shell_ZFSChdir"
                           A  1820    
                           A  1821    .VALUE _Shell_ZFSChdir
                           A  1822    
                           A  1823    .CLASS 2
                           A  1824    
                           A  1825    .TYPE 67
                           A  1826    
                           A  1827    .ENDEF
                           A  1828    
                           A  1829    .BEGFUNC "Shell_ZFSChdir",172,"_Shell_ZFSChdir"
                           A  1830    
                           A  1831    .LINE 172
                           A  1832    
                           A  1833    .DEFINE "Shl"
                           A  1834    
                           A  1835    .CLASS 65
                           A  1836    
                           A  1837    .VALUE 6
                           A  1838    
                           A  1839    .TAG "shvars"
                           A  1840    
                           A  1841    .TYPE 40
                           A  1842    
                           A  1843    .ENDEF
                           A  1844    
                           A  1845    .DEFINE "stdin"
                           A  1846    
                           A  1847    .CLASS 65
                           A  1848    
                           A  1849    .VALUE 9
                           A  1850    
                           A  1851    .TAG "RZK_DEVICE_CB_t"
                           A  1852    
                           A  1853    .TYPE 40
                           A  1854    
                           A  1855    .ENDEF
                           A  1856    
                           A  1857    .DEFINE "stdout"
                           A  1858    
                           A  1859    .CLASS 65
                           A  1860    
                           A  1861    .VALUE 12
                           A  1862    
                           A  1863    .TAG "RZK_DEVICE_CB_t"
                           A  1864    
                           A  1865    .TYPE 40
                           A  1866    
                           A  1867    .ENDEF
                           A  1868    
                           A  1869    .DEFINE "stderr"
                           A  1870    
                           A  1871    .CLASS 65
                           A  1872    
                           A  1873    .VALUE 15
                           A  1874    
                           A  1875    .TAG "RZK_DEVICE_CB_t"
                           A  1876    
                           A  1877    .TYPE 40
                           A  1878    
                           A  1879    .ENDEF
                           A  1880    
                           A  1881    .DEFINE "nargs"
                           A  1882    
                           A  1883    .CLASS 65
                           A  1884    
                           A  1885    .VALUE 18
                           A  1886    
                           A  1887    .TYPE 13
                           A  1888    
                           A  1889    .ENDEF
                           A  1890    
                           A  1891    .DEFINE "argv"
                           A  1892    
                           A  1893    .CLASS 65
                           A  1894    
                           A  1895    .VALUE 21
                           A  1896    
                           A  1897    .TYPE 290
                           A  1898    
                           A  1899    .ENDEF
                           A  1900    
                           A  1901    .DEFINE "pcwd"
                           A  1902    
                           A  1903    .CLASS 65
                           A  1904    
                           A  1905    .VALUE -3
                           A  1906    
                           A  1907    .TYPE 34
                           A  1908    
                           A  1909    .ENDEF
                           A  1910    
                           A  1911    .DEFINE "ret_val"
                           A  1912    
                           A  1913    .CLASS 65
                           A  1914    
                           A  1915    .VALUE -5
                           A  1916    
                           A  1917    .TYPE 3
                           A  1918    
                           A  1919    .ENDEF
                           A  1920    
0002BE DDE5                A  1921    	PUSH	IX
0002C0 DD210000 00         A  1922    	LD	IX,0
0002C5 DD39                A  1923    	ADD	IX,SP
0002C7 C5                  A  1924    	PUSH	BC
0002C8 3B                  A  1925    	DEC	SP
0002C9 3B                  A  1926    	DEC	SP
                           A  1927    ;  173		INT8		*pcwd = ( INT8* ) NULL ;
                           A  1928    .LINE 173
                           A  1929    
0002CA 01000000            A  1930    	LD	BC,0
0002CE DD0FFD              A  1931    	LD	(IX+%FFFFFFFD),BC
                           A  1932    ;  174		INT16 ret_val = ZSHELL_FAILURE;
                           A  1933    .LINE 174
                           A  1934    
0002D1 DD36FBFF            A  1935    	LD	(IX+%FFFFFFFB),%FF
0002D5 DD36FCFF            A  1936    	LD	(IX+%FFFFFFFC),%FF
                           A  1937    ;  175		
                           A  1938    ;  176		/** Validate the number of arguments */
                           A  1939    ;  177		if( nargs != 2 )
                           A  1940    .LINE 177
                           A  1941    
0002D9 49010200            A  1942    	LD.LIS	BC,2
0002DD DD2712              A  1943    	LD	HL,(IX+%12)
0002E0 B7                  A  1944    	OR	A,A
0002E1 40ED42              A  1945    	SBC.SIS	HL,BC
0002E4 28 1C               A  1946    	JR	Z,L_38
                           A  1947    ;  178		{
                           A  1948    ;  179			printf("\nThe syntax of the command is incorrect\n");
                           A  1949    .LINE 179
                           A  1950    
0002E6 01 5D 01 00         A  1951    	LD	BC,L__28
0002EA C5                  A  1952    	PUSH	BC
0002EB CD 00 00 00         A  1953    	CALL	_printf
0002EF C1                  A  1954    	POP	BC
                           A  1955    ;  180			printf("cd <directory Name>\n");
                           A  1956    .LINE 180
                           A  1957    
0002F0 01 86 01 00         A  1958    	LD	BC,L__29
0002F4 C5                  A  1959    	PUSH	BC
0002F5 CD 00 00 00         A  1960    	CALL	_printf
0002F9 C1                  A  1961    	POP	BC
                           A  1962    ;  181			return ZSHELL_FAILURE ;
                           A  1963    .LINE 181
                           A  1964    
0002FA 4921FFFF            A  1965    	LD.LIS	HL,-1
0002FE C3 8F 03 00         A  1966    	JR	L_48
                           A  1967    ;  182		}
000302                     A  1968    L_38:
                           A  1969    .LINE 182
                           A  1970    
                           A  1971    ;  183	
                           A  1972    ;  184		pcwd = ( INT8* ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  1973    .LINE 184
                           A  1974    
000302 01000100            A  1975    	LD	BC,256
000306 C5                  A  1976    	PUSH	BC
000307 CD 00 00 00         A  1977    	CALL	_malloc
00030B C1                  A  1978    	POP	BC
00030C DD2FFD              A  1979    	LD	(IX+%FFFFFFFD),HL
                           A  1980    ;  185		if( pcwd == NULL )
                           A  1981    .LINE 185
                           A  1982    
00030F CD 00 00 00         A  1983    	CALL	__icmpzero
000313 28 65               A  1984    	JR	Z,L_39
                           A  1985    ;  186			goto end_Shell_ZFSChdir ;
                           A  1986    ;  187	
                           A  1987    ;  188		memset( pcwd, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  1988    .LINE 188
                           A  1989    
000315 01000100            A  1990    	LD	BC,256
000319 C5                  A  1991    	PUSH	BC
00031A 01000000            A  1992    	LD	BC,0
00031E C5                  A  1993    	PUSH	BC
00031F DD07FD              A  1994    	LD	BC,(IX+%FFFFFFFD)
000322 C5                  A  1995    	PUSH	BC
000323 CD 00 00 00         A  1996    	CALL	_memset
000327 C1                  A  1997    	POP	BC
000328 C1                  A  1998    	POP	BC
000329 C1                  A  1999    	POP	BC
                           A  2000    ;  189		/** Call the change directory API of ZFS */
                           A  2001    ;  190		if ( ZFSChdir( argv[1] ) )	
                           A  2002    .LINE 190
                           A  2003    
00032A DD3115              A  2004    	LD	IY,(IX+%15)
00032D ED2303              A  2005    	LEA	HL,IY+%3
000330 ED07                A  2006    	LD	BC,(HL)
000332 C5                  A  2007    	PUSH	BC
000333 CD 00 00 00         A  2008    	CALL	_ZFSChdir
000337 C1                  A  2009    	POP	BC
000338 CD 00 00 00         A  2010    	CALL	__icmpzero
00033C 28 16               A  2011    	JR	Z,L_44
                           A  2012    ;  191		{
                           A  2013    ;  192			printf("\nA subdirectory %s does not exist or accessing an invalid volume\n", argv[1]);
                           A  2014    .LINE 192
                           A  2015    
00033E DD3115              A  2016    	LD	IY,(IX+%15)
000341 ED2303              A  2017    	LEA	HL,IY+%3
000344 ED07                A  2018    	LD	BC,(HL)
000346 C5                  A  2019    	PUSH	BC
000347 01 9B 01 00         A  2020    	LD	BC,L__32
00034B C5                  A  2021    	PUSH	BC
00034C CD 00 00 00         A  2022    	CALL	_printf
000350 C1                  A  2023    	POP	BC
000351 C1                  A  2024    	POP	BC
                           A  2025    ;  193			goto end_Shell_ZFSChdir ;
                           A  2026    .LINE 193
                           A  2027    
000352 18 26               A  2028    	JR	L_39
                           A  2029    ;  194		}
000354                     A  2030    L_44:
                           A  2031    .LINE 194
                           A  2032    
                           A  2033    ;  195		if( !ZFSGetCwd(pcwd) )
                           A  2034    .LINE 195
                           A  2035    
000354 DD07FD              A  2036    	LD	BC,(IX+%FFFFFFFD)
000357 C5                  A  2037    	PUSH	BC
000358 CD 00 00 00         A  2038    	CALL	_ZFSGetCwd
00035C C1                  A  2039    	POP	BC
00035D CD 00 00 00         A  2040    	CALL	__icmpzero
000361 20 0F               A  2041    	JR	NZ,L_45
                           A  2042    ;  196			printf("\nCWD is changed to %s\n", pcwd);
                           A  2043    .LINE 196
                           A  2044    
000363 DD07FD              A  2045    	LD	BC,(IX+%FFFFFFFD)
000366 C5                  A  2046    	PUSH	BC
000367 01 DD 01 00         A  2047    	LD	BC,L__34
00036B C5                  A  2048    	PUSH	BC
00036C CD 00 00 00         A  2049    	CALL	_printf
000370 C1                  A  2050    	POP	BC
000371 C1                  A  2051    	POP	BC
000372                     A  2052    L_45:
                           A  2053    ;  197		
                           A  2054    ;  198			ret_val = ZSHELL_SUCCESS ;
                           A  2055    .LINE 198
                           A  2056    
000372 DD36FB00            A  2057    	LD	(IX+%FFFFFFFB),%0
000376 DD36FC00            A  2058    	LD	(IX+%FFFFFFFC),%0
00037A                     A  2059    L_39:
                           A  2060    ;  199	
                           A  2061    ;  200	end_Shell_ZFSChdir :
                           A  2062    ;  201		if( pcwd )
                           A  2063    .LINE 201
                           A  2064    
00037A DD27FD              A  2065    	LD	HL,(IX+%FFFFFFFD)
00037D CD 00 00 00         A  2066    	CALL	__icmpzero
000381 28 09               A  2067    	JR	Z,L_47
                           A  2068    ;  202			free(pcwd);
                           A  2069    .LINE 202
                           A  2070    
000383 DD07FD              A  2071    	LD	BC,(IX+%FFFFFFFD)
000386 C5                  A  2072    	PUSH	BC
000387 CD 00 00 00         A  2073    	CALL	_free
00038B C1                  A  2074    	POP	BC
00038C                     A  2075    L_47:
                           A  2076    ;  203	
                           A  2077    ;  204		return ret_val;
                           A  2078    .LINE 204
                           A  2079    
00038C DD27FB              A  2080    	LD	HL,(IX+%FFFFFFFB)
                           A  2081    ;  205	
                           A  2082    ;  206	}
00038F                     A  2083    L_48:
                           A  2084    .LINE 206
                           A  2085    
00038F DDF9                A  2086    	LD	SP,IX
000391 DDE1                A  2087    	POP	IX
000393 C9                  A  2088    	RET	
                           A  2089    
                           A  2090    
                           A  2091    ;**************************** _Shell_ZFSChdir ***************************
                           A  2092    ;Name                         Addr/Register   Size   Type
                           A  2093    ;_free                               IMPORT  -----   function
                           A  2094    ;_ZFSGetCwd                          IMPORT  -----   function
                           A  2095    ;_ZFSChdir                           IMPORT  -----   function
                           A  2096    ;_memset                             IMPORT  -----   function
                           A  2097    ;_malloc                             IMPORT  -----   function
                           A  2098    ;_printf                             IMPORT  -----   function
                           A  2099    ;ret_val                               IX-5      2   variable
                           A  2100    ;pcwd                                  IX-3      3   variable
                           A  2101    ;argv                                 IX+21      3   parameter
                           A  2102    ;nargs                                IX+18      2   parameter
                           A  2103    ;stderr                               IX+15      3   parameter
                           A  2104    ;stdout                               IX+12      3   parameter
                           A  2105    ;stdin                                 IX+9      3   parameter
                           A  2106    ;Shl                                   IX+6      3   parameter
                           A  2107    
                           A  2108    
                           A  2109    ; Stack Frame Size: 29 (bytes)
                           A  2110    ;       Spill Code: 0 (instruction)
                           A  2111    
                           A  2112    
                           A  2113    .ENDFUNC "Shell_ZFSChdir",206,"_Shell_ZFSChdir"
                           A  2114    	SEGMENT STRSECT
00015D                     A  2115    L__28:
00015D 0A                  A  2116    	DB	10
00015E 54686520 73796E74   A  2117    	DB	"The syntax of the command is incorrect"
000166 6178206F 66207468 
00016E 6520636F 6D6D616E 
000176 64206973 20696E63 
00017E 6F727265 6374 
000184 0A00                A  2118    	DB	10,0
000186                     A  2119    L__29:
000186 6364203C 64697265   A  2120    	DB	"cd <directory Name>"
00018E 63746F72 79204E61 
000196 6D653E 
000199 0A00                A  2121    	DB	10,0
00019B                     A  2122    L__32:
00019B 0A                  A  2123    	DB	10
00019C 41207375 62646972   A  2124    	DB	"A subdirectory %s does not exist or accessing an invalid volume"
0001A4 6563746F 72792025 
0001AC 7320646F 6573206E 
0001B4 6F742065 78697374 
0001BC 206F7220 61636365 
0001C4 7373696E 6720616E 
0001CC 20696E76 616C6964 
0001D4 20766F6C 756D65 
0001DB 0A00                A  2125    	DB	10,0
0001DD                     A  2126    L__34:
0001DD 0A                  A  2127    	DB	10
0001DE 43574420 69732063   A  2128    	DB	"CWD is changed to %s"
0001E6 68616E67 65642074 
0001EE 6F202573 
0001F2 0A00                A  2129    	DB	10,0
                           A  2130    	SEGMENT CODE
                           A  2131    ;  207	
                           A  2132    ;  208	/* The following function is used to delete a 
                           A  2133    ;  209	   file given by the user */
                           A  2134    ;  210	INT16 Shell_ZFSDelFile (
                           A  2135    ;  211		struct shvars *			Shl,
                           A  2136    ;  212		RZK_DEVICE_CB_t *						stdin,
                           A  2137    ;  213		RZK_DEVICE_CB_t *						stdout, 
                           A  2138    ;  214		RZK_DEVICE_CB_t *						stderr, 
                           A  2139    ;  215		UINT16					nargs,
                           A  2140    ;  216		INT8					*argv[]
                           A  2141    ;  217	)
                           A  2142    ;  218	{
000394                     A  2143    _Shell_ZFSDelFile:
                           A  2144    .DEFINE "_Shell_ZFSDelFile"
                           A  2145    
                           A  2146    .VALUE _Shell_ZFSDelFile
                           A  2147    
                           A  2148    .CLASS 2
                           A  2149    
                           A  2150    .TYPE 67
                           A  2151    
                           A  2152    .ENDEF
                           A  2153    
                           A  2154    .BEGFUNC "Shell_ZFSDelFile",218,"_Shell_ZFSDelFile"
                           A  2155    
                           A  2156    .LINE 218
                           A  2157    
                           A  2158    .DEFINE "Shl"
                           A  2159    
                           A  2160    .CLASS 65
                           A  2161    
                           A  2162    .VALUE 6
                           A  2163    
                           A  2164    .TAG "shvars"
                           A  2165    
                           A  2166    .TYPE 40
                           A  2167    
                           A  2168    .ENDEF
                           A  2169    
                           A  2170    .DEFINE "stdin"
                           A  2171    
                           A  2172    .CLASS 65
                           A  2173    
                           A  2174    .VALUE 9
                           A  2175    
                           A  2176    .TAG "RZK_DEVICE_CB_t"
                           A  2177    
                           A  2178    .TYPE 40
                           A  2179    
                           A  2180    .ENDEF
                           A  2181    
                           A  2182    .DEFINE "stdout"
                           A  2183    
                           A  2184    .CLASS 65
                           A  2185    
                           A  2186    .VALUE 12
                           A  2187    
                           A  2188    .TAG "RZK_DEVICE_CB_t"
                           A  2189    
                           A  2190    .TYPE 40
                           A  2191    
                           A  2192    .ENDEF
                           A  2193    
                           A  2194    .DEFINE "stderr"
                           A  2195    
                           A  2196    .CLASS 65
                           A  2197    
                           A  2198    .VALUE 15
                           A  2199    
                           A  2200    .TAG "RZK_DEVICE_CB_t"
                           A  2201    
                           A  2202    .TYPE 40
                           A  2203    
                           A  2204    .ENDEF
                           A  2205    
                           A  2206    .DEFINE "nargs"
                           A  2207    
                           A  2208    .CLASS 65
                           A  2209    
                           A  2210    .VALUE 18
                           A  2211    
                           A  2212    .TYPE 13
                           A  2213    
                           A  2214    .ENDEF
                           A  2215    
                           A  2216    .DEFINE "argv"
                           A  2217    
                           A  2218    .CLASS 65
                           A  2219    
                           A  2220    .VALUE 21
                           A  2221    
                           A  2222    .TYPE 290
                           A  2223    
                           A  2224    .ENDEF
                           A  2225    
000394 DDE5                A  2226    	PUSH	IX
000396 DD210000 00         A  2227    	LD	IX,0
00039B DD39                A  2228    	ADD	IX,SP
                           A  2229    ;  219		/** Validate the number of arguments */
                           A  2230    ;  220		if( nargs != 2 )
                           A  2231    .LINE 220
                           A  2232    
00039D 49010200            A  2233    	LD.LIS	BC,2
0003A1 DD2712              A  2234    	LD	HL,(IX+%12)
0003A4 B7                  A  2235    	OR	A,A
0003A5 40ED42              A  2236    	SBC.SIS	HL,BC
0003A8 28 1A               A  2237    	JR	Z,L_51
                           A  2238    ;  221		{
                           A  2239    ;  222			printf("\nThe syntax of the command is incorrect\n");
                           A  2240    .LINE 222
                           A  2241    
0003AA 01 F4 01 00         A  2242    	LD	BC,L__38
0003AE C5                  A  2243    	PUSH	BC
0003AF CD 00 00 00         A  2244    	CALL	_printf
0003B3 C1                  A  2245    	POP	BC
                           A  2246    ;  223			printf("del <file Name>\n");
                           A  2247    .LINE 223
                           A  2248    
0003B4 01 1D 02 00         A  2249    	LD	BC,L__39
0003B8 C5                  A  2250    	PUSH	BC
0003B9 CD 00 00 00         A  2251    	CALL	_printf
0003BD C1                  A  2252    	POP	BC
                           A  2253    ;  224			return ZSHELL_FAILURE ;
                           A  2254    .LINE 224
                           A  2255    
0003BE 4921FFFF            A  2256    	LD.LIS	HL,-1
0003C2 18 45               A  2257    	JR	L_53
                           A  2258    ;  225		}
0003C4                     A  2259    L_51:
                           A  2260    .LINE 225
                           A  2261    
                           A  2262    ;  226		/** Call the delete directory API of ZFS */
                           A  2263    ;  227		if( ZFSDelete( argv[1] ) )	
                           A  2264    .LINE 227
                           A  2265    
0003C4 DD3115              A  2266    	LD	IY,(IX+%15)
0003C7 ED2303              A  2267    	LEA	HL,IY+%3
0003CA ED07                A  2268    	LD	BC,(HL)
0003CC C5                  A  2269    	PUSH	BC
0003CD CD 00 00 00         A  2270    	CALL	_ZFSDelete
0003D1 C1                  A  2271    	POP	BC
0003D2 CD 00 00 00         A  2272    	CALL	__icmpzero
0003D6 28 1A               A  2273    	JR	Z,L_52
                           A  2274    ;  228		{
                           A  2275    ;  229			printf("\nUnable to delete %s or accessing an invalid volume\n", argv[1]);
                           A  2276    .LINE 229
                           A  2277    
0003D8 DD3115              A  2278    	LD	IY,(IX+%15)
0003DB ED2303              A  2279    	LEA	HL,IY+%3
0003DE ED07                A  2280    	LD	BC,(HL)
0003E0 C5                  A  2281    	PUSH	BC
0003E1 01 2E 02 00         A  2282    	LD	BC,L__41
0003E5 C5                  A  2283    	PUSH	BC
0003E6 CD 00 00 00         A  2284    	CALL	_printf
0003EA C1                  A  2285    	POP	BC
0003EB C1                  A  2286    	POP	BC
                           A  2287    ;  230			return ZSHELL_FAILURE ;
                           A  2288    .LINE 230
                           A  2289    
0003EC 4921FFFF            A  2290    	LD.LIS	HL,-1
0003F0 18 17               A  2291    	JR	L_53
                           A  2292    ;  231		}
0003F2                     A  2293    L_52:
                           A  2294    .LINE 231
                           A  2295    
                           A  2296    ;  232		printf("\nFile %s is deleted\n", argv[1]);
                           A  2297    .LINE 232
                           A  2298    
0003F2 DD3115              A  2299    	LD	IY,(IX+%15)
0003F5 ED2303              A  2300    	LEA	HL,IY+%3
0003F8 ED07                A  2301    	LD	BC,(HL)
0003FA C5                  A  2302    	PUSH	BC
0003FB 01 63 02 00         A  2303    	LD	BC,L__42
0003FF C5                  A  2304    	PUSH	BC
000400 CD 00 00 00         A  2305    	CALL	_printf
000404 C1                  A  2306    	POP	BC
000405 C1                  A  2307    	POP	BC
                           A  2308    ;  233		return ZSHELL_SUCCESS;
                           A  2309    .LINE 233
                           A  2310    
000406 B7                  A  2311    	OR	A,A
000407 ED62                A  2312    	SBC	HL,HL
                           A  2313    ;  234	}
000409                     A  2314    L_53:
                           A  2315    .LINE 234
                           A  2316    
000409 DDF9                A  2317    	LD	SP,IX
00040B DDE1                A  2318    	POP	IX
00040D C9                  A  2319    	RET	
                           A  2320    
                           A  2321    
                           A  2322    ;**************************** _Shell_ZFSDelFile ***************************
                           A  2323    ;Name                         Addr/Register   Size   Type
                           A  2324    ;_ZFSDelete                          IMPORT  -----   function
                           A  2325    ;_printf                             IMPORT  -----   function
                           A  2326    ;argv                                 IX+21      3   parameter
                           A  2327    ;nargs                                IX+18      2   parameter
                           A  2328    ;stderr                               IX+15      3   parameter
                           A  2329    ;stdout                               IX+12      3   parameter
                           A  2330    ;stdin                                 IX+9      3   parameter
                           A  2331    ;Shl                                   IX+6      3   parameter
                           A  2332    
                           A  2333    
                           A  2334    ; Stack Frame Size: 24 (bytes)
                           A  2335    ;       Spill Code: 0 (instruction)
                           A  2336    
                           A  2337    
                           A  2338    .ENDFUNC "Shell_ZFSDelFile",234,"_Shell_ZFSDelFile"
                           A  2339    	SEGMENT STRSECT
0001F4                     A  2340    L__38:
0001F4 0A                  A  2341    	DB	10
0001F5 54686520 73796E74   A  2342    	DB	"The syntax of the command is incorrect"
0001FD 6178206F 66207468 
000205 6520636F 6D6D616E 
00020D 64206973 20696E63 
000215 6F727265 6374 
00021B 0A00                A  2343    	DB	10,0
00021D                     A  2344    L__39:
00021D 64656C20 3C66696C   A  2345    	DB	"del <file Name>"
000225 65204E61 6D653E 
00022C 0A00                A  2346    	DB	10,0
00022E                     A  2347    L__41:
00022E 0A                  A  2348    	DB	10
00022F 556E6162 6C652074   A  2349    	DB	"Unable to delete %s or accessing an invalid volume"
000237 6F206465 6C657465 
00023F 20257320 6F722061 
000247 63636573 73696E67 
00024F 20616E20 696E7661 
000257 6C696420 766F6C75 
00025F 6D65 
000261 0A00                A  2350    	DB	10,0
000263                     A  2351    L__42:
000263 0A                  A  2352    	DB	10
000264 46696C65 20257320   A  2353    	DB	"File %s is deleted"
00026C 69732064 656C6574 
000274 6564 
000276 0A00                A  2354    	DB	10,0
                           A  2355    	SEGMENT CODE
                           A  2356    ;  235	
                           A  2357    ;  236	/** The following function deletes dir*/
                           A  2358    ;  237	INT16 ShellDeleteDir( UINT16   nargs, 
                           A  2359    ;  238						    INT8   *argv[], 
                           A  2360    ;  239						    UINT8  delMode,
                           A  2361    ;  240	 					    RZK_DEVICE_CB_t *		stdout
                           A  2362    ;  241						  )
                           A  2363    ;  242	{
00040E                     A  2364    _ShellDeleteDir:
                           A  2365    .DEFINE "_ShellDeleteDir"
                           A  2366    
                           A  2367    .VALUE _ShellDeleteDir
                           A  2368    
                           A  2369    .CLASS 2
                           A  2370    
                           A  2371    .TYPE 67
                           A  2372    
                           A  2373    .ENDEF
                           A  2374    
                           A  2375    .BEGFUNC "ShellDeleteDir",242,"_ShellDeleteDir"
                           A  2376    
                           A  2377    .LINE 242
                           A  2378    
                           A  2379    .DEFINE "nargs"
                           A  2380    
                           A  2381    .CLASS 65
                           A  2382    
                           A  2383    .VALUE 6
                           A  2384    
                           A  2385    .TYPE 13
                           A  2386    
                           A  2387    .ENDEF
                           A  2388    
                           A  2389    .DEFINE "argv"
                           A  2390    
                           A  2391    .CLASS 65
                           A  2392    
                           A  2393    .VALUE 9
                           A  2394    
                           A  2395    .TYPE 290
                           A  2396    
                           A  2397    .ENDEF
                           A  2398    
                           A  2399    .DEFINE "delMode"
                           A  2400    
                           A  2401    .CLASS 65
                           A  2402    
                           A  2403    .VALUE 12
                           A  2404    
                           A  2405    .TYPE 12
                           A  2406    
                           A  2407    .ENDEF
                           A  2408    
                           A  2409    .DEFINE "stdout"
                           A  2410    
                           A  2411    .CLASS 65
                           A  2412    
                           A  2413    .VALUE 15
                           A  2414    
                           A  2415    .TAG "RZK_DEVICE_CB_t"
                           A  2416    
                           A  2417    .TYPE 40
                           A  2418    
                           A  2419    .ENDEF
                           A  2420    
00040E DDE5                A  2421    	PUSH	IX
000410 DD210000 00         A  2422    	LD	IX,0
000415 DD39                A  2423    	ADD	IX,SP
                           A  2424    ;  243		/** Validate the number of arguments */
                           A  2425    ;  244		if( nargs != 2 )
                           A  2426    .LINE 244
                           A  2427    
000417 49010200            A  2428    	LD.LIS	BC,2
00041B DD2706              A  2429    	LD	HL,(IX+%6)
00041E B7                  A  2430    	OR	A,A
00041F 40ED42              A  2431    	SBC.SIS	HL,BC
000422 28 1A               A  2432    	JR	Z,L_56
                           A  2433    ;  245		{
                           A  2434    ;  246			printf("\nThe syntax of the command is incorrect\n");
                           A  2435    .LINE 246
                           A  2436    
000424 01 78 02 00         A  2437    	LD	BC,L__45
000428 C5                  A  2438    	PUSH	BC
000429 CD 00 00 00         A  2439    	CALL	_printf
00042D C1                  A  2440    	POP	BC
                           A  2441    ;  247			printf("deldir <directory Name>\n");
                           A  2442    .LINE 247
                           A  2443    
00042E 01 A1 02 00         A  2444    	LD	BC,L__46
000432 C5                  A  2445    	PUSH	BC
000433 CD 00 00 00         A  2446    	CALL	_printf
000437 C1                  A  2447    	POP	BC
                           A  2448    ;  248			return ZSHELL_FAILURE ;
                           A  2449    .LINE 248
                           A  2450    
000438 4921FFFF            A  2451    	LD.LIS	HL,-1
00043C 18 4C               A  2452    	JR	L_58
                           A  2453    ;  249		}
00043E                     A  2454    L_56:
                           A  2455    .LINE 249
                           A  2456    
                           A  2457    ;  250		if( ZFSDeleteDir(argv[1],delMode) )	
                           A  2458    .LINE 250
                           A  2459    
00043E DD4E0C              A  2460    	LD	C,(IX+%C)
000441 0600                A  2461    	LD	B,%0
000443 C5                  A  2462    	PUSH	BC
000444 DD3109              A  2463    	LD	IY,(IX+%9)
000447 ED2303              A  2464    	LEA	HL,IY+%3
00044A ED07                A  2465    	LD	BC,(HL)
00044C C5                  A  2466    	PUSH	BC
00044D CD 00 00 00         A  2467    	CALL	_ZFSDeleteDir
000451 C1                  A  2468    	POP	BC
000452 C1                  A  2469    	POP	BC
000453 CD 00 00 00         A  2470    	CALL	__icmpzero
000457 28 1A               A  2471    	JR	Z,L_57
                           A  2472    ;  251		{
                           A  2473    ;  252			printf("\nUnable to delete the directory %s or accessing an invalid volume\n", argv[1] );
                           A  2474    .LINE 252
                           A  2475    
000459 DD3109              A  2476    	LD	IY,(IX+%9)
00045C ED2303              A  2477    	LEA	HL,IY+%3
00045F ED07                A  2478    	LD	BC,(HL)
000461 C5                  A  2479    	PUSH	BC
000462 01 BA 02 00         A  2480    	LD	BC,L__48
000466 C5                  A  2481    	PUSH	BC
000467 CD 00 00 00         A  2482    	CALL	_printf
00046B C1                  A  2483    	POP	BC
00046C C1                  A  2484    	POP	BC
                           A  2485    ;  253			return ZSHELL_FAILURE ;
                           A  2486    .LINE 253
                           A  2487    
00046D 4921FFFF            A  2488    	LD.LIS	HL,-1
000471 18 17               A  2489    	JR	L_58
                           A  2490    ;  254		}
000473                     A  2491    L_57:
                           A  2492    .LINE 254
                           A  2493    
                           A  2494    ;  255		printf("\nDirectory %s is deleted\n", argv[1]);
                           A  2495    .LINE 255
                           A  2496    
000473 DD3109              A  2497    	LD	IY,(IX+%9)
000476 ED2303              A  2498    	LEA	HL,IY+%3
000479 ED07                A  2499    	LD	BC,(HL)
00047B C5                  A  2500    	PUSH	BC
00047C 01 FD 02 00         A  2501    	LD	BC,L__49
000480 C5                  A  2502    	PUSH	BC
000481 CD 00 00 00         A  2503    	CALL	_printf
000485 C1                  A  2504    	POP	BC
000486 C1                  A  2505    	POP	BC
                           A  2506    ;  256		return ZSHELL_SUCCESS;
                           A  2507    .LINE 256
                           A  2508    
000487 B7                  A  2509    	OR	A,A
000488 ED62                A  2510    	SBC	HL,HL
                           A  2511    ;  257	}
00048A                     A  2512    L_58:
                           A  2513    .LINE 257
                           A  2514    
00048A DDF9                A  2515    	LD	SP,IX
00048C DDE1                A  2516    	POP	IX
00048E C9                  A  2517    	RET	
                           A  2518    
                           A  2519    
                           A  2520    ;**************************** _ShellDeleteDir ***************************
                           A  2521    ;Name                         Addr/Register   Size   Type
                           A  2522    ;_ZFSDeleteDir                       IMPORT  -----   function
                           A  2523    ;_printf                             IMPORT  -----   function
                           A  2524    ;stdout                               IX+15      3   parameter
                           A  2525    ;delMode                              IX+12      1   parameter
                           A  2526    ;argv                                  IX+9      3   parameter
                           A  2527    ;nargs                                 IX+6      2   parameter
                           A  2528    
                           A  2529    
                           A  2530    ; Stack Frame Size: 18 (bytes)
                           A  2531    ;       Spill Code: 0 (instruction)
                           A  2532    
                           A  2533    
                           A  2534    .ENDFUNC "ShellDeleteDir",257,"_ShellDeleteDir"
                           A  2535    	SEGMENT STRSECT
000278                     A  2536    L__45:
000278 0A                  A  2537    	DB	10
000279 54686520 73796E74   A  2538    	DB	"The syntax of the command is incorrect"
000281 6178206F 66207468 
000289 6520636F 6D6D616E 
000291 64206973 20696E63 
000299 6F727265 6374 
00029F 0A00                A  2539    	DB	10,0
0002A1                     A  2540    L__46:
0002A1 64656C64 6972203C   A  2541    	DB	"deldir <directory Name>"
0002A9 64697265 63746F72 
0002B1 79204E61 6D653E 
0002B8 0A00                A  2542    	DB	10,0
0002BA                     A  2543    L__48:
0002BA 0A                  A  2544    	DB	10
0002BB 556E6162 6C652074   A  2545    	DB	"Unable to delete the directory %s or accessing an invalid volume"
0002C3 6F206465 6C657465 
0002CB 20746865 20646972 
0002D3 6563746F 72792025 
0002DB 73206F72 20616363 
0002E3 65737369 6E672061 
0002EB 6E20696E 76616C69 
0002F3 6420766F 6C756D65 
0002FB 0A00                A  2546    	DB	10,0
0002FD                     A  2547    L__49:
0002FD 0A                  A  2548    	DB	10
0002FE 44697265 63746F72   A  2549    	DB	"Directory %s is deleted"
000306 79202573 20697320 
00030E 64656C65 746564 
000315 0A00                A  2550    	DB	10,0
                           A  2551    	SEGMENT CODE
                           A  2552    ;  258	
                           A  2553    ;  259	/* The following function is used to delete a 
                           A  2554    ;  260	   directory specified by the user */
                           A  2555    ;  261	INT16 Shell_ZFSDelDirAll (
                           A  2556    ;  262		struct shvars *			Shl,
                           A  2557    ;  263		RZK_DEVICE_CB_t *						stdin,
                           A  2558    ;  264		RZK_DEVICE_CB_t *						stdout, 
                           A  2559    ;  265		RZK_DEVICE_CB_t *						stderr, 
                           A  2560    ;  266		UINT16					nargs,
                           A  2561    ;  267		INT8					*argv[]
                           A  2562    ;  268	)
                           A  2563    ;  269	{
00048F                     A  2564    _Shell_ZFSDelDirAll:
                           A  2565    .DEFINE "_Shell_ZFSDelDirAll"
                           A  2566    
                           A  2567    .VALUE _Shell_ZFSDelDirAll
                           A  2568    
                           A  2569    .CLASS 2
                           A  2570    
                           A  2571    .TYPE 67
                           A  2572    
                           A  2573    .ENDEF
                           A  2574    
                           A  2575    .BEGFUNC "Shell_ZFSDelDirAll",269,"_Shell_ZFSDelDirAll"
                           A  2576    
                           A  2577    .LINE 269
                           A  2578    
                           A  2579    .DEFINE "Shl"
                           A  2580    
                           A  2581    .CLASS 65
                           A  2582    
                           A  2583    .VALUE 6
                           A  2584    
                           A  2585    .TAG "shvars"
                           A  2586    
                           A  2587    .TYPE 40
                           A  2588    
                           A  2589    .ENDEF
                           A  2590    
                           A  2591    .DEFINE "stdin"
                           A  2592    
                           A  2593    .CLASS 65
                           A  2594    
                           A  2595    .VALUE 9
                           A  2596    
                           A  2597    .TAG "RZK_DEVICE_CB_t"
                           A  2598    
                           A  2599    .TYPE 40
                           A  2600    
                           A  2601    .ENDEF
                           A  2602    
                           A  2603    .DEFINE "stdout"
                           A  2604    
                           A  2605    .CLASS 65
                           A  2606    
                           A  2607    .VALUE 12
                           A  2608    
                           A  2609    .TAG "RZK_DEVICE_CB_t"
                           A  2610    
                           A  2611    .TYPE 40
                           A  2612    
                           A  2613    .ENDEF
                           A  2614    
                           A  2615    .DEFINE "stderr"
                           A  2616    
                           A  2617    .CLASS 65
                           A  2618    
                           A  2619    .VALUE 15
                           A  2620    
                           A  2621    .TAG "RZK_DEVICE_CB_t"
                           A  2622    
                           A  2623    .TYPE 40
                           A  2624    
                           A  2625    .ENDEF
                           A  2626    
                           A  2627    .DEFINE "nargs"
                           A  2628    
                           A  2629    .CLASS 65
                           A  2630    
                           A  2631    .VALUE 18
                           A  2632    
                           A  2633    .TYPE 13
                           A  2634    
                           A  2635    .ENDEF
                           A  2636    
                           A  2637    .DEFINE "argv"
                           A  2638    
                           A  2639    .CLASS 65
                           A  2640    
                           A  2641    .VALUE 21
                           A  2642    
                           A  2643    .TYPE 290
                           A  2644    
                           A  2645    .ENDEF
                           A  2646    
00048F DDE5                A  2647    	PUSH	IX
000491 DD210000 00         A  2648    	LD	IX,0
000496 DD39                A  2649    	ADD	IX,SP
                           A  2650    ;  270		return( ShellDeleteDir( nargs, argv, ZFS_TRUE,stdout ) );
                           A  2651    .LINE 270
                           A  2652    
000498 DD070C              A  2653    	LD	BC,(IX+%C)
00049B C5                  A  2654    	PUSH	BC
00049C 01010000            A  2655    	LD	BC,1
0004A0 C5                  A  2656    	PUSH	BC
0004A1 DD0715              A  2657    	LD	BC,(IX+%15)
0004A4 C5                  A  2658    	PUSH	BC
0004A5 DD0712              A  2659    	LD	BC,(IX+%12)
0004A8 C5                  A  2660    	PUSH	BC
0004A9 CD 0E 04 00         A  2661    	CALL	_ShellDeleteDir
0004AD C1                  A  2662    	POP	BC
0004AE C1                  A  2663    	POP	BC
0004AF C1                  A  2664    	POP	BC
0004B0 C1                  A  2665    	POP	BC
                           A  2666    ;  271	}
                           A  2667    .LINE 271
                           A  2668    
0004B1 DDF9                A  2669    	LD	SP,IX
0004B3 DDE1                A  2670    	POP	IX
0004B5 C9                  A  2671    	RET	
                           A  2672    
                           A  2673    
                           A  2674    ;**************************** _Shell_ZFSDelDirAll ***************************
                           A  2675    ;Name                         Addr/Register   Size   Type
                           A  2676    ;argv                                 IX+21      3   parameter
                           A  2677    ;nargs                                IX+18      2   parameter
                           A  2678    ;stderr                               IX+15      3   parameter
                           A  2679    ;stdout                               IX+12      3   parameter
                           A  2680    ;stdin                                 IX+9      3   parameter
                           A  2681    ;Shl                                   IX+6      3   parameter
                           A  2682    
                           A  2683    
                           A  2684    ; Stack Frame Size: 24 (bytes)
                           A  2685    ;       Spill Code: 0 (instruction)
                           A  2686    
                           A  2687    
                           A  2688    .ENDFUNC "Shell_ZFSDelDirAll",271,"_Shell_ZFSDelDirAll"
                           A  2689    ;  272	
                           A  2690    ;  273	/* The following function is used to delete  
                           A  2691    ;  274	   the entire directory along with files/subdirectories */
                           A  2692    ;  275	INT16 Shell_ZFSDelDir(
                           A  2693    ;  276		struct shvars *			Shl,
                           A  2694    ;  277		RZK_DEVICE_CB_t *						stdin,
                           A  2695    ;  278		RZK_DEVICE_CB_t *						stdout, 
                           A  2696    ;  279		RZK_DEVICE_CB_t *						stderr, 
                           A  2697    ;  280		UINT16					nargs,
                           A  2698    ;  281		INT8					*argv[]
                           A  2699    ;  282	)
                           A  2700    ;  283	{
0004B6                     A  2701    _Shell_ZFSDelDir:
                           A  2702    .DEFINE "_Shell_ZFSDelDir"
                           A  2703    
                           A  2704    .VALUE _Shell_ZFSDelDir
                           A  2705    
                           A  2706    .CLASS 2
                           A  2707    
                           A  2708    .TYPE 67
                           A  2709    
                           A  2710    .ENDEF
                           A  2711    
                           A  2712    .BEGFUNC "Shell_ZFSDelDir",283,"_Shell_ZFSDelDir"
                           A  2713    
                           A  2714    .LINE 283
                           A  2715    
                           A  2716    .DEFINE "Shl"
                           A  2717    
                           A  2718    .CLASS 65
                           A  2719    
                           A  2720    .VALUE 6
                           A  2721    
                           A  2722    .TAG "shvars"
                           A  2723    
                           A  2724    .TYPE 40
                           A  2725    
                           A  2726    .ENDEF
                           A  2727    
                           A  2728    .DEFINE "stdin"
                           A  2729    
                           A  2730    .CLASS 65
                           A  2731    
                           A  2732    .VALUE 9
                           A  2733    
                           A  2734    .TAG "RZK_DEVICE_CB_t"
                           A  2735    
                           A  2736    .TYPE 40
                           A  2737    
                           A  2738    .ENDEF
                           A  2739    
                           A  2740    .DEFINE "stdout"
                           A  2741    
                           A  2742    .CLASS 65
                           A  2743    
                           A  2744    .VALUE 12
                           A  2745    
                           A  2746    .TAG "RZK_DEVICE_CB_t"
                           A  2747    
                           A  2748    .TYPE 40
                           A  2749    
                           A  2750    .ENDEF
                           A  2751    
                           A  2752    .DEFINE "stderr"
                           A  2753    
                           A  2754    .CLASS 65
                           A  2755    
                           A  2756    .VALUE 15
                           A  2757    
                           A  2758    .TAG "RZK_DEVICE_CB_t"
                           A  2759    
                           A  2760    .TYPE 40
                           A  2761    
                           A  2762    .ENDEF
                           A  2763    
                           A  2764    .DEFINE "nargs"
                           A  2765    
                           A  2766    .CLASS 65
                           A  2767    
                           A  2768    .VALUE 18
                           A  2769    
                           A  2770    .TYPE 13
                           A  2771    
                           A  2772    .ENDEF
                           A  2773    
                           A  2774    .DEFINE "argv"
                           A  2775    
                           A  2776    .CLASS 65
                           A  2777    
                           A  2778    .VALUE 21
                           A  2779    
                           A  2780    .TYPE 290
                           A  2781    
                           A  2782    .ENDEF
                           A  2783    
0004B6 DDE5                A  2784    	PUSH	IX
0004B8 DD210000 00         A  2785    	LD	IX,0
0004BD DD39                A  2786    	ADD	IX,SP
                           A  2787    ;  284		return( ShellDeleteDir( nargs, argv, ZFS_FALSE, stdout) );	
                           A  2788    .LINE 284
                           A  2789    
0004BF DD070C              A  2790    	LD	BC,(IX+%C)
0004C2 C5                  A  2791    	PUSH	BC
0004C3 01000000            A  2792    	LD	BC,0
0004C7 C5                  A  2793    	PUSH	BC
0004C8 DD0715              A  2794    	LD	BC,(IX+%15)
0004CB C5                  A  2795    	PUSH	BC
0004CC DD0712              A  2796    	LD	BC,(IX+%12)
0004CF C5                  A  2797    	PUSH	BC
0004D0 CD 0E 04 00         A  2798    	CALL	_ShellDeleteDir
0004D4 C1                  A  2799    	POP	BC
0004D5 C1                  A  2800    	POP	BC
0004D6 C1                  A  2801    	POP	BC
0004D7 C1                  A  2802    	POP	BC
                           A  2803    ;  285	}
                           A  2804    .LINE 285
                           A  2805    
0004D8 DDF9                A  2806    	LD	SP,IX
0004DA DDE1                A  2807    	POP	IX
0004DC C9                  A  2808    	RET	
                           A  2809    
                           A  2810    
                           A  2811    ;**************************** _Shell_ZFSDelDir ***************************
                           A  2812    ;Name                         Addr/Register   Size   Type
                           A  2813    ;argv                                 IX+21      3   parameter
                           A  2814    ;nargs                                IX+18      2   parameter
                           A  2815    ;stderr                               IX+15      3   parameter
                           A  2816    ;stdout                               IX+12      3   parameter
                           A  2817    ;stdin                                 IX+9      3   parameter
                           A  2818    ;Shl                                   IX+6      3   parameter
                           A  2819    
                           A  2820    
                           A  2821    ; Stack Frame Size: 24 (bytes)
                           A  2822    ;       Spill Code: 0 (instruction)
                           A  2823    
                           A  2824    
                           A  2825    .ENDFUNC "Shell_ZFSDelDir",285,"_Shell_ZFSDelDir"
                           A  2826    ;  286	
                           A  2827    ;  287	/* The following function is used to rename a file
                           A  2828    ;  288	   specified by the user */
                           A  2829    ;  289	INT16 Shell_ZFSRenFile (
                           A  2830    ;  290		struct shvars *			Shl,
                           A  2831    ;  291		RZK_DEVICE_CB_t *						stdin,
                           A  2832    ;  292		RZK_DEVICE_CB_t *						stdout, 
                           A  2833    ;  293		RZK_DEVICE_CB_t *						stderr, 
                           A  2834    ;  294		UINT16					nargs,
                           A  2835    ;  295		INT8					*argv[]
                           A  2836    ;  296	)
                           A  2837    ;  297	{
0004DD                     A  2838    _Shell_ZFSRenFile:
                           A  2839    .DEFINE "_Shell_ZFSRenFile"
                           A  2840    
                           A  2841    .VALUE _Shell_ZFSRenFile
                           A  2842    
                           A  2843    .CLASS 2
                           A  2844    
                           A  2845    .TYPE 67
                           A  2846    
                           A  2847    .ENDEF
                           A  2848    
                           A  2849    .BEGFUNC "Shell_ZFSRenFile",297,"_Shell_ZFSRenFile"
                           A  2850    
                           A  2851    .LINE 297
                           A  2852    
                           A  2853    .DEFINE "Shl"
                           A  2854    
                           A  2855    .CLASS 65
                           A  2856    
                           A  2857    .VALUE 6
                           A  2858    
                           A  2859    .TAG "shvars"
                           A  2860    
                           A  2861    .TYPE 40
                           A  2862    
                           A  2863    .ENDEF
                           A  2864    
                           A  2865    .DEFINE "stdin"
                           A  2866    
                           A  2867    .CLASS 65
                           A  2868    
                           A  2869    .VALUE 9
                           A  2870    
                           A  2871    .TAG "RZK_DEVICE_CB_t"
                           A  2872    
                           A  2873    .TYPE 40
                           A  2874    
                           A  2875    .ENDEF
                           A  2876    
                           A  2877    .DEFINE "stdout"
                           A  2878    
                           A  2879    .CLASS 65
                           A  2880    
                           A  2881    .VALUE 12
                           A  2882    
                           A  2883    .TAG "RZK_DEVICE_CB_t"
                           A  2884    
                           A  2885    .TYPE 40
                           A  2886    
                           A  2887    .ENDEF
                           A  2888    
                           A  2889    .DEFINE "stderr"
                           A  2890    
                           A  2891    .CLASS 65
                           A  2892    
                           A  2893    .VALUE 15
                           A  2894    
                           A  2895    .TAG "RZK_DEVICE_CB_t"
                           A  2896    
                           A  2897    .TYPE 40
                           A  2898    
                           A  2899    .ENDEF
                           A  2900    
                           A  2901    .DEFINE "nargs"
                           A  2902    
                           A  2903    .CLASS 65
                           A  2904    
                           A  2905    .VALUE 18
                           A  2906    
                           A  2907    .TYPE 13
                           A  2908    
                           A  2909    .ENDEF
                           A  2910    
                           A  2911    .DEFINE "argv"
                           A  2912    
                           A  2913    .CLASS 65
                           A  2914    
                           A  2915    .VALUE 21
                           A  2916    
                           A  2917    .TYPE 290
                           A  2918    
                           A  2919    .ENDEF
                           A  2920    
                           A  2921    .DEFINE "status"
                           A  2922    
                           A  2923    .CLASS 65
                           A  2924    
                           A  2925    .VALUE -3
                           A  2926    
                           A  2927    .TYPE 4
                           A  2928    
                           A  2929    .ENDEF
                           A  2930    
0004DD DDE5                A  2931    	PUSH	IX
0004DF DD210000 00         A  2932    	LD	IX,0
0004E4 DD39                A  2933    	ADD	IX,SP
0004E6 C5                  A  2934    	PUSH	BC
                           A  2935    ;  298		ZFS_STATUS_t status ;
                           A  2936    ;  299	
                           A  2937    ;  300		/** Validate the number of arguments */
                           A  2938    ;  301		if( nargs != 3 )
                           A  2939    .LINE 301
                           A  2940    
0004E7 49010300            A  2941    	LD.LIS	BC,3
0004EB DD2712              A  2942    	LD	HL,(IX+%12)
0004EE B7                  A  2943    	OR	A,A
0004EF 40ED42              A  2944    	SBC.SIS	HL,BC
0004F2 28 1A               A  2945    	JR	Z,L_62
                           A  2946    ;  302		{
                           A  2947    ;  303			printf("\nThe syntax of the command is incorrect\n");
                           A  2948    .LINE 303
                           A  2949    
0004F4 01 17 03 00         A  2950    	LD	BC,L__54
0004F8 C5                  A  2951    	PUSH	BC
0004F9 CD 00 00 00         A  2952    	CALL	_printf
0004FD C1                  A  2953    	POP	BC
                           A  2954    ;  304			printf("ren <file Name1> <fileName2>\n");
                           A  2955    .LINE 304
                           A  2956    
0004FE 01 40 03 00         A  2957    	LD	BC,L__55
000502 C5                  A  2958    	PUSH	BC
000503 CD 00 00 00         A  2959    	CALL	_printf
000507 C1                  A  2960    	POP	BC
                           A  2961    ;  305			return ZSHELL_FAILURE ;
                           A  2962    .LINE 305
                           A  2963    
000508 4921FFFF            A  2964    	LD.LIS	HL,-1
00050C 18 75               A  2965    	JR	L_67
                           A  2966    ;  306		}
00050E                     A  2967    L_62:
                           A  2968    .LINE 306
                           A  2969    
                           A  2970    ;  307		status = ZFSRename(argv[1], argv[2]);
                           A  2971    .LINE 307
                           A  2972    
00050E DD3115              A  2973    	LD	IY,(IX+%15)
000511 ED2306              A  2974    	LEA	HL,IY+%6
000514 ED07                A  2975    	LD	BC,(HL)
000516 C5                  A  2976    	PUSH	BC
000517 ED2303              A  2977    	LEA	HL,IY+%3
00051A ED07                A  2978    	LD	BC,(HL)
00051C C5                  A  2979    	PUSH	BC
00051D CD 00 00 00         A  2980    	CALL	_ZFSRename
000521 C1                  A  2981    	POP	BC
000522 C1                  A  2982    	POP	BC
000523 DD2FFD              A  2983    	LD	(IX+%FFFFFFFD),HL
                           A  2984    ;  308		if( status == ZFSERR_FILE_DIR_DOES_NOT_EXIST )
                           A  2985    .LINE 308
                           A  2986    
000526 01F3FFFF            A  2987    	LD	BC,16777203
00052A DD27FD              A  2988    	LD	HL,(IX+%FFFFFFFD)
00052D B7                  A  2989    	OR	A,A
00052E ED42                A  2990    	SBC	HL,BC
000530 20 10               A  2991    	JR	NZ,L_65
                           A  2992    ;  309		{
                           A  2993    ;  310			printf("\nThe specified file does not exist\n");
                           A  2994    .LINE 310
                           A  2995    
000532 01 5E 03 00         A  2996    	LD	BC,L__57
000536 C5                  A  2997    	PUSH	BC
000537 CD 00 00 00         A  2998    	CALL	_printf
00053B C1                  A  2999    	POP	BC
                           A  3000    ;  311			return ZSHELL_FAILURE;
                           A  3001    .LINE 311
                           A  3002    
00053C 4921FFFF            A  3003    	LD.LIS	HL,-1
000540 18 41               A  3004    	JR	L_67
                           A  3005    ;  312		}
                           A  3006    ;  313		else if( status != ZFSERR_SUCCESS )
000542                     A  3007    L_65:
                           A  3008    .LINE 313
                           A  3009    
000542 DD27FD              A  3010    	LD	HL,(IX+%FFFFFFFD)
000545 CD 00 00 00         A  3011    	CALL	__icmpzero
000549 28 1A               A  3012    	JR	Z,L_66
                           A  3013    ;  314		{
                           A  3014    ;  315			printf("\nUnable to rename the file %s or accessing an invalid volume\n", argv[1] );
                           A  3015    .LINE 315
                           A  3016    
00054B DD3115              A  3017    	LD	IY,(IX+%15)
00054E ED2303              A  3018    	LEA	HL,IY+%3
000551 ED07                A  3019    	LD	BC,(HL)
000553 C5                  A  3020    	PUSH	BC
000554 01 82 03 00         A  3021    	LD	BC,L__59
000558 C5                  A  3022    	PUSH	BC
000559 CD 00 00 00         A  3023    	CALL	_printf
00055D C1                  A  3024    	POP	BC
00055E C1                  A  3025    	POP	BC
                           A  3026    ;  316			return ZSHELL_FAILURE ;
                           A  3027    .LINE 316
                           A  3028    
00055F 4921FFFF            A  3029    	LD.LIS	HL,-1
000563 18 1E               A  3030    	JR	L_67
                           A  3031    ;  317		}	
000565                     A  3032    L_66:
                           A  3033    .LINE 317
                           A  3034    
                           A  3035    ;  318		printf("\nFile %s is renamed as %s\n", argv[1], argv[2]);
                           A  3036    .LINE 318
                           A  3037    
000565 DD3115              A  3038    	LD	IY,(IX+%15)
000568 ED2306              A  3039    	LEA	HL,IY+%6
00056B ED07                A  3040    	LD	BC,(HL)
00056D C5                  A  3041    	PUSH	BC
00056E ED2303              A  3042    	LEA	HL,IY+%3
000571 ED07                A  3043    	LD	BC,(HL)
000573 C5                  A  3044    	PUSH	BC
000574 01 C0 03 00         A  3045    	LD	BC,L__60
000578 C5                  A  3046    	PUSH	BC
000579 CD 00 00 00         A  3047    	CALL	_printf
00057D C1                  A  3048    	POP	BC
00057E C1                  A  3049    	POP	BC
00057F C1                  A  3050    	POP	BC
                           A  3051    ;  319		return ZSHELL_SUCCESS;
                           A  3052    .LINE 319
                           A  3053    
000580 B7                  A  3054    	OR	A,A
000581 ED62                A  3055    	SBC	HL,HL
                           A  3056    ;  320	}
000583                     A  3057    L_67:
                           A  3058    .LINE 320
                           A  3059    
000583 DDF9                A  3060    	LD	SP,IX
000585 DDE1                A  3061    	POP	IX
000587 C9                  A  3062    	RET	
                           A  3063    
                           A  3064    
                           A  3065    ;**************************** _Shell_ZFSRenFile ***************************
                           A  3066    ;Name                         Addr/Register   Size   Type
                           A  3067    ;_ZFSRename                          IMPORT  -----   function
                           A  3068    ;_printf                             IMPORT  -----   function
                           A  3069    ;status                                IX-3      3   variable
                           A  3070    ;argv                                 IX+21      3   parameter
                           A  3071    ;nargs                                IX+18      2   parameter
                           A  3072    ;stderr                               IX+15      3   parameter
                           A  3073    ;stdout                               IX+12      3   parameter
                           A  3074    ;stdin                                 IX+9      3   parameter
                           A  3075    ;Shl                                   IX+6      3   parameter
                           A  3076    
                           A  3077    
                           A  3078    ; Stack Frame Size: 27 (bytes)
                           A  3079    ;       Spill Code: 0 (instruction)
                           A  3080    
                           A  3081    
                           A  3082    .ENDFUNC "Shell_ZFSRenFile",320,"_Shell_ZFSRenFile"
                           A  3083    	SEGMENT STRSECT
000317                     A  3084    L__54:
000317 0A                  A  3085    	DB	10
000318 54686520 73796E74   A  3086    	DB	"The syntax of the command is incorrect"
000320 6178206F 66207468 
000328 6520636F 6D6D616E 
000330 64206973 20696E63 
000338 6F727265 6374 
00033E 0A00                A  3087    	DB	10,0
000340                     A  3088    L__55:
000340 72656E20 3C66696C   A  3089    	DB	"ren <file Name1> <fileName2>"
000348 65204E61 6D65313E 
000350 203C6669 6C654E61 
000358 6D65323E 
00035C 0A00                A  3090    	DB	10,0
00035E                     A  3091    L__57:
00035E 0A                  A  3092    	DB	10
00035F 54686520 73706563   A  3093    	DB	"The specified file does not exist"
000367 69666965 64206669 
00036F 6C652064 6F657320 
000377 6E6F7420 65786973 
00037F 74 
000380 0A00                A  3094    	DB	10,0
000382                     A  3095    L__59:
000382 0A                  A  3096    	DB	10
000383 556E6162 6C652074   A  3097    	DB	"Unable to rename the file %s or accessing an invalid volume"
00038B 6F207265 6E616D65 
000393 20746865 2066696C 
00039B 65202573 206F7220 
0003A3 61636365 7373696E 
0003AB 6720616E 20696E76 
0003B3 616C6964 20766F6C 
0003BB 756D65 
0003BE 0A00                A  3098    	DB	10,0
0003C0                     A  3099    L__60:
0003C0 0A                  A  3100    	DB	10
0003C1 46696C65 20257320   A  3101    	DB	"File %s is renamed as %s"
0003C9 69732072 656E616D 
0003D1 65642061 73202573 
0003D9 0A00                A  3102    	DB	10,0
                           A  3103    	SEGMENT CODE
                           A  3104    ;  321	
                           A  3105    ;  322	/* The following function is used to rename a directory
                           A  3106    ;  323	   specified by the user */
                           A  3107    ;  324	INT16 Shell_ZFSRenDir (
                           A  3108    ;  325		struct shvars *			Shl,
                           A  3109    ;  326		RZK_DEVICE_CB_t *						stdin,
                           A  3110    ;  327		RZK_DEVICE_CB_t *						stdout, 
                           A  3111    ;  328		RZK_DEVICE_CB_t *						stderr, 
                           A  3112    ;  329		UINT16					nargs,
                           A  3113    ;  330		INT8					*argv[]
                           A  3114    ;  331	)
                           A  3115    ;  332	{
000588                     A  3116    _Shell_ZFSRenDir:
                           A  3117    .DEFINE "_Shell_ZFSRenDir"
                           A  3118    
                           A  3119    .VALUE _Shell_ZFSRenDir
                           A  3120    
                           A  3121    .CLASS 2
                           A  3122    
                           A  3123    .TYPE 67
                           A  3124    
                           A  3125    .ENDEF
                           A  3126    
                           A  3127    .BEGFUNC "Shell_ZFSRenDir",332,"_Shell_ZFSRenDir"
                           A  3128    
                           A  3129    .LINE 332
                           A  3130    
                           A  3131    .DEFINE "Shl"
                           A  3132    
                           A  3133    .CLASS 65
                           A  3134    
                           A  3135    .VALUE 6
                           A  3136    
                           A  3137    .TAG "shvars"
                           A  3138    
                           A  3139    .TYPE 40
                           A  3140    
                           A  3141    .ENDEF
                           A  3142    
                           A  3143    .DEFINE "stdin"
                           A  3144    
                           A  3145    .CLASS 65
                           A  3146    
                           A  3147    .VALUE 9
                           A  3148    
                           A  3149    .TAG "RZK_DEVICE_CB_t"
                           A  3150    
                           A  3151    .TYPE 40
                           A  3152    
                           A  3153    .ENDEF
                           A  3154    
                           A  3155    .DEFINE "stdout"
                           A  3156    
                           A  3157    .CLASS 65
                           A  3158    
                           A  3159    .VALUE 12
                           A  3160    
                           A  3161    .TAG "RZK_DEVICE_CB_t"
                           A  3162    
                           A  3163    .TYPE 40
                           A  3164    
                           A  3165    .ENDEF
                           A  3166    
                           A  3167    .DEFINE "stderr"
                           A  3168    
                           A  3169    .CLASS 65
                           A  3170    
                           A  3171    .VALUE 15
                           A  3172    
                           A  3173    .TAG "RZK_DEVICE_CB_t"
                           A  3174    
                           A  3175    .TYPE 40
                           A  3176    
                           A  3177    .ENDEF
                           A  3178    
                           A  3179    .DEFINE "nargs"
                           A  3180    
                           A  3181    .CLASS 65
                           A  3182    
                           A  3183    .VALUE 18
                           A  3184    
                           A  3185    .TYPE 13
                           A  3186    
                           A  3187    .ENDEF
                           A  3188    
                           A  3189    .DEFINE "argv"
                           A  3190    
                           A  3191    .CLASS 65
                           A  3192    
                           A  3193    .VALUE 21
                           A  3194    
                           A  3195    .TYPE 290
                           A  3196    
                           A  3197    .ENDEF
                           A  3198    
                           A  3199    .DEFINE "status"
                           A  3200    
                           A  3201    .CLASS 65
                           A  3202    
                           A  3203    .VALUE -3
                           A  3204    
                           A  3205    .TYPE 4
                           A  3206    
                           A  3207    .ENDEF
                           A  3208    
000588 DDE5                A  3209    	PUSH	IX
00058A DD210000 00         A  3210    	LD	IX,0
00058F DD39                A  3211    	ADD	IX,SP
000591 C5                  A  3212    	PUSH	BC
                           A  3213    ;  333		ZFS_STATUS_t status ;
                           A  3214    ;  334	
                           A  3215    ;  335		/** Validate the number of arguments */
                           A  3216    ;  336		if( nargs != 3 )
                           A  3217    .LINE 336
                           A  3218    
000592 49010300            A  3219    	LD.LIS	BC,3
000596 DD2712              A  3220    	LD	HL,(IX+%12)
000599 B7                  A  3221    	OR	A,A
00059A 40ED42              A  3222    	SBC.SIS	HL,BC
00059D 28 1A               A  3223    	JR	Z,L_69
                           A  3224    ;  337		{
                           A  3225    ;  338			printf("\nThe syntax of the command is incorrect\n");
                           A  3226    .LINE 338
                           A  3227    
00059F 01 DB 03 00         A  3228    	LD	BC,L__63
0005A3 C5                  A  3229    	PUSH	BC
0005A4 CD 00 00 00         A  3230    	CALL	_printf
0005A8 C1                  A  3231    	POP	BC
                           A  3232    ;  339			printf("rendir <directory Name1> <directory Name2>\n");
                           A  3233    .LINE 339
                           A  3234    
0005A9 01 04 04 00         A  3235    	LD	BC,L__64
0005AD C5                  A  3236    	PUSH	BC
0005AE CD 00 00 00         A  3237    	CALL	_printf
0005B2 C1                  A  3238    	POP	BC
                           A  3239    ;  340			return ZSHELL_FAILURE ;
                           A  3240    .LINE 340
                           A  3241    
0005B3 4921FFFF            A  3242    	LD.LIS	HL,-1
0005B7 18 6B               A  3243    	JR	L_74
                           A  3244    ;  341		}
0005B9                     A  3245    L_69:
                           A  3246    .LINE 341
                           A  3247    
                           A  3248    ;  342		status = ZFSRenameDir( argv[1], argv[2] );
                           A  3249    .LINE 342
                           A  3250    
0005B9 DD3115              A  3251    	LD	IY,(IX+%15)
0005BC ED2306              A  3252    	LEA	HL,IY+%6
0005BF ED07                A  3253    	LD	BC,(HL)
0005C1 C5                  A  3254    	PUSH	BC
0005C2 ED2303              A  3255    	LEA	HL,IY+%3
0005C5 ED07                A  3256    	LD	BC,(HL)
0005C7 C5                  A  3257    	PUSH	BC
0005C8 CD 00 00 00         A  3258    	CALL	_ZFSRenameDir
0005CC C1                  A  3259    	POP	BC
0005CD C1                  A  3260    	POP	BC
0005CE DD2FFD              A  3261    	LD	(IX+%FFFFFFFD),HL
                           A  3262    ;  343		if( status == ZFSERR_FILE_DIR_DOES_NOT_EXIST )
                           A  3263    .LINE 343
                           A  3264    
0005D1 01F3FFFF            A  3265    	LD	BC,16777203
0005D5 DD27FD              A  3266    	LD	HL,(IX+%FFFFFFFD)
0005D8 B7                  A  3267    	OR	A,A
0005D9 ED42                A  3268    	SBC	HL,BC
0005DB 20 10               A  3269    	JR	NZ,L_72
                           A  3270    ;  344		{
                           A  3271    ;  345			printf("\nThe specified directory does not exist\n");
                           A  3272    .LINE 345
                           A  3273    
0005DD 01 30 04 00         A  3274    	LD	BC,L__66
0005E1 C5                  A  3275    	PUSH	BC
0005E2 CD 00 00 00         A  3276    	CALL	_printf
0005E6 C1                  A  3277    	POP	BC
                           A  3278    ;  346			return ZSHELL_FAILURE;
                           A  3279    .LINE 346
                           A  3280    
0005E7 4921FFFF            A  3281    	LD.LIS	HL,-1
0005EB 18 37               A  3282    	JR	L_74
                           A  3283    ;  347		}
                           A  3284    ;  348		else if( status != ZFSERR_SUCCESS )
0005ED                     A  3285    L_72:
                           A  3286    .LINE 348
                           A  3287    
0005ED DD27FD              A  3288    	LD	HL,(IX+%FFFFFFFD)
0005F0 CD 00 00 00         A  3289    	CALL	__icmpzero
0005F4 28 10               A  3290    	JR	Z,L_73
                           A  3291    ;  349		{
                           A  3292    ;  350			printf("\nUnable to rename the directory or accessing an invalid volume\n" );
                           A  3293    .LINE 350
                           A  3294    
0005F6 01 59 04 00         A  3295    	LD	BC,L__68
0005FA C5                  A  3296    	PUSH	BC
0005FB CD 00 00 00         A  3297    	CALL	_printf
0005FF C1                  A  3298    	POP	BC
                           A  3299    ;  351			return ZSHELL_FAILURE ;
                           A  3300    .LINE 351
                           A  3301    
000600 4921FFFF            A  3302    	LD.LIS	HL,-1
000604 18 1E               A  3303    	JR	L_74
                           A  3304    ;  352		}
000606                     A  3305    L_73:
                           A  3306    .LINE 352
                           A  3307    
                           A  3308    ;  353		printf("\nDirectory %s is renamed as %s\n", argv[1], argv[2]);
                           A  3309    .LINE 353
                           A  3310    
000606 DD3115              A  3311    	LD	IY,(IX+%15)
000609 ED2306              A  3312    	LEA	HL,IY+%6
00060C ED07                A  3313    	LD	BC,(HL)
00060E C5                  A  3314    	PUSH	BC
00060F ED2303              A  3315    	LEA	HL,IY+%3
000612 ED07                A  3316    	LD	BC,(HL)
000614 C5                  A  3317    	PUSH	BC
000615 01 99 04 00         A  3318    	LD	BC,L__69
000619 C5                  A  3319    	PUSH	BC
00061A CD 00 00 00         A  3320    	CALL	_printf
00061E C1                  A  3321    	POP	BC
00061F C1                  A  3322    	POP	BC
000620 C1                  A  3323    	POP	BC
                           A  3324    ;  354		return ZSHELL_SUCCESS;
                           A  3325    .LINE 354
                           A  3326    
000621 B7                  A  3327    	OR	A,A
000622 ED62                A  3328    	SBC	HL,HL
                           A  3329    ;  355	}
000624                     A  3330    L_74:
                           A  3331    .LINE 355
                           A  3332    
000624 DDF9                A  3333    	LD	SP,IX
000626 DDE1                A  3334    	POP	IX
000628 C9                  A  3335    	RET	
                           A  3336    
                           A  3337    
                           A  3338    ;**************************** _Shell_ZFSRenDir ***************************
                           A  3339    ;Name                         Addr/Register   Size   Type
                           A  3340    ;_ZFSRenameDir                       IMPORT  -----   function
                           A  3341    ;_printf                             IMPORT  -----   function
                           A  3342    ;status                                IX-3      3   variable
                           A  3343    ;argv                                 IX+21      3   parameter
                           A  3344    ;nargs                                IX+18      2   parameter
                           A  3345    ;stderr                               IX+15      3   parameter
                           A  3346    ;stdout                               IX+12      3   parameter
                           A  3347    ;stdin                                 IX+9      3   parameter
                           A  3348    ;Shl                                   IX+6      3   parameter
                           A  3349    
                           A  3350    
                           A  3351    ; Stack Frame Size: 27 (bytes)
                           A  3352    ;       Spill Code: 0 (instruction)
                           A  3353    
                           A  3354    
                           A  3355    .ENDFUNC "Shell_ZFSRenDir",355,"_Shell_ZFSRenDir"
                           A  3356    	SEGMENT STRSECT
0003DB                     A  3357    L__63:
0003DB 0A                  A  3358    	DB	10
0003DC 54686520 73796E74   A  3359    	DB	"The syntax of the command is incorrect"
0003E4 6178206F 66207468 
0003EC 6520636F 6D6D616E 
0003F4 64206973 20696E63 
0003FC 6F727265 6374 
000402 0A00                A  3360    	DB	10,0
000404                     A  3361    L__64:
000404 72656E64 6972203C   A  3362    	DB	"rendir <directory Name1> <directory Name2>"
00040C 64697265 63746F72 
000414 79204E61 6D65313E 
00041C 203C6469 72656374 
000424 6F727920 4E616D65 
00042C 323E 
00042E 0A00                A  3363    	DB	10,0
000430                     A  3364    L__66:
000430 0A                  A  3365    	DB	10
000431 54686520 73706563   A  3366    	DB	"The specified directory does not exist"
000439 69666965 64206469 
000441 72656374 6F727920 
000449 646F6573 206E6F74 
000451 20657869 7374 
000457 0A00                A  3367    	DB	10,0
000459                     A  3368    L__68:
000459 0A                  A  3369    	DB	10
00045A 556E6162 6C652074   A  3370    	DB	"Unable to rename the directory or accessing an invalid volume"
000462 6F207265 6E616D65 
00046A 20746865 20646972 
000472 6563746F 7279206F 
00047A 72206163 63657373 
000482 696E6720 616E2069 
00048A 6E76616C 69642076 
000492 6F6C756D 65 
000497 0A00                A  3371    	DB	10,0
000499                     A  3372    L__69:
000499 0A                  A  3373    	DB	10
00049A 44697265 63746F72   A  3374    	DB	"Directory %s is renamed as %s"
0004A2 79202573 20697320 
0004AA 72656E61 6D656420 
0004B2 61732025 73 
0004B7 0A00                A  3375    	DB	10,0
                           A  3376    	SEGMENT CODE
                           A  3377    ;  356	
                           A  3378    ;  357	/** This function separates the directory Name and the
                           A  3379    ;  358	    file Name and gets the size of the file */
                           A  3380    ;  359	INT16 Shell_ZFSGetList(	INT8	 *fileName, 
                           A  3381    ;  360								INT8     *argv[], 
                           A  3382    ;  361								UINT32   *size,
                           A  3383    ;  362								RZK_DEVICE_CB_t *		  stdout
                           A  3384    ;  363							 )
                           A  3385    ;  364	{
000629                     A  3386    _Shell_ZFSGetList:
                           A  3387    .DEFINE "_Shell_ZFSGetList"
                           A  3388    
                           A  3389    .VALUE _Shell_ZFSGetList
                           A  3390    
                           A  3391    .CLASS 2
                           A  3392    
                           A  3393    .TYPE 67
                           A  3394    
                           A  3395    .ENDEF
                           A  3396    
                           A  3397    .BEGFUNC "Shell_ZFSGetList",364,"_Shell_ZFSGetList"
                           A  3398    
                           A  3399    .LINE 364
                           A  3400    
                           A  3401    .DEFINE "fileName"
                           A  3402    
                           A  3403    .CLASS 65
                           A  3404    
                           A  3405    .VALUE 6
                           A  3406    
                           A  3407    .TYPE 34
                           A  3408    
                           A  3409    .ENDEF
                           A  3410    
                           A  3411    .DEFINE "argv"
                           A  3412    
                           A  3413    .CLASS 65
                           A  3414    
                           A  3415    .VALUE 9
                           A  3416    
                           A  3417    .TYPE 290
                           A  3418    
                           A  3419    .ENDEF
                           A  3420    
                           A  3421    .DEFINE "size"
                           A  3422    
                           A  3423    .CLASS 65
                           A  3424    
                           A  3425    .VALUE 12
                           A  3426    
                           A  3427    .TYPE 47
                           A  3428    
                           A  3429    .ENDEF
                           A  3430    
                           A  3431    .DEFINE "stdout"
                           A  3432    
                           A  3433    .CLASS 65
                           A  3434    
                           A  3435    .VALUE 15
                           A  3436    
                           A  3437    .TAG "RZK_DEVICE_CB_t"
                           A  3438    
                           A  3439    .TYPE 40
                           A  3440    
                           A  3441    .ENDEF
                           A  3442    
                           A  3443    .DEFINE "pfs_fd_list"
                           A  3444    
                           A  3445    .CLASS 65
                           A  3446    
                           A  3447    .VALUE -3
                           A  3448    
                           A  3449    .TAG "NONAME3"
                           A  3450    
                           A  3451    .TYPE 40
                           A  3452    
                           A  3453    .ENDEF
                           A  3454    
                           A  3455    .DEFINE "pathName"
                           A  3456    
                           A  3457    .CLASS 65
                           A  3458    
                           A  3459    .VALUE -6
                           A  3460    
                           A  3461    .TYPE 34
                           A  3462    
                           A  3463    .ENDEF
                           A  3464    
                           A  3465    .DEFINE "fd_cnt"
                           A  3466    
                           A  3467    .CLASS 65
                           A  3468    
                           A  3469    .VALUE -8
                           A  3470    
                           A  3471    .TYPE 3
                           A  3472    
                           A  3473    .ENDEF
                           A  3474    
                           A  3475    .DEFINE "ptmp_fs_fd_list"
                           A  3476    
                           A  3477    .CLASS 65
                           A  3478    
                           A  3479    .VALUE -11
                           A  3480    
                           A  3481    .TAG "NONAME3"
                           A  3482    
                           A  3483    .TYPE 40
                           A  3484    
                           A  3485    .ENDEF
                           A  3486    
                           A  3487    .DEFINE "filecnt"
                           A  3488    
                           A  3489    .CLASS 65
                           A  3490    
                           A  3491    .VALUE -13
                           A  3492    
                           A  3493    .TYPE 3
                           A  3494    
                           A  3495    .ENDEF
                           A  3496    
                           A  3497    .DEFINE "found"
                           A  3498    
                           A  3499    .CLASS 65
                           A  3500    
                           A  3501    .VALUE -14
                           A  3502    
                           A  3503    .TYPE 12
                           A  3504    
                           A  3505    .ENDEF
                           A  3506    
                           A  3507    .DEFINE "ret_val"
                           A  3508    
                           A  3509    .CLASS 65
                           A  3510    
                           A  3511    .VALUE -16
                           A  3512    
                           A  3513    .TYPE 3
                           A  3514    
                           A  3515    .ENDEF
                           A  3516    
                           A  3517    .DEFINE "fd_total_cnt"
                           A  3518    
                           A  3519    .CLASS 65
                           A  3520    
                           A  3521    .VALUE -18
                           A  3522    
                           A  3523    .TYPE 3
                           A  3524    
                           A  3525    .ENDEF
                           A  3526    
000629 DDE5                A  3527    	PUSH	IX
00062B DD210000 00         A  3528    	LD	IX,0
000630 DD39                A  3529    	ADD	IX,SP
000632 ED22EE              A  3530    	LEA	HL,IX+%FFFFFFEE
000635 F9                  A  3531    	LD	SP,HL
                           A  3532    ;  365	
                           A  3533    ;  366		INT16			filecnt;
                           A  3534    ;  367		INT16 			fd_cnt = 0;
                           A  3535    .LINE 367
                           A  3536    
000636 DD36F800            A  3537    	LD	(IX+%FFFFFFF8),%0
00063A DD36F900            A  3538    	LD	(IX+%FFFFFFF9),%0
                           A  3539    ;  368		INT16 			fd_total_cnt = 0;
                           A  3540    .LINE 368
                           A  3541    
00063E DD36EE00            A  3542    	LD	(IX+%FFFFFFEE),%0
000642 DD36EF00            A  3543    	LD	(IX+%FFFFFFEF),%0
                           A  3544    ;  369		INT8			*pathName ;
                           A  3545    ;  370	
                           A  3546    ;  371		ZFS_FD_LIST_t 	* pfs_fd_list = ( ZFS_FD_LIST_t * ) NULL;
                           A  3547    .LINE 371
                           A  3548    
000646 01000000            A  3549    	LD	BC,0
00064A DD0FFD              A  3550    	LD	(IX+%FFFFFFFD),BC
                           A  3551    ;  372		ZFS_FD_LIST_t 	* ptmp_fs_fd_list = ( ZFS_FD_LIST_t * )NULL;
                           A  3552    ;  373	
                           A  3553    ;  374		UINT8 			found = ZSHELL_FALSE ;
                           A  3554    .LINE 374
                           A  3555    
00064D DD36F200            A  3556    	LD	(IX+%FFFFFFF2),%0
                           A  3557    ;  375		INT16 ret_val = ZSHELL_SUCCESS;
                           A  3558    .LINE 375
                           A  3559    
000651 DD36F000            A  3560    	LD	(IX+%FFFFFFF0),%0
000655 DD36F100            A  3561    	LD	(IX+%FFFFFFF1),%0
                           A  3562    ;  376	
                           A  3563    ;  377		pathName = ( INT8 * )malloc( MAX_FILE_PATH_SIZE ) ;
                           A  3564    .LINE 377
                           A  3565    
000659 01000100            A  3566    	LD	BC,256
00065D C5                  A  3567    	PUSH	BC
00065E CD 00 00 00         A  3568    	CALL	_malloc
000662 C1                  A  3569    	POP	BC
000663 DD2FFA              A  3570    	LD	(IX+%FFFFFFFA),HL
                           A  3571    ;  378		pfs_fd_list = ( ZFS_FD_LIST_t * )malloc( sizeof( ZFS_FD_LIST_t ) * 8 ) ;
                           A  3572    .LINE 378
                           A  3573    
000666 01E80000            A  3574    	LD	BC,232
00066A C5                  A  3575    	PUSH	BC
00066B CD 00 00 00         A  3576    	CALL	_malloc
00066F C1                  A  3577    	POP	BC
000670 DD2FFD              A  3578    	LD	(IX+%FFFFFFFD),HL
                           A  3579    ;  379		if( pathName == NULL || pfs_fd_list == NULL )
                           A  3580    .LINE 379
                           A  3581    
000673 DD27FA              A  3582    	LD	HL,(IX+%FFFFFFFA)
000676 CD 00 00 00         A  3583    	CALL	__icmpzero
00067A 28 09               A  3584    	JR	Z,L_77
00067C DD27FD              A  3585    	LD	HL,(IX+%FFFFFFFD)
00067F CD 00 00 00         A  3586    	CALL	__icmpzero
000683 20 0C               A  3587    	JR	NZ,L_78
000685                     A  3588    L_77:
                           A  3589    ;  380		{
                           A  3590    ;  381			ret_val = ZSHELL_FAILURE ;
                           A  3591    .LINE 381
                           A  3592    
000685 DD36F0FF            A  3593    	LD	(IX+%FFFFFFF0),%FF
000689 DD36F1FF            A  3594    	LD	(IX+%FFFFFFF1),%FF
                           A  3595    ;  382			goto end_Shell_ZFSGetList ;
                           A  3596    .LINE 382
                           A  3597    
00068D C3 A6 07 00         A  3598    	JR	L_76
                           A  3599    ;  383		}
000691                     A  3600    L_78:
                           A  3601    .LINE 383
                           A  3602    
                           A  3603    ;  384	
                           A  3604    ;  385		memset( pathName, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  3605    .LINE 385
                           A  3606    
000691 01000100            A  3607    	LD	BC,256
000695 C5                  A  3608    	PUSH	BC
000696 01000000            A  3609    	LD	BC,0
00069A C5                  A  3610    	PUSH	BC
00069B DD07FA              A  3611    	LD	BC,(IX+%FFFFFFFA)
00069E C5                  A  3612    	PUSH	BC
00069F CD 00 00 00         A  3613    	CALL	_memset
0006A3 C1                  A  3614    	POP	BC
0006A4 C1                  A  3615    	POP	BC
0006A5 C1                  A  3616    	POP	BC
                           A  3617    ;  386		memset( pfs_fd_list, 0x00, sizeof( ZFS_FD_LIST_t ) * 8 ) ;
                           A  3618    .LINE 386
                           A  3619    
0006A6 01E80000            A  3620    	LD	BC,232
0006AA C5                  A  3621    	PUSH	BC
0006AB 01000000            A  3622    	LD	BC,0
0006AF C5                  A  3623    	PUSH	BC
0006B0 DD07FD              A  3624    	LD	BC,(IX+%FFFFFFFD)
0006B3 C5                  A  3625    	PUSH	BC
0006B4 CD 00 00 00         A  3626    	CALL	_memset
0006B8 C1                  A  3627    	POP	BC
0006B9 C1                  A  3628    	POP	BC
0006BA C1                  A  3629    	POP	BC
                           A  3630    ;  387	
                           A  3631    ;  388		/** Get the directory name and the File name separately */
                           A  3632    ;  389		Shell_ZFSGetDirFileName( pathName, fileName, (INT8 **)argv );
                           A  3633    .LINE 389
                           A  3634    
0006BB DD0709              A  3635    	LD	BC,(IX+%9)
0006BE C5                  A  3636    	PUSH	BC
0006BF DD0706              A  3637    	LD	BC,(IX+%6)
0006C2 C5                  A  3638    	PUSH	BC
0006C3 DD07FA              A  3639    	LD	BC,(IX+%FFFFFFFA)
0006C6 C5                  A  3640    	PUSH	BC
0006C7 CD 00 00 00         A  3641    	CALL	_Shell_ZFSGetDirFileName
0006CB C1                  A  3642    	POP	BC
0006CC C1                  A  3643    	POP	BC
0006CD C1                  A  3644    	POP	BC
                           A  3645    ;  390	
                           A  3646    ;  391		do{
0006CE                     A  3647    L_91:
                           A  3648    .LINE 391
                           A  3649    
                           A  3650    ;  392			/** List the number of files/dirs in the folder */
                           A  3651    ;  393			fd_cnt = ZFSList( pathName, pfs_fd_list, fd_total_cnt ) ;
                           A  3652    .LINE 393
                           A  3653    
0006CE DD4EEE              A  3654    	LD	C,(IX+%FFFFFFEE)
0006D1 0600                A  3655    	LD	B,%0
0006D3 C5                  A  3656    	PUSH	BC
0006D4 DD07FD              A  3657    	LD	BC,(IX+%FFFFFFFD)
0006D7 C5                  A  3658    	PUSH	BC
0006D8 DD07FA              A  3659    	LD	BC,(IX+%FFFFFFFA)
0006DB C5                  A  3660    	PUSH	BC
0006DC CD 00 00 00         A  3661    	CALL	_ZFSList
0006E0 C1                  A  3662    	POP	BC
0006E1 C1                  A  3663    	POP	BC
0006E2 C1                  A  3664    	POP	BC
0006E3 DD75F8              A  3665    	LD	(IX+%FFFFFFF8),L
0006E6 DD74F9              A  3666    	LD	(IX+%FFFFFFF9),H
                           A  3667    ;  394			if( fd_cnt < 0 )
                           A  3668    .LINE 394
                           A  3669    
0006E9 DD27F8              A  3670    	LD	HL,(IX+%FFFFFFF8)
0006EC CD 00 00 00         A  3671    	CALL	__scmpzero
0006F0 F2 00 07 00         A  3672    	JP	P,L_80
                           A  3673    ;  395			{
                           A  3674    ;  396				ret_val = ZSHELL_FAILURE ;
                           A  3675    .LINE 396
                           A  3676    
0006F4 DD36F0FF            A  3677    	LD	(IX+%FFFFFFF0),%FF
0006F8 DD36F1FF            A  3678    	LD	(IX+%FFFFFFF1),%FF
                           A  3679    ;  397				goto end_Shell_ZFSGetList ;
                           A  3680    .LINE 397
                           A  3681    
0006FC C3 A6 07 00         A  3682    	JR	L_76
                           A  3683    ;  398			}
000700                     A  3684    L_80:
                           A  3685    .LINE 398
                           A  3686    
                           A  3687    ;  399			fd_total_cnt += fd_cnt ;
                           A  3688    .LINE 399
                           A  3689    
000700 DD07F8              A  3690    	LD	BC,(IX+%FFFFFFF8)
000703 DD27EE              A  3691    	LD	HL,(IX+%FFFFFFEE)
000706 4009                A  3692    	ADD.SIS	HL,BC
000708 DD75EE              A  3693    	LD	(IX+%FFFFFFEE),L
00070B DD74EF              A  3694    	LD	(IX+%FFFFFFEF),H
                           A  3695    ;  400	
                           A  3696    ;  401			/**  Get the size of the file */
                           A  3697    ;  402			ptmp_fs_fd_list = pfs_fd_list ;
                           A  3698    .LINE 402
                           A  3699    
00070E DD07FD              A  3700    	LD	BC,(IX+%FFFFFFFD)
000711 DD0FF5              A  3701    	LD	(IX+%FFFFFFF5),BC
                           A  3702    ;  403			for( filecnt = 0 ; filecnt < fd_cnt ; filecnt++ )
                           A  3703    .LINE 403
                           A  3704    
000714 DD36F300            A  3705    	LD	(IX+%FFFFFFF3),%0
000718 DD36F400            A  3706    	LD	(IX+%FFFFFFF4),%0
00071C 18 56               A  3707    	JR	L_88
00071E                     A  3708    L_86:
                           A  3709    ;  404			{
                           A  3710    ;  405				if( ( (~(ptmp_fs_fd_list->fd_type)) & ZFS_FILE_TYPE ) == ZFS_FILE_TYPE )
                           A  3711    .LINE 405
                           A  3712    
00071E DD31F5              A  3713    	LD	IY,(IX+%FFFFFFF5)
000721 FD7E11              A  3714    	LD	A,(IY+%11)
000724 B7ED62              A  3715    	UEXT	HL
000727 6F                  A  3716    	LD	L,A
000728 CD 00 00 00         A  3717    	CALL	__inot
00072C 7D                  A  3718    	LD	A,L
00072D E608                A  3719    	AND	A,%8
00072F FE08                A  3720    	CP	A,%8
000731 20 2E               A  3721    	JR	NZ,L_85
                           A  3722    ;  406				{
                           A  3723    ;  407					if( !strcmp((const INT8 *)fileName,(const INT8 *) ptmp_fs_fd_list->fd_name ) )
                           A  3724    .LINE 407
                           A  3725    
000733 DD31F5              A  3726    	LD	IY,(IX+%FFFFFFF5)
000736 ED6600              A  3727    	PEA	IY+%0
000739 DD0706              A  3728    	LD	BC,(IX+%6)
00073C C5                  A  3729    	PUSH	BC
00073D CD 00 00 00         A  3730    	CALL	_strcmp
000741 C1                  A  3731    	POP	BC
000742 C1                  A  3732    	POP	BC
000743 CD 00 00 00         A  3733    	CALL	__icmpzero
000747 20 18               A  3734    	JR	NZ,L_85
                           A  3735    ;  408					{
                           A  3736    ;  409						*size = ptmp_fs_fd_list->fd_size ;
                           A  3737    .LINE 409
                           A  3738    
000749 DD31F5              A  3739    	LD	IY,(IX+%FFFFFFF5)
00074C DD270C              A  3740    	LD	HL,(IX+%C)
00074F FD0712              A  3741    	LD	BC,(IY+%12)
000752 FD7E15              A  3742    	LD	A,(IY+%15)
000755 ED0F                A  3743    	LD	(HL),BC
000757 23                  A  3744    	INC	HL
000758 23                  A  3745    	INC	HL
000759 23                  A  3746    	INC	HL
00075A 77                  A  3747    	LD	(HL),A
                           A  3748    ;  410						found = ZSHELL_TRUE;
                           A  3749    .LINE 410
                           A  3750    
00075B DD36F201            A  3751    	LD	(IX+%FFFFFFF2),%1
                           A  3752    ;  411						break;
                           A  3753    .LINE 411
                           A  3754    
00075F 18 25               A  3755    	JR	L_90
                           A  3756    ;  412					}
                           A  3757    ;  413				}
000761                     A  3758    L_85:
                           A  3759    .LINE 413
                           A  3760    
                           A  3761    ;  414				ptmp_fs_fd_list++;
                           A  3762    .LINE 414
                           A  3763    
000761 DD31F5              A  3764    	LD	IY,(IX+%FFFFFFF5)
000764 ED331D              A  3765    	LEA	IY,IY+%1D
000767 DD3EF5              A  3766    	LD	(IX+%FFFFFFF5),IY
00076A DD27F3              A  3767    	LD	HL,(IX+%FFFFFFF3)
00076D 23                  A  3768    	INC	HL
00076E DD75F3              A  3769    	LD	(IX+%FFFFFFF3),L
000771 DD74F4              A  3770    	LD	(IX+%FFFFFFF4),H
                           A  3771    ;  415			}
000774                     A  3772    L_88:
                           A  3773    .LINE 415
                           A  3774    
000774 DD07F8              A  3775    	LD	BC,(IX+%FFFFFFF8)
000777 DD27F3              A  3776    	LD	HL,(IX+%FFFFFFF3)
00077A B7                  A  3777    	OR	A,A
00077B 40ED42              A  3778    	SBC.SIS	HL,BC
00077E CD 00 00 00         A  3779    	CALL	__setflag
000782 FA 1E 07 00         A  3780    	JP	M,L_86
000786                     A  3781    L_90:
                           A  3782    ;  416			if( found == ZSHELL_TRUE )
                           A  3783    .LINE 416
                           A  3784    
000786 DD7EF2              A  3785    	LD	A,(IX+%FFFFFFF2)
000789 FE01                A  3786    	CP	A,%1
00078B 28 0B               A  3787    	JR	Z,L_94
                           A  3788    ;  417				break ;
                           A  3789    ;  418		}while( fd_cnt != 0 ) ;
                           A  3790    .LINE 418
                           A  3791    
00078D DD27F8              A  3792    	LD	HL,(IX+%FFFFFFF8)
000790 CD 00 00 00         A  3793    	CALL	__scmpzero
000794 C2 CE 06 00         A  3794    	JR	NZ,L_91
000798                     A  3795    L_94:
                           A  3796    ;  419	
                           A  3797    ;  420		if( found == ZSHELL_FALSE )
                           A  3798    .LINE 420
                           A  3799    
000798 DD7EF2              A  3800    	LD	A,(IX+%FFFFFFF2)
00079B B7                  A  3801    	OR	A,A
00079C 20 08               A  3802    	JR	NZ,L_96
                           A  3803    ;  421		{
                           A  3804    ;  422			ret_val = ZSHELL_FAILURE ;
                           A  3805    .LINE 422
                           A  3806    
00079E DD36F0FF            A  3807    	LD	(IX+%FFFFFFF0),%FF
0007A2 DD36F1FF            A  3808    	LD	(IX+%FFFFFFF1),%FF
                           A  3809    ;  423			goto end_Shell_ZFSGetList ;
                           A  3810    ;  424		}
0007A6                     A  3811    L_96:
                           A  3812    .LINE 424
                           A  3813    
0007A6                     A  3814    L_76:
                           A  3815    ;  425	
                           A  3816    ;  426	end_Shell_ZFSGetList :
                           A  3817    ;  427		if( pathName )
                           A  3818    .LINE 427
                           A  3819    
0007A6 DD27FA              A  3820    	LD	HL,(IX+%FFFFFFFA)
0007A9 CD 00 00 00         A  3821    	CALL	__icmpzero
0007AD 28 09               A  3822    	JR	Z,L_98
                           A  3823    ;  428			free( pathName ) ;
                           A  3824    .LINE 428
                           A  3825    
0007AF DD07FA              A  3826    	LD	BC,(IX+%FFFFFFFA)
0007B2 C5                  A  3827    	PUSH	BC
0007B3 CD 00 00 00         A  3828    	CALL	_free
0007B7 C1                  A  3829    	POP	BC
0007B8                     A  3830    L_98:
                           A  3831    ;  429		if( pfs_fd_list )
                           A  3832    .LINE 429
                           A  3833    
0007B8 DD27FD              A  3834    	LD	HL,(IX+%FFFFFFFD)
0007BB CD 00 00 00         A  3835    	CALL	__icmpzero
0007BF 28 09               A  3836    	JR	Z,L_99
                           A  3837    ;  430			free( pfs_fd_list ) ;
                           A  3838    .LINE 430
                           A  3839    
0007C1 DD07FD              A  3840    	LD	BC,(IX+%FFFFFFFD)
0007C4 C5                  A  3841    	PUSH	BC
0007C5 CD 00 00 00         A  3842    	CALL	_free
0007C9 C1                  A  3843    	POP	BC
0007CA                     A  3844    L_99:
                           A  3845    ;  431		return ret_val ;
                           A  3846    .LINE 431
                           A  3847    
0007CA DD27F0              A  3848    	LD	HL,(IX+%FFFFFFF0)
                           A  3849    ;  432	}
                           A  3850    .LINE 432
                           A  3851    
0007CD DDF9                A  3852    	LD	SP,IX
0007CF DDE1                A  3853    	POP	IX
0007D1 C9                  A  3854    	RET	
                           A  3855    
                           A  3856    
                           A  3857    ;**************************** _Shell_ZFSGetList ***************************
                           A  3858    ;Name                         Addr/Register   Size   Type
                           A  3859    ;_free                               IMPORT  -----   function
                           A  3860    ;_strcmp                             IMPORT  -----   function
                           A  3861    ;_ZFSList                            IMPORT  -----   function
                           A  3862    ;_memset                             IMPORT  -----   function
                           A  3863    ;_malloc                             IMPORT  -----   function
                           A  3864    ;fd_total_cnt                         IX-18      2   variable
                           A  3865    ;ret_val                              IX-16      2   variable
                           A  3866    ;found                                IX-14      1   variable
                           A  3867    ;filecnt                              IX-13      2   variable
                           A  3868    ;ptmp_fs_fd_list                      IX-11      3   variable
                           A  3869    ;fd_cnt                                IX-8      2   variable
                           A  3870    ;pathName                              IX-6      3   variable
                           A  3871    ;pfs_fd_list                           IX-3      3   variable
                           A  3872    ;stdout                               IX+15      3   parameter
                           A  3873    ;size                                 IX+12      3   parameter
                           A  3874    ;argv                                  IX+9      3   parameter
                           A  3875    ;fileName                              IX+6      3   parameter
                           A  3876    
                           A  3877    
                           A  3878    ; Stack Frame Size: 36 (bytes)
                           A  3879    ;       Spill Code: 0 (instruction)
                           A  3880    
                           A  3881    
                           A  3882    .ENDFUNC "Shell_ZFSGetList",432,"_Shell_ZFSGetList"
                           A  3883    ;  433	
                           A  3884    ;  434	/** This function moves/copies the file from one 
                           A  3885    ;  435	    location to another */
                           A  3886    ;  436	INT16 Shell_ZFSCopyMoveFile (
                           A  3887    ;  437		struct shvars *			Shl,
                           A  3888    ;  438		RZK_DEVICE_CB_t *						stdin,
                           A  3889    ;  439		RZK_DEVICE_CB_t *						stdout, 
                           A  3890    ;  440		RZK_DEVICE_CB_t *						stderr, 
                           A  3891    ;  441		UINT16					nargs,
                           A  3892    ;  442		INT8					      *argv[]
                           A  3893    ;  443	)
                           A  3894    ;  444	{
0007D2                     A  3895    _Shell_ZFSCopyMoveFile:
                           A  3896    .DEFINE "_Shell_ZFSCopyMoveFile"
                           A  3897    
                           A  3898    .VALUE _Shell_ZFSCopyMoveFile
                           A  3899    
                           A  3900    .CLASS 2
                           A  3901    
                           A  3902    .TYPE 67
                           A  3903    
                           A  3904    .ENDEF
                           A  3905    
                           A  3906    .BEGFUNC "Shell_ZFSCopyMoveFile",444,"_Shell_ZFSCopyMoveFile"
                           A  3907    
                           A  3908    .LINE 444
                           A  3909    
                           A  3910    .DEFINE "Shl"
                           A  3911    
                           A  3912    .CLASS 65
                           A  3913    
                           A  3914    .VALUE 6
                           A  3915    
                           A  3916    .TAG "shvars"
                           A  3917    
                           A  3918    .TYPE 40
                           A  3919    
                           A  3920    .ENDEF
                           A  3921    
                           A  3922    .DEFINE "stdin"
                           A  3923    
                           A  3924    .CLASS 65
                           A  3925    
                           A  3926    .VALUE 9
                           A  3927    
                           A  3928    .TAG "RZK_DEVICE_CB_t"
                           A  3929    
                           A  3930    .TYPE 40
                           A  3931    
                           A  3932    .ENDEF
                           A  3933    
                           A  3934    .DEFINE "stdout"
                           A  3935    
                           A  3936    .CLASS 65
                           A  3937    
                           A  3938    .VALUE 12
                           A  3939    
                           A  3940    .TAG "RZK_DEVICE_CB_t"
                           A  3941    
                           A  3942    .TYPE 40
                           A  3943    
                           A  3944    .ENDEF
                           A  3945    
                           A  3946    .DEFINE "stderr"
                           A  3947    
                           A  3948    .CLASS 65
                           A  3949    
                           A  3950    .VALUE 15
                           A  3951    
                           A  3952    .TAG "RZK_DEVICE_CB_t"
                           A  3953    
                           A  3954    .TYPE 40
                           A  3955    
                           A  3956    .ENDEF
                           A  3957    
                           A  3958    .DEFINE "nargs"
                           A  3959    
                           A  3960    .CLASS 65
                           A  3961    
                           A  3962    .VALUE 18
                           A  3963    
                           A  3964    .TYPE 13
                           A  3965    
                           A  3966    .ENDEF
                           A  3967    
                           A  3968    .DEFINE "argv"
                           A  3969    
                           A  3970    .CLASS 65
                           A  3971    
                           A  3972    .VALUE 21
                           A  3973    
                           A  3974    .TYPE 290
                           A  3975    
                           A  3976    .ENDEF
                           A  3977    
                           A  3978    .DEFINE "destnDir"
                           A  3979    
                           A  3980    .CLASS 65
                           A  3981    
                           A  3982    .VALUE -3
                           A  3983    
                           A  3984    .TYPE 34
                           A  3985    
                           A  3986    .ENDEF
                           A  3987    
                           A  3988    .DEFINE "ret_val"
                           A  3989    
                           A  3990    .CLASS 65
                           A  3991    
                           A  3992    .VALUE -5
                           A  3993    
                           A  3994    .TYPE 3
                           A  3995    
                           A  3996    .ENDEF
                           A  3997    
                           A  3998    .DEFINE "fileName"
                           A  3999    
                           A  4000    .CLASS 65
                           A  4001    
                           A  4002    .VALUE -8
                           A  4003    
                           A  4004    .TYPE 34
                           A  4005    
                           A  4006    .ENDEF
                           A  4007    
                           A  4008    .DEFINE "fileHandle1"
                           A  4009    
                           A  4010    .CLASS 65
                           A  4011    
                           A  4012    .VALUE -11
                           A  4013    
                           A  4014    .TYPE 33
                           A  4015    
                           A  4016    .ENDEF
                           A  4017    
                           A  4018    .DEFINE "fileHandle2"
                           A  4019    
                           A  4020    .CLASS 65
                           A  4021    
                           A  4022    .VALUE -14
                           A  4023    
                           A  4024    .TYPE 33
                           A  4025    
                           A  4026    .ENDEF
                           A  4027    
                           A  4028    .DEFINE "fs_read_buffer"
                           A  4029    
                           A  4030    .CLASS 65
                           A  4031    
                           A  4032    .VALUE -17
                           A  4033    
                           A  4034    .TYPE 44
                           A  4035    
                           A  4036    .ENDEF
                           A  4037    
                           A  4038    .DEFINE "len"
                           A  4039    
                           A  4040    .CLASS 65
                           A  4041    
                           A  4042    .VALUE -19
                           A  4043    
                           A  4044    .TYPE 3
                           A  4045    
                           A  4046    .ENDEF
                           A  4047    
                           A  4048    .DEFINE "readCnt"
                           A  4049    
                           A  4050    .CLASS 65
                           A  4051    
                           A  4052    .VALUE -23
                           A  4053    
                           A  4054    .TYPE 15
                           A  4055    
                           A  4056    .ENDEF
                           A  4057    
                           A  4058    .DEFINE "path"
                           A  4059    
                           A  4060    .CLASS 65
                           A  4061    
                           A  4062    .VALUE -26
                           A  4063    
                           A  4064    .TYPE 34
                           A  4065    
                           A  4066    .ENDEF
                           A  4067    
                           A  4068    .DEFINE "slashExist"
                           A  4069    
                           A  4070    .CLASS 65
                           A  4071    
                           A  4072    .VALUE -27
                           A  4073    
                           A  4074    .TYPE 12
                           A  4075    
                           A  4076    .ENDEF
                           A  4077    
                           A  4078    .DEFINE "numBytes"
                           A  4079    
                           A  4080    .CLASS 65
                           A  4081    
                           A  4082    .VALUE -31
                           A  4083    
                           A  4084    .TYPE 15
                           A  4085    
                           A  4086    .ENDEF
                           A  4087    
                           A  4088    .DEFINE "status"
                           A  4089    
                           A  4090    .CLASS 65
                           A  4091    
                           A  4092    .VALUE -34
                           A  4093    
                           A  4094    .TYPE 4
                           A  4095    
                           A  4096    .ENDEF
                           A  4097    
                           A  4098    .DEFINE "size"
                           A  4099    
                           A  4100    .CLASS 65
                           A  4101    
                           A  4102    .VALUE -38
                           A  4103    
                           A  4104    .TYPE 15
                           A  4105    
                           A  4106    .ENDEF
                           A  4107    
0007D2 DDE5                A  4108    	PUSH	IX
0007D4 DD210000 00         A  4109    	LD	IX,0
0007D9 DD39                A  4110    	ADD	IX,SP
0007DB ED22DA              A  4111    	LEA	HL,IX+%FFFFFFDA
0007DE F9                  A  4112    	LD	SP,HL
                           A  4113    ;  445		/** Get the directory name and the file name separately */
                           A  4114    ;  446		/** Get the size of all the files using ZFSList API present in the directory */
                           A  4115    ;  447		/** Compare the file sent by the application with the one got from the ZFSList API */
                           A  4116    ;  448		/** Open the file */
                           A  4117    ;  449		/** Read the contents into one buffer */
                           A  4118    ;  450		/** Close the file */
                           A  4119    ;  451		/** Create a file in the destination directory specified by the application */
                           A  4120    ;  452		/** Write the contents in to the destination file from the buffer */
                           A  4121    ;  453		/** Close the file */
                           A  4122    ;  454	
                           A  4123    ;  455		INT8			* fileName ;
                           A  4124    ;  456		INT8			*path ;
                           A  4125    ;  457		INT16			len;
                           A  4126    ;  458		UINT32			numBytes;
                           A  4127    ;  459		UINT32			size;
                           A  4128    ;  460		INT8			*destnDir;
                           A  4129    ;  461		ZFS_STATUS_t	status;
                           A  4130    ;  462		ZFS_HANDLE_t	fileHandle1, fileHandle2;
                           A  4131    ;  463		UINT8			slashExist = 0;
                           A  4132    .LINE 463
                           A  4133    
0007DF DD36E500            A  4134    	LD	(IX+%FFFFFFE5),%0
                           A  4135    ;  464	
                           A  4136    ;  465		UINT32 readCnt = 0;
                           A  4137    .LINE 465
                           A  4138    
0007E3 01000000            A  4139    	LD	BC,0
0007E7 AF                  A  4140    	XOR	A,A
0007E8 DD0FE9              A  4141    	LD	(IX+%FFFFFFE9),BC
0007EB DD77EC              A  4142    	LD	(IX+%FFFFFFEC),A
                           A  4143    ;  466		UINT8  *fs_read_buffer;
                           A  4144    ;  467		INT16 ret_val = ZSHELL_SUCCESS;
                           A  4145    ;  468	
                           A  4146    ;  469		/** Chekck the number of arguments, return error if not valid number  */
                           A  4147    ;  470		if( nargs != 3 )
                           A  4148    .LINE 470
                           A  4149    
0007EE 49010300            A  4150    	LD.LIS	BC,3
0007F2 DD2712              A  4151    	LD	HL,(IX+%12)
0007F5 B7                  A  4152    	OR	A,A
0007F6 40ED42              A  4153    	SBC.SIS	HL,BC
0007F9 28 23               A  4154    	JR	Z,L_102
                           A  4155    ;  471		{
                           A  4156    ;  472			printf("\nThe syntax of the command is incorrect\n");
                           A  4157    .LINE 472
                           A  4158    
0007FB 01 B9 04 00         A  4159    	LD	BC,L__84
0007FF C5                  A  4160    	PUSH	BC
000800 CD 00 00 00         A  4161    	CALL	_printf
000804 C1                  A  4162    	POP	BC
                           A  4163    ;  473			printf("%s <src file Name> <destnDirName>\n",argv[0]);
                           A  4164    .LINE 473
                           A  4165    
000805 DD2715              A  4166    	LD	HL,(IX+%15)
000808 ED07                A  4167    	LD	BC,(HL)
00080A C5                  A  4168    	PUSH	BC
00080B 01 E2 04 00         A  4169    	LD	BC,L__85
00080F C5                  A  4170    	PUSH	BC
000810 CD 00 00 00         A  4171    	CALL	_printf
000814 C1                  A  4172    	POP	BC
000815 C1                  A  4173    	POP	BC
                           A  4174    ;  474			return ZSHELL_FAILURE ;		
                           A  4175    .LINE 474
                           A  4176    
000816 4921FFFF            A  4177    	LD.LIS	HL,-1
00081A C3 5A 0B 00         A  4178    	JR	L_150
                           A  4179    ;  475		}
00081E                     A  4180    L_102:
                           A  4181    .LINE 475
                           A  4182    
                           A  4183    ;  476	
                           A  4184    ;  477		fileName = ( INT8 * ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  4185    .LINE 477
                           A  4186    
00081E 01000100            A  4187    	LD	BC,256
000822 C5                  A  4188    	PUSH	BC
000823 CD 00 00 00         A  4189    	CALL	_malloc
000827 C1                  A  4190    	POP	BC
000828 DD2FF8              A  4191    	LD	(IX+%FFFFFFF8),HL
                           A  4192    ;  478		destnDir = ( INT8 * ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  4193    .LINE 478
                           A  4194    
00082B 01000100            A  4195    	LD	BC,256
00082F C5                  A  4196    	PUSH	BC
000830 CD 00 00 00         A  4197    	CALL	_malloc
000834 C1                  A  4198    	POP	BC
000835 DD2FFD              A  4199    	LD	(IX+%FFFFFFFD),HL
                           A  4200    ;  479		fs_read_buffer = ( UINT8 * ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  4201    .LINE 479
                           A  4202    
000838 01000100            A  4203    	LD	BC,256
00083C C5                  A  4204    	PUSH	BC
00083D CD 00 00 00         A  4205    	CALL	_malloc
000841 C1                  A  4206    	POP	BC
000842 DD2FEF              A  4207    	LD	(IX+%FFFFFFEF),HL
                           A  4208    ;  480	
                           A  4209    ;  481		if( fileName == NULL || destnDir == NULL || fs_read_buffer == NULL )
                           A  4210    .LINE 481
                           A  4211    
000845 DD27F8              A  4212    	LD	HL,(IX+%FFFFFFF8)
000848 CD 00 00 00         A  4213    	CALL	__icmpzero
00084C 28 12               A  4214    	JR	Z,L_106
00084E DD27FD              A  4215    	LD	HL,(IX+%FFFFFFFD)
000851 CD 00 00 00         A  4216    	CALL	__icmpzero
000855 28 09               A  4217    	JR	Z,L_106
000857 DD27EF              A  4218    	LD	HL,(IX+%FFFFFFEF)
00085A CD 00 00 00         A  4219    	CALL	__icmpzero
00085E 20 0C               A  4220    	JR	NZ,L_107
000860                     A  4221    L_106:
                           A  4222    ;  482		{
                           A  4223    ;  483			ret_val = ZSHELL_FAILURE ;
                           A  4224    .LINE 483
                           A  4225    
000860 DD36FBFF            A  4226    	LD	(IX+%FFFFFFFB),%FF
000864 DD36FCFF            A  4227    	LD	(IX+%FFFFFFFC),%FF
                           A  4228    ;  484			goto end_Shell_ZFSCopyMoveFile ;
                           A  4229    .LINE 484
                           A  4230    
000868 C3 21 0B 00         A  4231    	JR	L_105
                           A  4232    ;  485		}
00086C                     A  4233    L_107:
                           A  4234    .LINE 485
                           A  4235    
                           A  4236    ;  486	
                           A  4237    ;  487		memset( fileName, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  4238    .LINE 487
                           A  4239    
00086C 01000100            A  4240    	LD	BC,256
000870 C5                  A  4241    	PUSH	BC
000871 01000000            A  4242    	LD	BC,0
000875 C5                  A  4243    	PUSH	BC
000876 DD07F8              A  4244    	LD	BC,(IX+%FFFFFFF8)
000879 C5                  A  4245    	PUSH	BC
00087A CD 00 00 00         A  4246    	CALL	_memset
00087E C1                  A  4247    	POP	BC
00087F C1                  A  4248    	POP	BC
000880 C1                  A  4249    	POP	BC
                           A  4250    ;  488		memset( destnDir, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  4251    .LINE 488
                           A  4252    
000881 01000100            A  4253    	LD	BC,256
000885 C5                  A  4254    	PUSH	BC
000886 01000000            A  4255    	LD	BC,0
00088A C5                  A  4256    	PUSH	BC
00088B DD07FD              A  4257    	LD	BC,(IX+%FFFFFFFD)
00088E C5                  A  4258    	PUSH	BC
00088F CD 00 00 00         A  4259    	CALL	_memset
000893 C1                  A  4260    	POP	BC
000894 C1                  A  4261    	POP	BC
000895 C1                  A  4262    	POP	BC
                           A  4263    ;  489		memset( fs_read_buffer, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  4264    .LINE 489
                           A  4265    
000896 01000100            A  4266    	LD	BC,256
00089A C5                  A  4267    	PUSH	BC
00089B 01000000            A  4268    	LD	BC,0
00089F C5                  A  4269    	PUSH	BC
0008A0 DD07EF              A  4270    	LD	BC,(IX+%FFFFFFEF)
0008A3 C5                  A  4271    	PUSH	BC
0008A4 CD 00 00 00         A  4272    	CALL	_memset
0008A8 C1                  A  4273    	POP	BC
0008A9 C1                  A  4274    	POP	BC
0008AA C1                  A  4275    	POP	BC
                           A  4276    ;  490	
                           A  4277    ;  491		if( Shell_ZFSGetList( fileName, argv, &size, stdout ) )
                           A  4278    .LINE 491
                           A  4279    
0008AB DD070C              A  4280    	LD	BC,(IX+%C)
0008AE C5                  A  4281    	PUSH	BC
0008AF ED65DA              A  4282    	PEA	IX+%FFFFFFDA
0008B2 DD0715              A  4283    	LD	BC,(IX+%15)
0008B5 C5                  A  4284    	PUSH	BC
0008B6 DD07F8              A  4285    	LD	BC,(IX+%FFFFFFF8)
0008B9 C5                  A  4286    	PUSH	BC
0008BA CD 29 06 00         A  4287    	CALL	_Shell_ZFSGetList
0008BE C1                  A  4288    	POP	BC
0008BF C1                  A  4289    	POP	BC
0008C0 C1                  A  4290    	POP	BC
0008C1 C1                  A  4291    	POP	BC
0008C2 CD 00 00 00         A  4292    	CALL	__scmpzero
0008C6 28 16               A  4293    	JR	Z,L_109
                           A  4294    ;  492		{
                           A  4295    ;  493			printf("\nThe specified file does not exist or accessing an invalid volume\n");
                           A  4296    .LINE 493
                           A  4297    
0008C8 01 05 05 00         A  4298    	LD	BC,L__90
0008CC C5                  A  4299    	PUSH	BC
0008CD CD 00 00 00         A  4300    	CALL	_printf
0008D1 C1                  A  4301    	POP	BC
                           A  4302    ;  494			ret_val = ZSHELL_FAILURE ;
                           A  4303    .LINE 494
                           A  4304    
0008D2 DD36FBFF            A  4305    	LD	(IX+%FFFFFFFB),%FF
0008D6 DD36FCFF            A  4306    	LD	(IX+%FFFFFFFC),%FF
                           A  4307    ;  495			goto end_Shell_ZFSCopyMoveFile ;
                           A  4308    .LINE 495
                           A  4309    
0008DA C3 21 0B 00         A  4310    	JR	L_105
                           A  4311    ;  496		}
0008DE                     A  4312    L_109:
                           A  4313    .LINE 496
                           A  4314    
                           A  4315    ;  497	
                           A  4316    ;  498		strcpy((INT8 *)destnDir, (const INT8 *)argv[2]);
                           A  4317    .LINE 498
                           A  4318    
0008DE DD3115              A  4319    	LD	IY,(IX+%15)
0008E1 ED2306              A  4320    	LEA	HL,IY+%6
0008E4 ED07                A  4321    	LD	BC,(HL)
0008E6 C5                  A  4322    	PUSH	BC
0008E7 DD07FD              A  4323    	LD	BC,(IX+%FFFFFFFD)
0008EA C5                  A  4324    	PUSH	BC
0008EB CD 00 00 00         A  4325    	CALL	_strcpy
0008EF C1                  A  4326    	POP	BC
0008F0 C1                  A  4327    	POP	BC
                           A  4328    ;  499		path = destnDir ;
                           A  4329    .LINE 499
                           A  4330    
0008F1 DD07FD              A  4331    	LD	BC,(IX+%FFFFFFFD)
0008F4 DD0FE6              A  4332    	LD	(IX+%FFFFFFE6),BC
                           A  4333    ;  500		len = strlen( (const INT8 *)destnDir );
                           A  4334    .LINE 500
                           A  4335    
0008F7 DD07FD              A  4336    	LD	BC,(IX+%FFFFFFFD)
0008FA C5                  A  4337    	PUSH	BC
0008FB CD 00 00 00         A  4338    	CALL	_strlen
0008FF C1                  A  4339    	POP	BC
000900 DD75ED              A  4340    	LD	(IX+%FFFFFFED),L
000903 DD74EE              A  4341    	LD	(IX+%FFFFFFEE),H
                           A  4342    ;  501		while( len >= 0 )
                           A  4343    .LINE 501
                           A  4344    
000906 18 34               A  4345    	JR	L_115
000908                     A  4346    L_116:
                           A  4347    ;  502		{
                           A  4348    ;  503			if( *path == '/' && len == 1 )
                           A  4349    .LINE 503
                           A  4350    
000908 DD27E6              A  4351    	LD	HL,(IX+%FFFFFFE6)
00090B 7E                  A  4352    	LD	A,(HL)
00090C 47                  A  4353    	LD	B,A
00090D 17ED62              A  4354    	SEXT	HL
000910 68                  A  4355    	LD	L,B
000911 012F0000            A  4356    	LD	BC,47
000915 B7                  A  4357    	OR	A,A
000916 ED42                A  4358    	SBC	HL,BC
000918 20 11               A  4359    	JR	NZ,L_113
00091A 49010100            A  4360    	LD.LIS	BC,1
00091E DD27ED              A  4361    	LD	HL,(IX+%FFFFFFED)
000921 B7                  A  4362    	OR	A,A
000922 40ED42              A  4363    	SBC.SIS	HL,BC
000925 20 04               A  4364    	JR	NZ,L_113
                           A  4365    ;  504			{
                           A  4366    ;  505				slashExist = 1;
                           A  4367    .LINE 505
                           A  4368    
000927 DD36E501            A  4369    	LD	(IX+%FFFFFFE5),%1
                           A  4370    ;  506			}
00092B                     A  4371    L_113:
                           A  4372    .LINE 506
                           A  4373    
                           A  4374    ;  507			len--;
                           A  4375    .LINE 507
                           A  4376    
00092B DD27ED              A  4377    	LD	HL,(IX+%FFFFFFED)
00092E 2B                  A  4378    	DEC	HL
00092F DD75ED              A  4379    	LD	(IX+%FFFFFFED),L
000932 DD74EE              A  4380    	LD	(IX+%FFFFFFEE),H
                           A  4381    ;  508			path++;
                           A  4382    .LINE 508
                           A  4383    
000935 DD07E6              A  4384    	LD	BC,(IX+%FFFFFFE6)
000938 03                  A  4385    	INC	BC
000939 DD0FE6              A  4386    	LD	(IX+%FFFFFFE6),BC
                           A  4387    ;  509		}
00093C                     A  4388    L_115:
                           A  4389    .LINE 509
                           A  4390    
00093C DD27ED              A  4391    	LD	HL,(IX+%FFFFFFED)
00093F CD 00 00 00         A  4392    	CALL	__scmpzero
000943 F2 08 09 00         A  4393    	JP	P,L_116
                           A  4394    ;  510	
                           A  4395    ;  511		if( !slashExist )
                           A  4396    .LINE 511
                           A  4397    
000947 DD7EE5              A  4398    	LD	A,(IX+%FFFFFFE5)
00094A B7                  A  4399    	OR	A,A
00094B 20 0F               A  4400    	JR	NZ,L_119
                           A  4401    ;  512		{
                           A  4402    ;  513			strcat((INT8 *)destnDir, "/" );
                           A  4403    .LINE 513
                           A  4404    
00094D 01 48 05 00         A  4405    	LD	BC,L__95
000951 C5                  A  4406    	PUSH	BC
000952 DD07FD              A  4407    	LD	BC,(IX+%FFFFFFFD)
000955 C5                  A  4408    	PUSH	BC
000956 CD 00 00 00         A  4409    	CALL	_strcat
00095A C1                  A  4410    	POP	BC
00095B C1                  A  4411    	POP	BC
                           A  4412    ;  514		}
00095C                     A  4413    L_119:
                           A  4414    .LINE 514
                           A  4415    
                           A  4416    ;  515	
                           A  4417    ;  516		/** Open the first file */
                           A  4418    ;  517		fileHandle1 = ZFSOpen(argv[1], ZFS_READ, ZFS_MODE_BINARY );
                           A  4419    .LINE 517
                           A  4420    
00095C 01010000            A  4421    	LD	BC,1
000960 C5                  A  4422    	PUSH	BC
000961 C5                  A  4423    	PUSH	BC
000962 DD3115              A  4424    	LD	IY,(IX+%15)
000965 ED2303              A  4425    	LEA	HL,IY+%3
000968 ED07                A  4426    	LD	BC,(HL)
00096A C5                  A  4427    	PUSH	BC
00096B CD 00 00 00         A  4428    	CALL	_ZFSOpen
00096F C1                  A  4429    	POP	BC
000970 C1                  A  4430    	POP	BC
000971 C1                  A  4431    	POP	BC
000972 DD2FF5              A  4432    	LD	(IX+%FFFFFFF5),HL
                           A  4433    ;  518		
                           A  4434    ;  519		/** Open the second file */
                           A  4435    ;  520		fileHandle2 = ZFSOpen( (INT8 *)strcat((INT8 *)destnDir, (const INT8 *)fileName), ZFS_WRITE, ZFS_MODE_BINARY );
                           A  4436    .LINE 520
                           A  4437    
000975 01010000            A  4438    	LD	BC,1
000979 C5                  A  4439    	PUSH	BC
00097A 01020000            A  4440    	LD	BC,2
00097E C5                  A  4441    	PUSH	BC
00097F DD07F8              A  4442    	LD	BC,(IX+%FFFFFFF8)
000982 C5                  A  4443    	PUSH	BC
000983 DD07FD              A  4444    	LD	BC,(IX+%FFFFFFFD)
000986 C5                  A  4445    	PUSH	BC
000987 CD 00 00 00         A  4446    	CALL	_strcat
00098B C1                  A  4447    	POP	BC
00098C C1                  A  4448    	POP	BC
00098D E5                  A  4449    	PUSH	HL
00098E CD 00 00 00         A  4450    	CALL	_ZFSOpen
000992 C1                  A  4451    	POP	BC
000993 C1                  A  4452    	POP	BC
000994 C1                  A  4453    	POP	BC
000995 DD2FF2              A  4454    	LD	(IX+%FFFFFFF2),HL
                           A  4455    ;  521		
                           A  4456    ;  522		if( fileHandle1 && fileHandle2 )
                           A  4457    .LINE 522
                           A  4458    
000998 DD27F5              A  4459    	LD	HL,(IX+%FFFFFFF5)
00099B CD 00 00 00         A  4460    	CALL	__icmpzero
00099F CA EB 0A 00         A  4461    	JR	Z,L_142
0009A3 DD27F2              A  4462    	LD	HL,(IX+%FFFFFFF2)
0009A6 CD 00 00 00         A  4463    	CALL	__icmpzero
0009AA C2 61 0A 00         A  4464    	JR	NZ,L_127
0009AE C3 EB 0A 00         A  4465    	JR	L_142
                           A  4466    ;  523		{
                           A  4467    ;  524			while( readCnt < size )
0009B2                     A  4468    L_128:
                           A  4469    .LINE 524
                           A  4470    
                           A  4471    ;  525			{
                           A  4472    ;  526				/**  Read from the first file */
                           A  4473    ;  527				if( ZFSSeek(fileHandle1, readCnt, ZFS_FILE_BEGIN ) )
                           A  4474    .LINE 527
                           A  4475    
0009B2 01020000            A  4476    	LD	BC,2
0009B6 C5                  A  4477    	PUSH	BC
0009B7 DD4EEC              A  4478    	LD	C,(IX+%FFFFFFEC)
0009BA 0600                A  4479    	LD	B,%0
0009BC C5                  A  4480    	PUSH	BC
0009BD DD07E9              A  4481    	LD	BC,(IX+%FFFFFFE9)
0009C0 C5                  A  4482    	PUSH	BC
0009C1 DD07F5              A  4483    	LD	BC,(IX+%FFFFFFF5)
0009C4 C5                  A  4484    	PUSH	BC
0009C5 CD 00 00 00         A  4485    	CALL	_ZFSSeek
0009C9 C1                  A  4486    	POP	BC
0009CA C1                  A  4487    	POP	BC
0009CB C1                  A  4488    	POP	BC
0009CC C1                  A  4489    	POP	BC
0009CD CD 00 00 00         A  4490    	CALL	__icmpzero
0009D1 28 0C               A  4491    	JR	Z,L_122
                           A  4492    ;  528				{
                           A  4493    ;  529					ret_val = ZSHELL_FAILURE ;
                           A  4494    .LINE 529
                           A  4495    
0009D3 DD36FBFF            A  4496    	LD	(IX+%FFFFFFFB),%FF
0009D7 DD36FCFF            A  4497    	LD	(IX+%FFFFFFFC),%FF
                           A  4498    ;  530					goto end_Shell_ZFSCopyMoveFile ;
                           A  4499    .LINE 530
                           A  4500    
0009DB C3 21 0B 00         A  4501    	JR	L_105
                           A  4502    ;  531				}
0009DF                     A  4503    L_122:
                           A  4504    .LINE 531
                           A  4505    
                           A  4506    ;  532				numBytes = ZFSRead(fileHandle1, fs_read_buffer, sizeof( fs_read_buffer ) );
                           A  4507    .LINE 532
                           A  4508    
0009DF 01030000            A  4509    	LD	BC,3
0009E3 C5                  A  4510    	PUSH	BC
0009E4 DD07EF              A  4511    	LD	BC,(IX+%FFFFFFEF)
0009E7 C5                  A  4512    	PUSH	BC
0009E8 DD07F5              A  4513    	LD	BC,(IX+%FFFFFFF5)
0009EB C5                  A  4514    	PUSH	BC
0009EC CD 00 00 00         A  4515    	CALL	_ZFSRead
0009F0 C1                  A  4516    	POP	BC
0009F1 C1                  A  4517    	POP	BC
0009F2 C1                  A  4518    	POP	BC
0009F3 DD2FE1              A  4519    	LD	(IX+%FFFFFFE1),HL
0009F6 DD73E4              A  4520    	LD	(IX+%FFFFFFE4),E
                           A  4521    ;  533	
                           A  4522    ;  534				if( numBytes )
                           A  4523    .LINE 534
                           A  4524    
0009F9 DD27E1              A  4525    	LD	HL,(IX+%FFFFFFE1)
0009FC DD5EE4              A  4526    	LD	E,(IX+%FFFFFFE4)
0009FF CD 00 00 00         A  4527    	CALL	__lcmpzero
000A03 28 46               A  4528    	JR	Z,L_126
                           A  4529    ;  535				{
                           A  4530    ;  536					/** Write to the second file */
                           A  4531    ;  537					if( ZFSSeek(fileHandle2, readCnt, ZFS_FILE_BEGIN ) )
                           A  4532    .LINE 537
                           A  4533    
000A05 01020000            A  4534    	LD	BC,2
000A09 C5                  A  4535    	PUSH	BC
000A0A DD4EEC              A  4536    	LD	C,(IX+%FFFFFFEC)
000A0D 0600                A  4537    	LD	B,%0
000A0F C5                  A  4538    	PUSH	BC
000A10 DD07E9              A  4539    	LD	BC,(IX+%FFFFFFE9)
000A13 C5                  A  4540    	PUSH	BC
000A14 DD07F2              A  4541    	LD	BC,(IX+%FFFFFFF2)
000A17 C5                  A  4542    	PUSH	BC
000A18 CD 00 00 00         A  4543    	CALL	_ZFSSeek
000A1C C1                  A  4544    	POP	BC
000A1D C1                  A  4545    	POP	BC
000A1E C1                  A  4546    	POP	BC
000A1F C1                  A  4547    	POP	BC
000A20 CD 00 00 00         A  4548    	CALL	__icmpzero
000A24 28 0C               A  4549    	JR	Z,L_124
                           A  4550    ;  538					{
                           A  4551    ;  539						ret_val = ZSHELL_FAILURE ;
                           A  4552    .LINE 539
                           A  4553    
000A26 DD36FBFF            A  4554    	LD	(IX+%FFFFFFFB),%FF
000A2A DD36FCFF            A  4555    	LD	(IX+%FFFFFFFC),%FF
                           A  4556    ;  540						goto end_Shell_ZFSCopyMoveFile ;
                           A  4557    .LINE 540
                           A  4558    
000A2E C3 21 0B 00         A  4559    	JR	L_105
                           A  4560    ;  541					}
000A32                     A  4561    L_124:
                           A  4562    .LINE 541
                           A  4563    
                           A  4564    ;  542					
                           A  4565    ;  543					numBytes = ZFSWrite(fileHandle2, fs_read_buffer, numBytes );
                           A  4566    .LINE 543
                           A  4567    
000A32 DD07E1              A  4568    	LD	BC,(IX+%FFFFFFE1)
000A35 C5                  A  4569    	PUSH	BC
000A36 DD07EF              A  4570    	LD	BC,(IX+%FFFFFFEF)
000A39 C5                  A  4571    	PUSH	BC
000A3A DD07F2              A  4572    	LD	BC,(IX+%FFFFFFF2)
000A3D C5                  A  4573    	PUSH	BC
000A3E CD 00 00 00         A  4574    	CALL	_ZFSWrite
000A42 C1                  A  4575    	POP	BC
000A43 C1                  A  4576    	POP	BC
000A44 C1                  A  4577    	POP	BC
000A45 DD2FE1              A  4578    	LD	(IX+%FFFFFFE1),HL
000A48 DD73E4              A  4579    	LD	(IX+%FFFFFFE4),E
                           A  4580    ;  544				}
000A4B                     A  4581    L_126:
                           A  4582    .LINE 544
                           A  4583    
                           A  4584    ;  545	
                           A  4585    ;  546				/** Increment the read count */
                           A  4586    ;  547				readCnt += numBytes ;			
                           A  4587    .LINE 547
                           A  4588    
000A4B DD27E1              A  4589    	LD	HL,(IX+%FFFFFFE1)
000A4E DD5EE4              A  4590    	LD	E,(IX+%FFFFFFE4)
000A51 DD07E9              A  4591    	LD	BC,(IX+%FFFFFFE9)
000A54 DD7EEC              A  4592    	LD	A,(IX+%FFFFFFEC)
000A57 CD 00 00 00         A  4593    	CALL	__ladd
000A5B DD2FE9              A  4594    	LD	(IX+%FFFFFFE9),HL
000A5E DD73EC              A  4595    	LD	(IX+%FFFFFFEC),E
                           A  4596    ;  548			}
000A61                     A  4597    L_127:
                           A  4598    .LINE 548
                           A  4599    
000A61 DD27E9              A  4600    	LD	HL,(IX+%FFFFFFE9)
000A64 DD5EEC              A  4601    	LD	E,(IX+%FFFFFFEC)
000A67 DD07DA              A  4602    	LD	BC,(IX+%FFFFFFDA)
000A6A DD7EDD              A  4603    	LD	A,(IX+%FFFFFFDD)
000A6D CD 00 00 00         A  4604    	CALL	__lcmpu
000A71 DA B2 09 00         A  4605    	JR	C,L_128
                           A  4606    ;  549	
                           A  4607    ;  550			if(  ( ZFSClose(fileHandle1) ) || ( ZFSClose(fileHandle2) ) )
                           A  4608    .LINE 550
                           A  4609    
000A75 DD07F5              A  4610    	LD	BC,(IX+%FFFFFFF5)
000A78 C5                  A  4611    	PUSH	BC
000A79 CD 00 00 00         A  4612    	CALL	_ZFSClose
000A7D C1                  A  4613    	POP	BC
000A7E CD 00 00 00         A  4614    	CALL	__icmpzero
000A82 20 0F               A  4615    	JR	NZ,L_130
000A84 DD07F2              A  4616    	LD	BC,(IX+%FFFFFFF2)
000A87 C5                  A  4617    	PUSH	BC
000A88 CD 00 00 00         A  4618    	CALL	_ZFSClose
000A8C C1                  A  4619    	POP	BC
000A8D CD 00 00 00         A  4620    	CALL	__icmpzero
000A91 28 0C               A  4621    	JR	Z,L_135
000A93                     A  4622    L_130:
                           A  4623    ;  551			{
                           A  4624    ;  552				ret_val = ZSHELL_FAILURE ;
                           A  4625    .LINE 552
                           A  4626    
000A93 DD36FBFF            A  4627    	LD	(IX+%FFFFFFFB),%FF
000A97 DD36FCFF            A  4628    	LD	(IX+%FFFFFFFC),%FF
                           A  4629    ;  553				goto end_Shell_ZFSCopyMoveFile ;
                           A  4630    .LINE 553
                           A  4631    
000A9B C3 21 0B 00         A  4632    	JR	L_105
                           A  4633    ;  554			}
000A9F                     A  4634    L_135:
                           A  4635    .LINE 554
                           A  4636    
                           A  4637    ;  555	
                           A  4638    ;  556			if( strcmp((const INT8 *)argv[0], "move" ) == 0 )
                           A  4639    .LINE 556
                           A  4640    
000A9F 01 4A 05 00         A  4641    	LD	BC,L__104
000AA3 C5                  A  4642    	PUSH	BC
000AA4 DD2715              A  4643    	LD	HL,(IX+%15)
000AA7 ED07                A  4644    	LD	BC,(HL)
000AA9 C5                  A  4645    	PUSH	BC
000AAA CD 00 00 00         A  4646    	CALL	_strcmp
000AAE C1                  A  4647    	POP	BC
000AAF C1                  A  4648    	POP	BC
000AB0 CD 00 00 00         A  4649    	CALL	__icmpzero
000AB4 20 21               A  4650    	JR	NZ,L_134
                           A  4651    ;  557			{
                           A  4652    ;  558				/** delete the original */
                           A  4653    ;  559				status = ZFSDelete(argv[1]);			
                           A  4654    .LINE 559
                           A  4655    
000AB6 DD3115              A  4656    	LD	IY,(IX+%15)
000AB9 ED2303              A  4657    	LEA	HL,IY+%3
000ABC ED07                A  4658    	LD	BC,(HL)
000ABE C5                  A  4659    	PUSH	BC
000ABF CD 00 00 00         A  4660    	CALL	_ZFSDelete
000AC3 C1                  A  4661    	POP	BC
000AC4 DD2FDE              A  4662    	LD	(IX+%FFFFFFDE),HL
                           A  4663    ;  560				if( status )
                           A  4664    .LINE 560
                           A  4665    
000AC7 CD 00 00 00         A  4666    	CALL	__icmpzero
000ACB 28 14               A  4667    	JR	Z,L_136
                           A  4668    ;  561				{
                           A  4669    ;  562					ret_val = ZSHELL_FAILURE ;
                           A  4670    .LINE 562
                           A  4671    
000ACD DD36FBFF            A  4672    	LD	(IX+%FFFFFFFB),%FF
000AD1 DD36FCFF            A  4673    	LD	(IX+%FFFFFFFC),%FF
                           A  4674    ;  563					goto end_Shell_ZFSCopyMoveFile ;
                           A  4675    .LINE 563
                           A  4676    
000AD5 18 4A               A  4677    	JR	L_105
                           A  4678    ;  564				}
                           A  4679    ;  565			}
                           A  4680    ;  566			else
000AD7                     A  4681    L_134:
                           A  4682    .LINE 566
                           A  4683    
                           A  4684    ;  567				printf("\nFile is copied\n");
                           A  4685    .LINE 567
                           A  4686    
000AD7 01 4F 05 00         A  4687    	LD	BC,L__107
000ADB C5                  A  4688    	PUSH	BC
000ADC CD 00 00 00         A  4689    	CALL	_printf
000AE0 C1                  A  4690    	POP	BC
000AE1                     A  4691    L_136:
                           A  4692    ;  568			ret_val = ZSHELL_SUCCESS ;	
                           A  4693    .LINE 568
                           A  4694    
000AE1 DD36FB00            A  4695    	LD	(IX+%FFFFFFFB),%0
000AE5 DD36FC00            A  4696    	LD	(IX+%FFFFFFFC),%0
                           A  4697    ;  569			goto end_Shell_ZFSCopyMoveFile ;
                           A  4698    .LINE 569
                           A  4699    
000AE9 18 36               A  4700    	JR	L_105
                           A  4701    ;  570		}
                           A  4702    ;  571		else
000AEB                     A  4703    L_142:
                           A  4704    .LINE 571
                           A  4705    
                           A  4706    ;  572		{
                           A  4707    ;  573			if( fileHandle1 )
                           A  4708    .LINE 573
                           A  4709    
000AEB DD27F5              A  4710    	LD	HL,(IX+%FFFFFFF5)
000AEE CD 00 00 00         A  4711    	CALL	__icmpzero
000AF2 28 09               A  4712    	JR	Z,L_139
                           A  4713    ;  574				ZFSClose( fileHandle1);
                           A  4714    .LINE 574
                           A  4715    
000AF4 DD07F5              A  4716    	LD	BC,(IX+%FFFFFFF5)
000AF7 C5                  A  4717    	PUSH	BC
000AF8 CD 00 00 00         A  4718    	CALL	_ZFSClose
000AFC C1                  A  4719    	POP	BC
000AFD                     A  4720    L_139:
                           A  4721    ;  575			if( fileHandle2 )
                           A  4722    .LINE 575
                           A  4723    
000AFD DD27F2              A  4724    	LD	HL,(IX+%FFFFFFF2)
000B00 CD 00 00 00         A  4725    	CALL	__icmpzero
000B04 28 09               A  4726    	JR	Z,L_140
                           A  4727    ;  576				ZFSClose( fileHandle2);
                           A  4728    .LINE 576
                           A  4729    
000B06 DD07F2              A  4730    	LD	BC,(IX+%FFFFFFF2)
000B09 C5                  A  4731    	PUSH	BC
000B0A CD 00 00 00         A  4732    	CALL	_ZFSClose
000B0E C1                  A  4733    	POP	BC
000B0F                     A  4734    L_140:
                           A  4735    ;  577			printf("\nFile is not copied, check whether directory exists or not or accessing an invalid volume\n");
                           A  4736    .LINE 577
                           A  4737    
000B0F 01 60 05 00         A  4738    	LD	BC,L__110
000B13 C5                  A  4739    	PUSH	BC
000B14 CD 00 00 00         A  4740    	CALL	_printf
000B18 C1                  A  4741    	POP	BC
                           A  4742    ;  578			ret_val = ZSHELL_FAILURE ;
                           A  4743    .LINE 578
                           A  4744    
000B19 DD36FBFF            A  4745    	LD	(IX+%FFFFFFFB),%FF
000B1D DD36FCFF            A  4746    	LD	(IX+%FFFFFFFC),%FF
000B21                     A  4747    L_105:
                           A  4748    ;  579			goto end_Shell_ZFSCopyMoveFile ;
                           A  4749    ;  580		}
                           A  4750    ;  581	
                           A  4751    ;  582	end_Shell_ZFSCopyMoveFile :
                           A  4752    ;  583		if( fileName )
                           A  4753    .LINE 583
                           A  4754    
000B21 DD27F8              A  4755    	LD	HL,(IX+%FFFFFFF8)
000B24 CD 00 00 00         A  4756    	CALL	__icmpzero
000B28 28 09               A  4757    	JR	Z,L_146
                           A  4758    ;  584			free( fileName ) ;
                           A  4759    .LINE 584
                           A  4760    
000B2A DD07F8              A  4761    	LD	BC,(IX+%FFFFFFF8)
000B2D C5                  A  4762    	PUSH	BC
000B2E CD 00 00 00         A  4763    	CALL	_free
000B32 C1                  A  4764    	POP	BC
000B33                     A  4765    L_146:
                           A  4766    ;  585		if( destnDir )
                           A  4767    .LINE 585
                           A  4768    
000B33 DD27FD              A  4769    	LD	HL,(IX+%FFFFFFFD)
000B36 CD 00 00 00         A  4770    	CALL	__icmpzero
000B3A 28 09               A  4771    	JR	Z,L_148
                           A  4772    ;  586			free( destnDir ) ;
                           A  4773    .LINE 586
                           A  4774    
000B3C DD07FD              A  4775    	LD	BC,(IX+%FFFFFFFD)
000B3F C5                  A  4776    	PUSH	BC
000B40 CD 00 00 00         A  4777    	CALL	_free
000B44 C1                  A  4778    	POP	BC
000B45                     A  4779    L_148:
                           A  4780    ;  587		if( fs_read_buffer )
                           A  4781    .LINE 587
                           A  4782    
000B45 DD27EF              A  4783    	LD	HL,(IX+%FFFFFFEF)
000B48 CD 00 00 00         A  4784    	CALL	__icmpzero
000B4C 28 09               A  4785    	JR	Z,L_149
                           A  4786    ;  588			free( fs_read_buffer ) ;
                           A  4787    .LINE 588
                           A  4788    
000B4E DD07EF              A  4789    	LD	BC,(IX+%FFFFFFEF)
000B51 C5                  A  4790    	PUSH	BC
000B52 CD 00 00 00         A  4791    	CALL	_free
000B56 C1                  A  4792    	POP	BC
000B57                     A  4793    L_149:
                           A  4794    ;  589		return ret_val ;
                           A  4795    .LINE 589
                           A  4796    
000B57 DD27FB              A  4797    	LD	HL,(IX+%FFFFFFFB)
                           A  4798    ;  590	}
000B5A                     A  4799    L_150:
                           A  4800    .LINE 590
                           A  4801    
000B5A DDF9                A  4802    	LD	SP,IX
000B5C DDE1                A  4803    	POP	IX
000B5E C9                  A  4804    	RET	
                           A  4805    
                           A  4806    
                           A  4807    ;**************************** _Shell_ZFSCopyMoveFile ***************************
                           A  4808    ;Name                         Addr/Register   Size   Type
                           A  4809    ;_free                               IMPORT  -----   function
                           A  4810    ;_ZFSDelete                          IMPORT  -----   function
                           A  4811    ;_strcmp                             IMPORT  -----   function
                           A  4812    ;_ZFSClose                           IMPORT  -----   function
                           A  4813    ;_ZFSWrite                           IMPORT  -----   function
                           A  4814    ;_ZFSRead                            IMPORT  -----   function
                           A  4815    ;_ZFSSeek                            IMPORT  -----   function
                           A  4816    ;_ZFSOpen                            IMPORT  -----   function
                           A  4817    ;_strcat                             IMPORT  -----   function
                           A  4818    ;_strlen                             IMPORT  -----   function
                           A  4819    ;_strcpy                             IMPORT  -----   function
                           A  4820    ;_memset                             IMPORT  -----   function
                           A  4821    ;_malloc                             IMPORT  -----   function
                           A  4822    ;_printf                             IMPORT  -----   function
                           A  4823    ;size                                 IX-38      4   variable
                           A  4824    ;status                               IX-34      3   variable
                           A  4825    ;numBytes                             IX-31      4   variable
                           A  4826    ;slashExist                           IX-27      1   variable
                           A  4827    ;path                                 IX-26      3   variable
                           A  4828    ;readCnt                              IX-23      4   variable
                           A  4829    ;len                                  IX-19      2   variable
                           A  4830    ;fs_read_buffer                       IX-17      3   variable
                           A  4831    ;fileHandle2                          IX-14      3   variable
                           A  4832    ;fileHandle1                          IX-11      3   variable
                           A  4833    ;fileName                              IX-8      3   variable
                           A  4834    ;ret_val                               IX-5      2   variable
                           A  4835    ;destnDir                              IX-3      3   variable
                           A  4836    ;argv                                 IX+21      3   parameter
                           A  4837    ;nargs                                IX+18      2   parameter
                           A  4838    ;stderr                               IX+15      3   parameter
                           A  4839    ;stdout                               IX+12      3   parameter
                           A  4840    ;stdin                                 IX+9      3   parameter
                           A  4841    ;Shl                                   IX+6      3   parameter
                           A  4842    
                           A  4843    
                           A  4844    ; Stack Frame Size: 62 (bytes)
                           A  4845    ;       Spill Code: 0 (instruction)
                           A  4846    
                           A  4847    
                           A  4848    .ENDFUNC "Shell_ZFSCopyMoveFile",590,"_Shell_ZFSCopyMoveFile"
                           A  4849    	SEGMENT STRSECT
0004B9                     A  4850    L__84:
0004B9 0A                  A  4851    	DB	10
0004BA 54686520 73796E74   A  4852    	DB	"The syntax of the command is incorrect"
0004C2 6178206F 66207468 
0004CA 6520636F 6D6D616E 
0004D2 64206973 20696E63 
0004DA 6F727265 6374 
0004E0 0A00                A  4853    	DB	10,0
0004E2                     A  4854    L__85:
0004E2 2573203C 73726320   A  4855    	DB	"%s <src file Name> <destnDirName>"
0004EA 66696C65 204E616D 
0004F2 653E203C 64657374 
0004FA 6E446972 4E616D65 
000502 3E 
000503 0A00                A  4856    	DB	10,0
000505                     A  4857    L__90:
000505 0A                  A  4858    	DB	10
000506 54686520 73706563   A  4859    	DB	"The specified file does not exist or accessing an invalid volume"
00050E 69666965 64206669 
000516 6C652064 6F657320 
00051E 6E6F7420 65786973 
000526 74206F72 20616363 
00052E 65737369 6E672061 
000536 6E20696E 76616C69 
00053E 6420766F 6C756D65 
000546 0A00                A  4860    	DB	10,0
000548                     A  4861    L__95:
000548 2F                  A  4862    	DB	"/"
000549 00                  A  4863    	DB	0
00054A                     A  4864    L__104:
00054A 6D6F7665            A  4865    	DB	"move"
00054E 00                  A  4866    	DB	0
00054F                     A  4867    L__107:
00054F 0A                  A  4868    	DB	10
000550 46696C65 20697320   A  4869    	DB	"File is copied"
000558 636F7069 6564 
00055E 0A00                A  4870    	DB	10,0
000560                     A  4871    L__110:
000560 0A                  A  4872    	DB	10
000561 46696C65 20697320   A  4873    	DB	"File is not copied, check whether directory exists or not or accessing an invalid volume"
000569 6E6F7420 636F7069 
000571 65642C20 63686563 
000579 6B207768 65746865 
000581 72206469 72656374 
000589 6F727920 65786973 
000591 7473206F 72206E6F 
000599 74206F72 20616363 
0005A1 65737369 6E672061 
0005A9 6E20696E 76616C69 
0005B1 6420766F 6C756D65 
0005B9 0A00                A  4874    	DB	10,0
                           A  4875    	SEGMENT CODE
                           A  4876    ;  591	
                           A  4877    ;  592	/* The following function is used to get the 
                           A  4878    ;  593	   current working directory
                           A  4879    ;  594	*/
                           A  4880    ;  595	INT16 Shell_ZFSGetCWD (
                           A  4881    ;  596		struct shvars *			Shl,
                           A  4882    ;  597		RZK_DEVICE_CB_t *						stdin,
                           A  4883    ;  598		RZK_DEVICE_CB_t *						stdout, 
                           A  4884    ;  599		RZK_DEVICE_CB_t *						stderr, 
                           A  4885    ;  600		UINT16					nargs,
                           A  4886    ;  601		INT8					*argv[]
                           A  4887    ;  602	)
                           A  4888    ;  603	{
000B5F                     A  4889    _Shell_ZFSGetCWD:
                           A  4890    .DEFINE "_Shell_ZFSGetCWD"
                           A  4891    
                           A  4892    .VALUE _Shell_ZFSGetCWD
                           A  4893    
                           A  4894    .CLASS 2
                           A  4895    
                           A  4896    .TYPE 67
                           A  4897    
                           A  4898    .ENDEF
                           A  4899    
                           A  4900    .BEGFUNC "Shell_ZFSGetCWD",603,"_Shell_ZFSGetCWD"
                           A  4901    
                           A  4902    .LINE 603
                           A  4903    
                           A  4904    .DEFINE "Shl"
                           A  4905    
                           A  4906    .CLASS 65
                           A  4907    
                           A  4908    .VALUE 6
                           A  4909    
                           A  4910    .TAG "shvars"
                           A  4911    
                           A  4912    .TYPE 40
                           A  4913    
                           A  4914    .ENDEF
                           A  4915    
                           A  4916    .DEFINE "stdin"
                           A  4917    
                           A  4918    .CLASS 65
                           A  4919    
                           A  4920    .VALUE 9
                           A  4921    
                           A  4922    .TAG "RZK_DEVICE_CB_t"
                           A  4923    
                           A  4924    .TYPE 40
                           A  4925    
                           A  4926    .ENDEF
                           A  4927    
                           A  4928    .DEFINE "stdout"
                           A  4929    
                           A  4930    .CLASS 65
                           A  4931    
                           A  4932    .VALUE 12
                           A  4933    
                           A  4934    .TAG "RZK_DEVICE_CB_t"
                           A  4935    
                           A  4936    .TYPE 40
                           A  4937    
                           A  4938    .ENDEF
                           A  4939    
                           A  4940    .DEFINE "stderr"
                           A  4941    
                           A  4942    .CLASS 65
                           A  4943    
                           A  4944    .VALUE 15
                           A  4945    
                           A  4946    .TAG "RZK_DEVICE_CB_t"
                           A  4947    
                           A  4948    .TYPE 40
                           A  4949    
                           A  4950    .ENDEF
                           A  4951    
                           A  4952    .DEFINE "nargs"
                           A  4953    
                           A  4954    .CLASS 65
                           A  4955    
                           A  4956    .VALUE 18
                           A  4957    
                           A  4958    .TYPE 13
                           A  4959    
                           A  4960    .ENDEF
                           A  4961    
                           A  4962    .DEFINE "argv"
                           A  4963    
                           A  4964    .CLASS 65
                           A  4965    
                           A  4966    .VALUE 21
                           A  4967    
                           A  4968    .TYPE 290
                           A  4969    
                           A  4970    .ENDEF
                           A  4971    
                           A  4972    .DEFINE "cwd"
                           A  4973    
                           A  4974    .CLASS 65
                           A  4975    
                           A  4976    .VALUE -3
                           A  4977    
                           A  4978    .TYPE 34
                           A  4979    
                           A  4980    .ENDEF
                           A  4981    
000B5F DDE5                A  4982    	PUSH	IX
000B61 DD210000 00         A  4983    	LD	IX,0
000B66 DD39                A  4984    	ADD	IX,SP
000B68 C5                  A  4985    	PUSH	BC
                           A  4986    ;  604		INT8 *cwd ;
                           A  4987    ;  605	
                           A  4988    ;  606		if( nargs > 1 )
                           A  4989    .LINE 606
                           A  4990    
000B69 DD0712              A  4991    	LD	BC,(IX+%12)
000B6C 49210100            A  4992    	LD.LIS	HL,1
000B70 B7                  A  4993    	OR	A,A
000B71 40ED42              A  4994    	SBC.SIS	HL,BC
000B74 30 1A               A  4995    	JR	NC,L_152
                           A  4996    ;  607		{
                           A  4997    ;  608			printf("\nThe syntax of the command is incorrect\n");
                           A  4998    .LINE 608
                           A  4999    
000B76 01 BB 05 00         A  5000    	LD	BC,L__116
000B7A C5                  A  5001    	PUSH	BC
000B7B CD 00 00 00         A  5002    	CALL	_printf
000B7F C1                  A  5003    	POP	BC
                           A  5004    ;  609			printf("cwd\n");
                           A  5005    .LINE 609
                           A  5006    
000B80 01 E4 05 00         A  5007    	LD	BC,L__117
000B84 C5                  A  5008    	PUSH	BC
000B85 CD 00 00 00         A  5009    	CALL	_printf
000B89 C1                  A  5010    	POP	BC
                           A  5011    ;  610			return ZSHELL_FAILURE ;
                           A  5012    .LINE 610
                           A  5013    
000B8A 4921FFFF            A  5014    	LD.LIS	HL,-1
000B8E 18 5E               A  5015    	JR	L_158
                           A  5016    ;  611		}
000B90                     A  5017    L_152:
                           A  5018    .LINE 611
                           A  5019    
                           A  5020    ;  612	
                           A  5021    ;  613		cwd = ( INT8 * ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  5022    .LINE 613
                           A  5023    
000B90 01000100            A  5024    	LD	BC,256
000B94 C5                  A  5025    	PUSH	BC
000B95 CD 00 00 00         A  5026    	CALL	_malloc
000B99 C1                  A  5027    	POP	BC
000B9A DD2FFD              A  5028    	LD	(IX+%FFFFFFFD),HL
                           A  5029    ;  614		if( cwd != NULL )
                           A  5030    .LINE 614
                           A  5031    
000B9D CD 00 00 00         A  5032    	CALL	__icmpzero
000BA1 28 48               A  5033    	JR	Z,L_157
                           A  5034    ;  615		{
                           A  5035    ;  616			memset( cwd, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  5036    .LINE 616
                           A  5037    
000BA3 01000100            A  5038    	LD	BC,256
000BA7 C5                  A  5039    	PUSH	BC
000BA8 01000000            A  5040    	LD	BC,0
000BAC C5                  A  5041    	PUSH	BC
000BAD DD07FD              A  5042    	LD	BC,(IX+%FFFFFFFD)
000BB0 C5                  A  5043    	PUSH	BC
000BB1 CD 00 00 00         A  5044    	CALL	_memset
000BB5 C1                  A  5045    	POP	BC
000BB6 C1                  A  5046    	POP	BC
000BB7 C1                  A  5047    	POP	BC
                           A  5048    ;  617			if( !( ZFSGetCwd( cwd) ) )
                           A  5049    .LINE 617
                           A  5050    
000BB8 DD07FD              A  5051    	LD	BC,(IX+%FFFFFFFD)
000BBB C5                  A  5052    	PUSH	BC
000BBC CD 00 00 00         A  5053    	CALL	_ZFSGetCwd
000BC0 C1                  A  5054    	POP	BC
000BC1 CD 00 00 00         A  5055    	CALL	__icmpzero
000BC5 20 11               A  5056    	JR	NZ,L_154
                           A  5057    ;  618			{
                           A  5058    ;  619				printf("\nCWD is %s\n", cwd);
                           A  5059    .LINE 619
                           A  5060    
000BC7 DD07FD              A  5061    	LD	BC,(IX+%FFFFFFFD)
000BCA C5                  A  5062    	PUSH	BC
000BCB 01 E9 05 00         A  5063    	LD	BC,L__120
000BCF C5                  A  5064    	PUSH	BC
000BD0 CD 00 00 00         A  5065    	CALL	_printf
000BD4 C1                  A  5066    	POP	BC
000BD5 C1                  A  5067    	POP	BC
                           A  5068    ;  620			}
                           A  5069    ;  621			else
                           A  5070    .LINE 621
                           A  5071    
000BD6 18 0A               A  5072    	JR	L_155
000BD8                     A  5073    L_154:
                           A  5074    ;  622			{
                           A  5075    ;  623				printf("\nUnable to get the CWD or accessing an invalid volume\n" ) ;
                           A  5076    .LINE 623
                           A  5077    
000BD8 01 F5 05 00         A  5078    	LD	BC,L__121
000BDC C5                  A  5079    	PUSH	BC
000BDD CD 00 00 00         A  5080    	CALL	_printf
000BE1 C1                  A  5081    	POP	BC
                           A  5082    ;  624			}
000BE2                     A  5083    L_155:
                           A  5084    .LINE 624
                           A  5085    
                           A  5086    ;  625			free( cwd ) ;
                           A  5087    .LINE 625
                           A  5088    
000BE2 DD07FD              A  5089    	LD	BC,(IX+%FFFFFFFD)
000BE5 C5                  A  5090    	PUSH	BC
000BE6 CD 00 00 00         A  5091    	CALL	_free
000BEA C1                  A  5092    	POP	BC
                           A  5093    ;  626		}
000BEB                     A  5094    L_157:
                           A  5095    .LINE 626
                           A  5096    
                           A  5097    ;  627		return ZSHELL_SUCCESS;
                           A  5098    .LINE 627
                           A  5099    
000BEB B7                  A  5100    	OR	A,A
000BEC ED62                A  5101    	SBC	HL,HL
                           A  5102    ;  628	}
000BEE                     A  5103    L_158:
                           A  5104    .LINE 628
                           A  5105    
000BEE DDF9                A  5106    	LD	SP,IX
000BF0 DDE1                A  5107    	POP	IX
000BF2 C9                  A  5108    	RET	
                           A  5109    
                           A  5110    
                           A  5111    ;**************************** _Shell_ZFSGetCWD ***************************
                           A  5112    ;Name                         Addr/Register   Size   Type
                           A  5113    ;_free                               IMPORT  -----   function
                           A  5114    ;_ZFSGetCwd                          IMPORT  -----   function
                           A  5115    ;_memset                             IMPORT  -----   function
                           A  5116    ;_malloc                             IMPORT  -----   function
                           A  5117    ;_printf                             IMPORT  -----   function
                           A  5118    ;cwd                                   IX-3      3   variable
                           A  5119    ;argv                                 IX+21      3   parameter
                           A  5120    ;nargs                                IX+18      2   parameter
                           A  5121    ;stderr                               IX+15      3   parameter
                           A  5122    ;stdout                               IX+12      3   parameter
                           A  5123    ;stdin                                 IX+9      3   parameter
                           A  5124    ;Shl                                   IX+6      3   parameter
                           A  5125    
                           A  5126    
                           A  5127    ; Stack Frame Size: 27 (bytes)
                           A  5128    ;       Spill Code: 0 (instruction)
                           A  5129    
                           A  5130    
                           A  5131    .ENDFUNC "Shell_ZFSGetCWD",628,"_Shell_ZFSGetCWD"
                           A  5132    	SEGMENT STRSECT
0005BB                     A  5133    L__116:
0005BB 0A                  A  5134    	DB	10
0005BC 54686520 73796E74   A  5135    	DB	"The syntax of the command is incorrect"
0005C4 6178206F 66207468 
0005CC 6520636F 6D6D616E 
0005D4 64206973 20696E63 
0005DC 6F727265 6374 
0005E2 0A00                A  5136    	DB	10,0
0005E4                     A  5137    L__117:
0005E4 637764              A  5138    	DB	"cwd"
0005E7 0A00                A  5139    	DB	10,0
0005E9                     A  5140    L__120:
0005E9 0A                  A  5141    	DB	10
0005EA 43574420 69732025   A  5142    	DB	"CWD is %s"
0005F2 73 
0005F3 0A00                A  5143    	DB	10,0
0005F5                     A  5144    L__121:
0005F5 0A                  A  5145    	DB	10
0005F6 556E6162 6C652074   A  5146    	DB	"Unable to get the CWD or accessing an invalid volume"
0005FE 6F206765 74207468 
000606 65204357 44206F72 
00060E 20616363 65737369 
000616 6E672061 6E20696E 
00061E 76616C69 6420766F 
000626 6C756D65 
00062A 0A00                A  5147    	DB	10,0
                           A  5148    	SEGMENT CODE
                           A  5149    ;  629	
                           A  5150    ;  630	/* The following function is used to list the directories 
                           A  5151    ;  631	   and files present in a folder */
                           A  5152    ;  632	INT16 Shell_ZFSListFileDirs (
                           A  5153    ;  633		struct shvars *			Shl,
                           A  5154    ;  634		RZK_DEVICE_CB_t *						stdin,
                           A  5155    ;  635		RZK_DEVICE_CB_t *						stdout, 
                           A  5156    ;  636		RZK_DEVICE_CB_t *						stderr, 
                           A  5157    ;  637		UINT16					nargs,
                           A  5158    ;  638		INT8					*argv[]
                           A  5159    ;  639	)
                           A  5160    ;  640	{
000BF3                     A  5161    _Shell_ZFSListFileDirs:
                           A  5162    .DEFINE "_Shell_ZFSListFileDirs"
                           A  5163    
                           A  5164    .VALUE _Shell_ZFSListFileDirs
                           A  5165    
                           A  5166    .CLASS 2
                           A  5167    
                           A  5168    .TYPE 67
                           A  5169    
                           A  5170    .ENDEF
                           A  5171    
                           A  5172    .BEGFUNC "Shell_ZFSListFileDirs",640,"_Shell_ZFSListFileDirs"
                           A  5173    
                           A  5174    .LINE 640
                           A  5175    
                           A  5176    .DEFINE "Shl"
                           A  5177    
                           A  5178    .CLASS 65
                           A  5179    
                           A  5180    .VALUE 6
                           A  5181    
                           A  5182    .TAG "shvars"
                           A  5183    
                           A  5184    .TYPE 40
                           A  5185    
                           A  5186    .ENDEF
                           A  5187    
                           A  5188    .DEFINE "stdin"
                           A  5189    
                           A  5190    .CLASS 65
                           A  5191    
                           A  5192    .VALUE 9
                           A  5193    
                           A  5194    .TAG "RZK_DEVICE_CB_t"
                           A  5195    
                           A  5196    .TYPE 40
                           A  5197    
                           A  5198    .ENDEF
                           A  5199    
                           A  5200    .DEFINE "stdout"
                           A  5201    
                           A  5202    .CLASS 65
                           A  5203    
                           A  5204    .VALUE 12
                           A  5205    
                           A  5206    .TAG "RZK_DEVICE_CB_t"
                           A  5207    
                           A  5208    .TYPE 40
                           A  5209    
                           A  5210    .ENDEF
                           A  5211    
                           A  5212    .DEFINE "stderr"
                           A  5213    
                           A  5214    .CLASS 65
                           A  5215    
                           A  5216    .VALUE 15
                           A  5217    
                           A  5218    .TAG "RZK_DEVICE_CB_t"
                           A  5219    
                           A  5220    .TYPE 40
                           A  5221    
                           A  5222    .ENDEF
                           A  5223    
                           A  5224    .DEFINE "nargs"
                           A  5225    
                           A  5226    .CLASS 65
                           A  5227    
                           A  5228    .VALUE 18
                           A  5229    
                           A  5230    .TYPE 13
                           A  5231    
                           A  5232    .ENDEF
                           A  5233    
                           A  5234    .DEFINE "argv"
                           A  5235    
                           A  5236    .CLASS 65
                           A  5237    
                           A  5238    .VALUE 21
                           A  5239    
                           A  5240    .TYPE 290
                           A  5241    
                           A  5242    .ENDEF
                           A  5243    
                           A  5244    .DEFINE "ptmp_fs_fd_list"
                           A  5245    
                           A  5246    .CLASS 65
                           A  5247    
                           A  5248    .VALUE -3
                           A  5249    
                           A  5250    .TAG "NONAME3"
                           A  5251    
                           A  5252    .TYPE 40
                           A  5253    
                           A  5254    .ENDEF
                           A  5255    
                           A  5256    .DEFINE "cwd"
                           A  5257    
                           A  5258    .CLASS 65
                           A  5259    
                           A  5260    .VALUE -6
                           A  5261    
                           A  5262    .TYPE 34
                           A  5263    
                           A  5264    .ENDEF
                           A  5265    
                           A  5266    .DEFINE "fd_cnt"
                           A  5267    
                           A  5268    .CLASS 65
                           A  5269    
                           A  5270    .VALUE -8
                           A  5271    
                           A  5272    .TYPE 3
                           A  5273    
                           A  5274    .ENDEF
                           A  5275    
                           A  5276    .DEFINE "pfs_fd_list"
                           A  5277    
                           A  5278    .CLASS 65
                           A  5279    
                           A  5280    .VALUE -11
                           A  5281    
                           A  5282    .TAG "NONAME3"
                           A  5283    
                           A  5284    .TYPE 40
                           A  5285    
                           A  5286    .ENDEF
                           A  5287    
                           A  5288    .DEFINE "initialDisplay"
                           A  5289    
                           A  5290    .CLASS 65
                           A  5291    
                           A  5292    .VALUE -12
                           A  5293    
                           A  5294    .TYPE 2
                           A  5295    
                           A  5296    .ENDEF
                           A  5297    
                           A  5298    .DEFINE "filecnt"
                           A  5299    
                           A  5300    .CLASS 65
                           A  5301    
                           A  5302    .VALUE -14
                           A  5303    
                           A  5304    .TYPE 3
                           A  5305    
                           A  5306    .ENDEF
                           A  5307    
                           A  5308    .DEFINE "numOfFiles"
                           A  5309    
                           A  5310    .CLASS 65
                           A  5311    
                           A  5312    .VALUE -16
                           A  5313    
                           A  5314    .TYPE 13
                           A  5315    
                           A  5316    .ENDEF
                           A  5317    
                           A  5318    .DEFINE "numOfDirs"
                           A  5319    
                           A  5320    .CLASS 65
                           A  5321    
                           A  5322    .VALUE -18
                           A  5323    
                           A  5324    .TYPE 13
                           A  5325    
                           A  5326    .ENDEF
                           A  5327    
                           A  5328    .DEFINE "fd_total_cnt"
                           A  5329    
                           A  5330    .CLASS 65
                           A  5331    
                           A  5332    .VALUE -20
                           A  5333    
                           A  5334    .TYPE 3
                           A  5335    
                           A  5336    .ENDEF
                           A  5337    
                           A  5338    .DEFINE "ret_val"
                           A  5339    
                           A  5340    .CLASS 65
                           A  5341    
                           A  5342    .VALUE -22
                           A  5343    
                           A  5344    .TYPE 3
                           A  5345    
                           A  5346    .ENDEF
                           A  5347    
                           A  5348    .DEFINE "size"
                           A  5349    
                           A  5350    .CLASS 65
                           A  5351    
                           A  5352    .VALUE -26
                           A  5353    
                           A  5354    .TYPE 15
                           A  5355    
                           A  5356    .ENDEF
                           A  5357    
000BF3 DDE5                A  5358    	PUSH	IX
000BF5 DD210000 00         A  5359    	LD	IX,0
000BFA DD39                A  5360    	ADD	IX,SP
000BFC ED22E6              A  5361    	LEA	HL,IX+%FFFFFFE6
000BFF F9                  A  5362    	LD	SP,HL
                           A  5363    ;  641		INT16 fd_cnt = 0;
                           A  5364    .LINE 641
                           A  5365    
000C00 DD36F800            A  5366    	LD	(IX+%FFFFFFF8),%0
000C04 DD36F900            A  5367    	LD	(IX+%FFFFFFF9),%0
                           A  5368    ;  642		INT16 filecnt;
                           A  5369    ;  643		INT8 *cwd ;
                           A  5370    ;  644		UINT32 size;
                           A  5371    ;  645		UINT16 numOfFiles = 0, numOfDirs=0;
                           A  5372    .LINE 645
                           A  5373    
000C08 DD36F000            A  5374    	LD	(IX+%FFFFFFF0),%0
000C0C DD36F100            A  5375    	LD	(IX+%FFFFFFF1),%0
000C10 DD36EE00            A  5376    	LD	(IX+%FFFFFFEE),%0
000C14 DD36EF00            A  5377    	LD	(IX+%FFFFFFEF),%0
                           A  5378    ;  646		
                           A  5379    ;  647		ZFS_FD_LIST_t    *pfs_fd_list, *ptmp_fs_fd_list ; 
                           A  5380    ;  648		INT16 fd_total_cnt = 0;
                           A  5381    .LINE 648
                           A  5382    
000C18 DD36EC00            A  5383    	LD	(IX+%FFFFFFEC),%0
000C1C DD36ED00            A  5384    	LD	(IX+%FFFFFFED),%0
                           A  5385    ;  649		INT8 initialDisplay = 1;
                           A  5386    .LINE 649
                           A  5387    
000C20 DD36F401            A  5388    	LD	(IX+%FFFFFFF4),%1
                           A  5389    ;  650		INT16 ret_val = ZSHELL_FAILURE ;
                           A  5390    .LINE 650
                           A  5391    
000C24 DD36EAFF            A  5392    	LD	(IX+%FFFFFFEA),%FF
000C28 DD36EBFF            A  5393    	LD	(IX+%FFFFFFEB),%FF
                           A  5394    ;  651			
                           A  5395    ;  652		if( nargs > 2 )
                           A  5396    .LINE 652
                           A  5397    
000C2C DD0712              A  5398    	LD	BC,(IX+%12)
000C2F 49210200            A  5399    	LD.LIS	HL,2
000C33 B7                  A  5400    	OR	A,A
000C34 40ED42              A  5401    	SBC.SIS	HL,BC
000C37 30 1C               A  5402    	JR	NC,L_160
                           A  5403    ;  653		{
                           A  5404    ;  654			printf("\nThe syntax of the command is incorrect\n");
                           A  5405    .LINE 654
                           A  5406    
000C39 01 2C 06 00         A  5407    	LD	BC,L__124
000C3D C5                  A  5408    	PUSH	BC
000C3E CD 00 00 00         A  5409    	CALL	_printf
000C42 C1                  A  5410    	POP	BC
                           A  5411    ;  655			printf("dir\n");
                           A  5412    .LINE 655
                           A  5413    
000C43 01 55 06 00         A  5414    	LD	BC,L__125
000C47 C5                  A  5415    	PUSH	BC
000C48 CD 00 00 00         A  5416    	CALL	_printf
000C4C C1                  A  5417    	POP	BC
                           A  5418    ;  656			return ZSHELL_FAILURE ;
                           A  5419    .LINE 656
                           A  5420    
000C4D 4921FFFF            A  5421    	LD.LIS	HL,-1
000C51 C3 E9 0E 00         A  5422    	JR	L_195
                           A  5423    ;  657		}
000C55                     A  5424    L_160:
                           A  5425    .LINE 657
                           A  5426    
                           A  5427    ;  658	
                           A  5428    ;  659		cwd = ( INT8 * ) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  5429    .LINE 659
                           A  5430    
000C55 01000100            A  5431    	LD	BC,256
000C59 C5                  A  5432    	PUSH	BC
000C5A CD 00 00 00         A  5433    	CALL	_malloc
000C5E C1                  A  5434    	POP	BC
000C5F DD2FFA              A  5435    	LD	(IX+%FFFFFFFA),HL
                           A  5436    ;  660		pfs_fd_list = ( ZFS_FD_LIST_t * ) malloc( sizeof( ZFS_FD_LIST_t) * 8 ) ;
                           A  5437    .LINE 660
                           A  5438    
000C62 01E80000            A  5439    	LD	BC,232
000C66 C5                  A  5440    	PUSH	BC
000C67 CD 00 00 00         A  5441    	CALL	_malloc
000C6B C1                  A  5442    	POP	BC
000C6C DD2FF5              A  5443    	LD	(IX+%FFFFFFF5),HL
                           A  5444    ;  661	
                           A  5445    ;  662		if( cwd == NULL || pfs_fd_list == NULL )
                           A  5446    .LINE 662
                           A  5447    
000C6F DD27FA              A  5448    	LD	HL,(IX+%FFFFFFFA)
000C72 CD 00 00 00         A  5449    	CALL	__icmpzero
000C76 CA C2 0E 00         A  5450    	JR	Z,L_162
000C7A DD27F5              A  5451    	LD	HL,(IX+%FFFFFFF5)
000C7D CD 00 00 00         A  5452    	CALL	__icmpzero
000C81 CA C2 0E 00         A  5453    	JR	Z,L_162
                           A  5454    ;  663		{
                           A  5455    ;  664			goto end_Shell_ZFSListFileDirs ;
                           A  5456    ;  665		}
                           A  5457    ;  666	
                           A  5458    ;  667		memset( cwd, 0x00, MAX_FILE_PATH_SIZE ) ;
                           A  5459    .LINE 667
                           A  5460    
000C85 01000100            A  5461    	LD	BC,256
000C89 C5                  A  5462    	PUSH	BC
000C8A 01000000            A  5463    	LD	BC,0
000C8E C5                  A  5464    	PUSH	BC
000C8F DD07FA              A  5465    	LD	BC,(IX+%FFFFFFFA)
000C92 C5                  A  5466    	PUSH	BC
000C93 CD 00 00 00         A  5467    	CALL	_memset
000C97 C1                  A  5468    	POP	BC
000C98 C1                  A  5469    	POP	BC
000C99 C1                  A  5470    	POP	BC
                           A  5471    ;  668	
                           A  5472    ;  669		if( nargs == 1 )
                           A  5473    .LINE 669
                           A  5474    
000C9A 49010100            A  5475    	LD.LIS	BC,1
000C9E DD2712              A  5476    	LD	HL,(IX+%12)
000CA1 B7                  A  5477    	OR	A,A
000CA2 40ED42              A  5478    	SBC.SIS	HL,BC
000CA5 20 11               A  5479    	JR	NZ,L_166
                           A  5480    ;  670		{
                           A  5481    ;  671			strcpy( (INT8 *)cwd, "./");
                           A  5482    .LINE 671
                           A  5483    
000CA7 01 5A 06 00         A  5484    	LD	BC,L__129
000CAB C5                  A  5485    	PUSH	BC
000CAC DD07FA              A  5486    	LD	BC,(IX+%FFFFFFFA)
000CAF C5                  A  5487    	PUSH	BC
000CB0 CD 00 00 00         A  5488    	CALL	_strcpy
000CB4 C1                  A  5489    	POP	BC
000CB5 C1                  A  5490    	POP	BC
                           A  5491    ;  672		}
                           A  5492    ;  673		else
                           A  5493    .LINE 673
                           A  5494    
000CB6 18 13               A  5495    	JR	L_187
000CB8                     A  5496    L_166:
                           A  5497    ;  674			strcpy( (INT8 *)cwd, (const INT8 *)argv[1] );
                           A  5498    .LINE 674
                           A  5499    
000CB8 DD3115              A  5500    	LD	IY,(IX+%15)
000CBB ED2303              A  5501    	LEA	HL,IY+%3
000CBE ED07                A  5502    	LD	BC,(HL)
000CC0 C5                  A  5503    	PUSH	BC
000CC1 DD07FA              A  5504    	LD	BC,(IX+%FFFFFFFA)
000CC4 C5                  A  5505    	PUSH	BC
000CC5 CD 00 00 00         A  5506    	CALL	_strcpy
000CC9 C1                  A  5507    	POP	BC
000CCA C1                  A  5508    	POP	BC
                           A  5509    ;  675			
                           A  5510    ;  676		do 
000CCB                     A  5511    L_187:
                           A  5512    .LINE 676
                           A  5513    
                           A  5514    ;  677		{
                           A  5515    ;  678			/** Get all files in the directory */
                           A  5516    ;  679			memset( pfs_fd_list, 0x00, 8 * sizeof( ZFS_FD_LIST_t) ) ;
                           A  5517    .LINE 679
                           A  5518    
000CCB 01E80000            A  5519    	LD	BC,232
000CCF C5                  A  5520    	PUSH	BC
000CD0 01000000            A  5521    	LD	BC,0
000CD4 C5                  A  5522    	PUSH	BC
000CD5 DD07F5              A  5523    	LD	BC,(IX+%FFFFFFF5)
000CD8 C5                  A  5524    	PUSH	BC
000CD9 CD 00 00 00         A  5525    	CALL	_memset
000CDD C1                  A  5526    	POP	BC
000CDE C1                  A  5527    	POP	BC
000CDF C1                  A  5528    	POP	BC
                           A  5529    ;  680			fd_cnt = ZFSList( cwd, pfs_fd_list, fd_total_cnt ) ;
                           A  5530    .LINE 680
                           A  5531    
000CE0 DD4EEC              A  5532    	LD	C,(IX+%FFFFFFEC)
000CE3 0600                A  5533    	LD	B,%0
000CE5 C5                  A  5534    	PUSH	BC
000CE6 DD07F5              A  5535    	LD	BC,(IX+%FFFFFFF5)
000CE9 C5                  A  5536    	PUSH	BC
000CEA DD07FA              A  5537    	LD	BC,(IX+%FFFFFFFA)
000CED C5                  A  5538    	PUSH	BC
000CEE CD 00 00 00         A  5539    	CALL	_ZFSList
000CF2 C1                  A  5540    	POP	BC
000CF3 C1                  A  5541    	POP	BC
000CF4 C1                  A  5542    	POP	BC
000CF5 DD75F8              A  5543    	LD	(IX+%FFFFFFF8),L
000CF8 DD74F9              A  5544    	LD	(IX+%FFFFFFF9),H
                           A  5545    ;  681			if( fd_cnt == 0 )
                           A  5546    .LINE 681
                           A  5547    
000CFB DD27F8              A  5548    	LD	HL,(IX+%FFFFFFF8)
000CFE CD 00 00 00         A  5549    	CALL	__scmpzero
000D02 20 1C               A  5550    	JR	NZ,L_173
                           A  5551    ;  682			{
                           A  5552    ;  683				if( initialDisplay )
                           A  5553    .LINE 683
                           A  5554    
000D04 DD7EF4              A  5555    	LD	A,(IX+%FFFFFFF4)
000D07 B7                  A  5556    	OR	A,A
000D08 28 42               A  5557    	JR	Z,L_175
                           A  5558    ;  684				{
                           A  5559    ;  685					printf("\nNo files exist\n");
                           A  5560    .LINE 685
                           A  5561    
000D0A 01 5D 06 00         A  5562    	LD	BC,L__132
000D0E C5                  A  5563    	PUSH	BC
000D0F CD 00 00 00         A  5564    	CALL	_printf
000D13 C1                  A  5565    	POP	BC
                           A  5566    ;  686					ret_val = ZSHELL_SUCCESS ;
                           A  5567    .LINE 686
                           A  5568    
000D14 DD36EA00            A  5569    	LD	(IX+%FFFFFFEA),%0
000D18 DD36EB00            A  5570    	LD	(IX+%FFFFFFEB),%0
                           A  5571    ;  687					goto end_Shell_ZFSListFileDirs ;
                           A  5572    .LINE 687
                           A  5573    
000D1C C3 C2 0E 00         A  5574    	JR	L_162
                           A  5575    ;  688				}
                           A  5576    ;  689	
                           A  5577    ;  690			}
                           A  5578    ;  691			else if (fd_cnt < 0 )
000D20                     A  5579    L_173:
                           A  5580    .LINE 691
                           A  5581    
000D20 DD27F8              A  5582    	LD	HL,(IX+%FFFFFFF8)
000D23 CD 00 00 00         A  5583    	CALL	__scmpzero
000D27 F2 4C 0D 00         A  5584    	JP	P,L_175
                           A  5585    ;  692			{
                           A  5586    ;  693				if( initialDisplay == 1 )
                           A  5587    .LINE 693
                           A  5588    
000D2B DD7EF4              A  5589    	LD	A,(IX+%FFFFFFF4)
000D2E FE01                A  5590    	CP	A,%1
000D30 20 0E               A  5591    	JR	NZ,L_169
                           A  5592    ;  694					printf("\nError in getting the directory contents\n");
                           A  5593    .LINE 694
                           A  5594    
000D32 01 6E 06 00         A  5595    	LD	BC,L__135
000D36 C5                  A  5596    	PUSH	BC
000D37 CD 00 00 00         A  5597    	CALL	_printf
000D3B C1                  A  5598    	POP	BC
                           A  5599    ;  695				else
                           A  5600    .LINE 695
                           A  5601    
000D3C C3 C2 0E 00         A  5602    	JR	L_162
000D40                     A  5603    L_169:
                           A  5604    ;  696					ret_val = ZSHELL_SUCCESS ;
                           A  5605    .LINE 696
                           A  5606    
000D40 DD36EA00            A  5607    	LD	(IX+%FFFFFFEA),%0
000D44 DD36EB00            A  5608    	LD	(IX+%FFFFFFEB),%0
                           A  5609    ;  697				goto end_Shell_ZFSListFileDirs ;
                           A  5610    .LINE 697
                           A  5611    
000D48 C3 C2 0E 00         A  5612    	JR	L_162
                           A  5613    ;  698			}			
000D4C                     A  5614    L_175:
                           A  5615    .LINE 698
                           A  5616    
                           A  5617    ;  699			if( initialDisplay )
                           A  5618    .LINE 699
                           A  5619    
000D4C DD7EF4              A  5620    	LD	A,(IX+%FFFFFFF4)
000D4F B7                  A  5621    	OR	A,A
000D50 28 22               A  5622    	JR	Z,L_176
                           A  5623    ;  700			{
                           A  5624    ;  701				printf("\n\n\n*******************************************************************************");
                           A  5625    .LINE 701
                           A  5626    
000D52 01 98 06 00         A  5627    	LD	BC,L__137
000D56 C5                  A  5628    	PUSH	BC
000D57 CD 00 00 00         A  5629    	CALL	_printf
000D5B C1                  A  5630    	POP	BC
                           A  5631    ;  702				printf("\nDATE\t\tTIME\t\tTYPE\tSIZE(bytes)\tNAME\n");
                           A  5632    .LINE 702
                           A  5633    
000D5C 01 EB 06 00         A  5634    	LD	BC,L__138
000D60 C5                  A  5635    	PUSH	BC
000D61 CD 00 00 00         A  5636    	CALL	_printf
000D65 C1                  A  5637    	POP	BC
                           A  5638    ;  703				printf("*******************************************************************************\n");
                           A  5639    .LINE 703
                           A  5640    
000D66 01 0F 07 00         A  5641    	LD	BC,L__139
000D6A C5                  A  5642    	PUSH	BC
000D6B CD 00 00 00         A  5643    	CALL	_printf
000D6F C1                  A  5644    	POP	BC
                           A  5645    ;  704				initialDisplay = 0;
                           A  5646    .LINE 704
                           A  5647    
000D70 DD36F400            A  5648    	LD	(IX+%FFFFFFF4),%0
                           A  5649    ;  705			}
000D74                     A  5650    L_176:
                           A  5651    .LINE 705
                           A  5652    
                           A  5653    ;  706			fd_total_cnt += fd_cnt ;
                           A  5654    .LINE 706
                           A  5655    
000D74 DD07F8              A  5656    	LD	BC,(IX+%FFFFFFF8)
000D77 DD27EC              A  5657    	LD	HL,(IX+%FFFFFFEC)
000D7A 4009                A  5658    	ADD.SIS	HL,BC
000D7C DD75EC              A  5659    	LD	(IX+%FFFFFFEC),L
000D7F DD74ED              A  5660    	LD	(IX+%FFFFFFED),H
                           A  5661    ;  707			ptmp_fs_fd_list = pfs_fd_list ;
                           A  5662    .LINE 707
                           A  5663    
000D82 DD07F5              A  5664    	LD	BC,(IX+%FFFFFFF5)
000D85 DD0FFD              A  5665    	LD	(IX+%FFFFFFFD),BC
                           A  5666    ;  708			
                           A  5667    ;  709			for( filecnt = 0 ; filecnt < fd_cnt ; filecnt++ )
                           A  5668    .LINE 709
                           A  5669    
000D88 DD36F200            A  5670    	LD	(IX+%FFFFFFF2),%0
000D8C DD36F300            A  5671    	LD	(IX+%FFFFFFF3),%0
000D90 C3 72 0E 00         A  5672    	JR	L_186
000D94                     A  5673    L_184:
                           A  5674    ;  710			{
                           A  5675    ;  711				/** Date Information */
                           A  5676    ;  712				printf("\n%02d/%02d/%04d \t", ptmp_fs_fd_list->fd_mon, ptmp_fs_fd_list->fd_day,(((UINT)ptmp_fs_fd_list->fd_century * 100 ) + ptmp_fs_fd_list->fd_year )); 
                           A  5677    .LINE 712
                           A  5678    
000D94 DD31FD              A  5679    	LD	IY,(IX+%FFFFFFFD)
000D97 FD7E1C              A  5680    	LD	A,(IY+%1C)
000D9A B7ED62              A  5681    	UEXT	HL
000D9D 6F                  A  5682    	LD	L,A
000D9E 3E64                A  5683    	LD	A,%64
000DA0 CD 00 00 00         A  5684    	CALL	__imul_b
000DA4 E5C1                A  5685    	LD	BC,HL
000DA6 FD7E1B              A  5686    	LD	A,(IY+%1B)
000DA9 B7ED62              A  5687    	UEXT	HL
000DAC 6F                  A  5688    	LD	L,A
000DAD 09                  A  5689    	ADD	HL,BC
000DAE E5                  A  5690    	PUSH	HL
000DAF FD7E19              A  5691    	LD	A,(IY+%19)
000DB2 B7ED62              A  5692    	UEXT	HL
000DB5 6F                  A  5693    	LD	L,A
000DB6 E5                  A  5694    	PUSH	HL
000DB7 FD7E1A              A  5695    	LD	A,(IY+%1A)
000DBA B7ED62              A  5696    	UEXT	HL
000DBD 6F                  A  5697    	LD	L,A
000DBE E5                  A  5698    	PUSH	HL
000DBF 01 60 07 00         A  5699    	LD	BC,L__140
000DC3 C5                  A  5700    	PUSH	BC
000DC4 CD 00 00 00         A  5701    	CALL	_printf
000DC8 C1                  A  5702    	POP	BC
000DC9 C1                  A  5703    	POP	BC
000DCA C1                  A  5704    	POP	BC
000DCB C1                  A  5705    	POP	BC
                           A  5706    ;  713	
                           A  5707    ;  714				/** Time information */
                           A  5708    ;  715				printf("%02d:%02d:%02d \t", ptmp_fs_fd_list->fd_hrs, ptmp_fs_fd_list->fd_min, ptmp_fs_fd_list->fd_sec);
                           A  5709    .LINE 715
                           A  5710    
000DCC DD31FD              A  5711    	LD	IY,(IX+%FFFFFFFD)
000DCF FD7E16              A  5712    	LD	A,(IY+%16)
000DD2 B7ED62              A  5713    	UEXT	HL
000DD5 6F                  A  5714    	LD	L,A
000DD6 E5                  A  5715    	PUSH	HL
000DD7 FD7E17              A  5716    	LD	A,(IY+%17)
000DDA B7ED62              A  5717    	UEXT	HL
000DDD 6F                  A  5718    	LD	L,A
000DDE E5                  A  5719    	PUSH	HL
000DDF FD7E18              A  5720    	LD	A,(IY+%18)
000DE2 B7ED62              A  5721    	UEXT	HL
000DE5 6F                  A  5722    	LD	L,A
000DE6 E5                  A  5723    	PUSH	HL
000DE7 01 72 07 00         A  5724    	LD	BC,L__141
000DEB C5                  A  5725    	PUSH	BC
000DEC CD 00 00 00         A  5726    	CALL	_printf
000DF0 C1                  A  5727    	POP	BC
000DF1 C1                  A  5728    	POP	BC
000DF2 C1                  A  5729    	POP	BC
000DF3 C1                  A  5730    	POP	BC
                           A  5731    ;  716				
                           A  5732    ;  717				/**  Get the size of the file */
                           A  5733    ;  718				if( ( (~(ptmp_fs_fd_list->fd_type)) & ZFS_FILE_TYPE ) == ZFS_FILE_TYPE )
                           A  5734    .LINE 718
                           A  5735    
000DF4 DD31FD              A  5736    	LD	IY,(IX+%FFFFFFFD)
000DF7 FD7E11              A  5737    	LD	A,(IY+%11)
000DFA B7ED62              A  5738    	UEXT	HL
000DFD 6F                  A  5739    	LD	L,A
000DFE CD 00 00 00         A  5740    	CALL	__inot
000E02 7D                  A  5741    	LD	A,L
000E03 E608                A  5742    	AND	A,%8
000E05 FE08                A  5743    	CP	A,%8
000E07 20 31               A  5744    	JR	NZ,L_181
                           A  5745    ;  719				{
                           A  5746    ;  720					size = (UINT32 )ptmp_fs_fd_list->fd_size;
                           A  5747    .LINE 720
                           A  5748    
000E09 DD31FD              A  5749    	LD	IY,(IX+%FFFFFFFD)
000E0C FD0712              A  5750    	LD	BC,(IY+%12)
000E0F FD7E15              A  5751    	LD	A,(IY+%15)
000E12 DD0FE6              A  5752    	LD	(IX+%FFFFFFE6),BC
000E15 DD77E9              A  5753    	LD	(IX+%FFFFFFE9),A
                           A  5754    ;  721	#ifdef _IAR_CODE
                           A  5755    ;  722					printf("\t%ld\t\t", size );
                           A  5756    ;  723	#else				
                           A  5757    ;  724					printf("\t%u\t\t", size );
                           A  5758    .LINE 724
                           A  5759    
000E18 DD4EE9              A  5760    	LD	C,(IX+%FFFFFFE9)
000E1B 0600                A  5761    	LD	B,%0
000E1D C5                  A  5762    	PUSH	BC
000E1E DD07E6              A  5763    	LD	BC,(IX+%FFFFFFE6)
000E21 C5                  A  5764    	PUSH	BC
000E22 01 83 07 00         A  5765    	LD	BC,L__143
000E26 C5                  A  5766    	PUSH	BC
000E27 CD 00 00 00         A  5767    	CALL	_printf
000E2B C1                  A  5768    	POP	BC
000E2C C1                  A  5769    	POP	BC
000E2D C1                  A  5770    	POP	BC
                           A  5771    ;  725	#endif				
                           A  5772    ;  726					numOfFiles++;
                           A  5773    .LINE 726
                           A  5774    
000E2E DD27F0              A  5775    	LD	HL,(IX+%FFFFFFF0)
000E31 23                  A  5776    	INC	HL
000E32 DD75F0              A  5777    	LD	(IX+%FFFFFFF0),L
000E35 DD74F1              A  5778    	LD	(IX+%FFFFFFF1),H
                           A  5779    ;  727				}
                           A  5780    ;  728				else
                           A  5781    .LINE 728
                           A  5782    
000E38 18 14               A  5783    	JR	L_182
000E3A                     A  5784    L_181:
                           A  5785    ;  729				{
                           A  5786    ;  730					printf("<DIR>\t\t\t");
                           A  5787    .LINE 730
                           A  5788    
000E3A 01 89 07 00         A  5789    	LD	BC,L__144
000E3E C5                  A  5790    	PUSH	BC
000E3F CD 00 00 00         A  5791    	CALL	_printf
000E43 C1                  A  5792    	POP	BC
                           A  5793    ;  731					numOfDirs++;
                           A  5794    .LINE 731
                           A  5795    
000E44 DD27EE              A  5796    	LD	HL,(IX+%FFFFFFEE)
000E47 23                  A  5797    	INC	HL
000E48 DD75EE              A  5798    	LD	(IX+%FFFFFFEE),L
000E4B DD74EF              A  5799    	LD	(IX+%FFFFFFEF),H
                           A  5800    ;  732				}
000E4E                     A  5801    L_182:
                           A  5802    .LINE 732
                           A  5803    
                           A  5804    ;  733	
                           A  5805    ;  734				printf("%s",ptmp_fs_fd_list->fd_name);
                           A  5806    .LINE 734
                           A  5807    
000E4E DD31FD              A  5808    	LD	IY,(IX+%FFFFFFFD)
000E51 ED6600              A  5809    	PEA	IY+%0
000E54 01 92 07 00         A  5810    	LD	BC,L__145
000E58 C5                  A  5811    	PUSH	BC
000E59 CD 00 00 00         A  5812    	CALL	_printf
000E5D C1                  A  5813    	POP	BC
000E5E C1                  A  5814    	POP	BC
                           A  5815    ;  735				ptmp_fs_fd_list++;
                           A  5816    .LINE 735
                           A  5817    
000E5F DD31FD              A  5818    	LD	IY,(IX+%FFFFFFFD)
000E62 ED331D              A  5819    	LEA	IY,IY+%1D
000E65 DD3EFD              A  5820    	LD	(IX+%FFFFFFFD),IY
000E68 DD27F2              A  5821    	LD	HL,(IX+%FFFFFFF2)
000E6B 23                  A  5822    	INC	HL
000E6C DD75F2              A  5823    	LD	(IX+%FFFFFFF2),L
000E6F DD74F3              A  5824    	LD	(IX+%FFFFFFF3),H
                           A  5825    ;  736				
                           A  5826    ;  737				
                           A  5827    ;  738			}
000E72                     A  5828    L_186:
                           A  5829    .LINE 738
                           A  5830    
000E72 DD07F8              A  5831    	LD	BC,(IX+%FFFFFFF8)
000E75 DD27F2              A  5832    	LD	HL,(IX+%FFFFFFF2)
000E78 B7                  A  5833    	OR	A,A
000E79 40ED42              A  5834    	SBC.SIS	HL,BC
000E7C FA 94 0D 00         A  5835    	JP	M,L_184
                           A  5836    ;  739	//		if( fd_cnt < 8 )
                           A  5837    ;  740	//			break ;
                           A  5838    ;  741		}while(fd_cnt > 0 );
                           A  5839    .LINE 741
                           A  5840    
000E80 DD07F8              A  5841    	LD	BC,(IX+%FFFFFFF8)
000E83 B7                  A  5842    	OR	A,A
000E84 ED62                A  5843    	SBC	HL,HL
000E86 B7                  A  5844    	OR	A,A
000E87 40ED42              A  5845    	SBC.SIS	HL,BC
000E8A CD 00 00 00         A  5846    	CALL	__setflag
000E8E FA CB 0C 00         A  5847    	JP	M,L_187
                           A  5848    ;  742		
                           A  5849    ;  743		printf("\n\n\n\n\t\tNumber of File<s> %d",numOfFiles);
                           A  5850    .LINE 743
                           A  5851    
000E92 DD07F0              A  5852    	LD	BC,(IX+%FFFFFFF0)
000E95 CD 00 00 00         A  5853    	CALL	__stoiu
000E99 E5                  A  5854    	PUSH	HL
000E9A 01 95 07 00         A  5855    	LD	BC,L__148
000E9E C5                  A  5856    	PUSH	BC
000E9F CD 00 00 00         A  5857    	CALL	_printf
000EA3 C1                  A  5858    	POP	BC
000EA4 C1                  A  5859    	POP	BC
                           A  5860    ;  744		printf("\n\t\tNumber of Dir<s> %d ",numOfDirs);
                           A  5861    .LINE 744
                           A  5862    
000EA5 DD07EE              A  5863    	LD	BC,(IX+%FFFFFFEE)
000EA8 CD 00 00 00         A  5864    	CALL	__stoiu
000EAC E5                  A  5865    	PUSH	HL
000EAD 01 B0 07 00         A  5866    	LD	BC,L__149
000EB1 C5                  A  5867    	PUSH	BC
000EB2 CD 00 00 00         A  5868    	CALL	_printf
000EB6 C1                  A  5869    	POP	BC
000EB7 C1                  A  5870    	POP	BC
                           A  5871    ;  745		printf("\n*******************************************************************************\n");
                           A  5872    .LINE 745
                           A  5873    
000EB8 01 C8 07 00         A  5874    	LD	BC,L__150
000EBC C5                  A  5875    	PUSH	BC
000EBD CD 00 00 00         A  5876    	CALL	_printf
000EC1 C1                  A  5877    	POP	BC
000EC2                     A  5878    L_162:
                           A  5879    ;  746	end_Shell_ZFSListFileDirs :
                           A  5880    ;  747		if( cwd )
                           A  5881    .LINE 747
                           A  5882    
000EC2 DD27FA              A  5883    	LD	HL,(IX+%FFFFFFFA)
000EC5 CD 00 00 00         A  5884    	CALL	__icmpzero
000EC9 28 09               A  5885    	JR	Z,L_193
                           A  5886    ;  748			free( cwd ) ;
                           A  5887    .LINE 748
                           A  5888    
000ECB DD07FA              A  5889    	LD	BC,(IX+%FFFFFFFA)
000ECE C5                  A  5890    	PUSH	BC
000ECF CD 00 00 00         A  5891    	CALL	_free
000ED3 C1                  A  5892    	POP	BC
000ED4                     A  5893    L_193:
                           A  5894    ;  749		if( pfs_fd_list )
                           A  5895    .LINE 749
                           A  5896    
000ED4 DD27F5              A  5897    	LD	HL,(IX+%FFFFFFF5)
000ED7 CD 00 00 00         A  5898    	CALL	__icmpzero
000EDB 28 09               A  5899    	JR	Z,L_194
                           A  5900    ;  750			free( pfs_fd_list ) ;
                           A  5901    .LINE 750
                           A  5902    
000EDD DD07F5              A  5903    	LD	BC,(IX+%FFFFFFF5)
000EE0 C5                  A  5904    	PUSH	BC
000EE1 CD 00 00 00         A  5905    	CALL	_free
000EE5 C1                  A  5906    	POP	BC
000EE6                     A  5907    L_194:
                           A  5908    ;  751		return ret_val ;
                           A  5909    .LINE 751
                           A  5910    
000EE6 DD27EA              A  5911    	LD	HL,(IX+%FFFFFFEA)
                           A  5912    ;  752	}
000EE9                     A  5913    L_195:
                           A  5914    .LINE 752
                           A  5915    
000EE9 DDF9                A  5916    	LD	SP,IX
000EEB DDE1                A  5917    	POP	IX
000EED C9                  A  5918    	RET	
                           A  5919    
                           A  5920    
                           A  5921    ;**************************** _Shell_ZFSListFileDirs ***************************
                           A  5922    ;Name                         Addr/Register   Size   Type
                           A  5923    ;_free                               IMPORT  -----   function
                           A  5924    ;_ZFSList                            IMPORT  -----   function
                           A  5925    ;_strcpy                             IMPORT  -----   function
                           A  5926    ;_memset                             IMPORT  -----   function
                           A  5927    ;_malloc                             IMPORT  -----   function
                           A  5928    ;_printf                             IMPORT  -----   function
                           A  5929    ;size                                 IX-26      4   variable
                           A  5930    ;ret_val                              IX-22      2   variable
                           A  5931    ;fd_total_cnt                         IX-20      2   variable
                           A  5932    ;numOfDirs                            IX-18      2   variable
                           A  5933    ;numOfFiles                           IX-16      2   variable
                           A  5934    ;filecnt                              IX-14      2   variable
                           A  5935    ;initialDisplay                       IX-12      1   variable
                           A  5936    ;pfs_fd_list                          IX-11      3   variable
                           A  5937    ;fd_cnt                                IX-8      2   variable
                           A  5938    ;cwd                                   IX-6      3   variable
                           A  5939    ;ptmp_fs_fd_list                       IX-3      3   variable
                           A  5940    ;argv                                 IX+21      3   parameter
                           A  5941    ;nargs                                IX+18      2   parameter
                           A  5942    ;stderr                               IX+15      3   parameter
                           A  5943    ;stdout                               IX+12      3   parameter
                           A  5944    ;stdin                                 IX+9      3   parameter
                           A  5945    ;Shl                                   IX+6      3   parameter
                           A  5946    
                           A  5947    
                           A  5948    ; Stack Frame Size: 50 (bytes)
                           A  5949    ;       Spill Code: 0 (instruction)
                           A  5950    
                           A  5951    
                           A  5952    .ENDFUNC "Shell_ZFSListFileDirs",752,"_Shell_ZFSListFileDirs"
                           A  5953    	SEGMENT STRSECT
00062C                     A  5954    L__124:
00062C 0A                  A  5955    	DB	10
00062D 54686520 73796E74   A  5956    	DB	"The syntax of the command is incorrect"
000635 6178206F 66207468 
00063D 6520636F 6D6D616E 
000645 64206973 20696E63 
00064D 6F727265 6374 
000653 0A00                A  5957    	DB	10,0
000655                     A  5958    L__125:
000655 646972              A  5959    	DB	"dir"
000658 0A00                A  5960    	DB	10,0
00065A                     A  5961    L__129:
00065A 2E2F                A  5962    	DB	"./"
00065C 00                  A  5963    	DB	0
00065D                     A  5964    L__132:
00065D 0A                  A  5965    	DB	10
00065E 4E6F2066 696C6573   A  5966    	DB	"No files exist"
000666 20657869 7374 
00066C 0A00                A  5967    	DB	10,0
00066E                     A  5968    L__135:
00066E 0A                  A  5969    	DB	10
00066F 4572726F 7220696E   A  5970    	DB	"Error in getting the directory contents"
000677 20676574 74696E67 
00067F 20746865 20646972 
000687 6563746F 72792063 
00068F 6F6E7465 6E7473 
000696 0A00                A  5971    	DB	10,0
000698                     A  5972    L__137:
000698 0A0A0A              A  5973    	DB	10,10,10
00069B 2A2A2A2A 2A2A2A2A   A  5974    	DB	"*******************************************************************************"
0006A3 2A2A2A2A 2A2A2A2A 
0006AB 2A2A2A2A 2A2A2A2A 
0006B3 2A2A2A2A 2A2A2A2A 
0006BB 2A2A2A2A 2A2A2A2A 
0006C3 2A2A2A2A 2A2A2A2A 
0006CB 2A2A2A2A 2A2A2A2A 
0006D3 2A2A2A2A 2A2A2A2A 
0006DB 2A2A2A2A 2A2A2A2A 
0006E3 2A2A2A2A 2A2A2A 
0006EA 00                  A  5975    	DB	0
0006EB                     A  5976    L__138:
0006EB 0A                  A  5977    	DB	10
0006EC 44415445            A  5978    	DB	"DATE"
0006F0 0909                A  5979    	DB	9,9
0006F2 54494D45            A  5980    	DB	"TIME"
0006F6 0909                A  5981    	DB	9,9
0006F8 54595045            A  5982    	DB	"TYPE"
0006FC 09                  A  5983    	DB	9
0006FD 53495A45 28627974   A  5984    	DB	"SIZE(bytes)"
000705 657329 
000708 09                  A  5985    	DB	9
000709 4E414D45            A  5986    	DB	"NAME"
00070D 0A00                A  5987    	DB	10,0
00070F                     A  5988    L__139:
00070F 2A2A2A2A 2A2A2A2A   A  5989    	DB	"*******************************************************************************"
000717 2A2A2A2A 2A2A2A2A 
00071F 2A2A2A2A 2A2A2A2A 
000727 2A2A2A2A 2A2A2A2A 
00072F 2A2A2A2A 2A2A2A2A 
000737 2A2A2A2A 2A2A2A2A 
00073F 2A2A2A2A 2A2A2A2A 
000747 2A2A2A2A 2A2A2A2A 
00074F 2A2A2A2A 2A2A2A2A 
000757 2A2A2A2A 2A2A2A 
00075E 0A00                A  5990    	DB	10,0
000760                     A  5991    L__140:
000760 0A                  A  5992    	DB	10
000761 25303264 2F253032   A  5993    	DB	"%02d/%02d/%04d "
000769 642F2530 346420 
000770 0900                A  5994    	DB	9,0
000772                     A  5995    L__141:
000772 25303264 3A253032   A  5996    	DB	"%02d:%02d:%02d "
00077A 643A2530 326420 
000781 0900                A  5997    	DB	9,0
000783                     A  5998    L__143:
000783 09                  A  5999    	DB	9
000784 2575                A  6000    	DB	"%u"
000786 090900              A  6001    	DB	9,9,0
000789                     A  6002    L__144:
000789 3C444952 3E         A  6003    	DB	"<DIR>"
00078E 09090900            A  6004    	DB	9,9,9,0
000792                     A  6005    L__145:
000792 2573                A  6006    	DB	"%s"
000794 00                  A  6007    	DB	0
000795                     A  6008    L__148:
000795 0A0A0A0A 0909       A  6009    	DB	10,10,10,10,9,9
00079B 4E756D62 6572206F   A  6010    	DB	"Number of File<s> %d"
0007A3 66204669 6C653C73 
0007AB 3E202564 
0007AF 00                  A  6011    	DB	0
0007B0                     A  6012    L__149:
0007B0 0A0909              A  6013    	DB	10,9,9
0007B3 4E756D62 6572206F   A  6014    	DB	"Number of Dir<s> %d "
0007BB 66204469 723C733E 
0007C3 20256420 
0007C7 00                  A  6015    	DB	0
0007C8                     A  6016    L__150:
0007C8 0A                  A  6017    	DB	10
0007C9 2A2A2A2A 2A2A2A2A   A  6018    	DB	"*******************************************************************************"
0007D1 2A2A2A2A 2A2A2A2A 
0007D9 2A2A2A2A 2A2A2A2A 
0007E1 2A2A2A2A 2A2A2A2A 
0007E9 2A2A2A2A 2A2A2A2A 
0007F1 2A2A2A2A 2A2A2A2A 
0007F9 2A2A2A2A 2A2A2A2A 
000801 2A2A2A2A 2A2A2A2A 
000809 2A2A2A2A 2A2A2A2A 
000811 2A2A2A2A 2A2A2A 
000818 0A00                A  6019    	DB	10,0
                           A  6020    	SEGMENT CODE
                           A  6021    ;  753	
                           A  6022    ;  754	/* The following function is used to display the contents
                           A  6023    ;  755	   of the specified file */
                           A  6024    ;  756	INT16 Shell_ZFSDispFile (
                           A  6025    ;  757		struct shvars *			Shl,
                           A  6026    ;  758		RZK_DEVICE_CB_t *						stdin,
                           A  6027    ;  759		RZK_DEVICE_CB_t *						stdout, 
                           A  6028    ;  760		RZK_DEVICE_CB_t *						stderr, 
                           A  6029    ;  761		UINT16					nargs,
                           A  6030    ;  762		INT8					*argv[]
                           A  6031    ;  763	)
                           A  6032    ;  764	{
000EEE                     A  6033    _Shell_ZFSDispFile:
                           A  6034    .DEFINE "_Shell_ZFSDispFile"
                           A  6035    
                           A  6036    .VALUE _Shell_ZFSDispFile
                           A  6037    
                           A  6038    .CLASS 2
                           A  6039    
                           A  6040    .TYPE 67
                           A  6041    
                           A  6042    .ENDEF
                           A  6043    
                           A  6044    .BEGFUNC "Shell_ZFSDispFile",764,"_Shell_ZFSDispFile"
                           A  6045    
                           A  6046    .LINE 764
                           A  6047    
                           A  6048    .DEFINE "Shl"
                           A  6049    
                           A  6050    .CLASS 65
                           A  6051    
                           A  6052    .VALUE 6
                           A  6053    
                           A  6054    .TAG "shvars"
                           A  6055    
                           A  6056    .TYPE 40
                           A  6057    
                           A  6058    .ENDEF
                           A  6059    
                           A  6060    .DEFINE "stdin"
                           A  6061    
                           A  6062    .CLASS 65
                           A  6063    
                           A  6064    .VALUE 9
                           A  6065    
                           A  6066    .TAG "RZK_DEVICE_CB_t"
                           A  6067    
                           A  6068    .TYPE 40
                           A  6069    
                           A  6070    .ENDEF
                           A  6071    
                           A  6072    .DEFINE "stdout"
                           A  6073    
                           A  6074    .CLASS 65
                           A  6075    
                           A  6076    .VALUE 12
                           A  6077    
                           A  6078    .TAG "RZK_DEVICE_CB_t"
                           A  6079    
                           A  6080    .TYPE 40
                           A  6081    
                           A  6082    .ENDEF
                           A  6083    
                           A  6084    .DEFINE "stderr"
                           A  6085    
                           A  6086    .CLASS 65
                           A  6087    
                           A  6088    .VALUE 15
                           A  6089    
                           A  6090    .TAG "RZK_DEVICE_CB_t"
                           A  6091    
                           A  6092    .TYPE 40
                           A  6093    
                           A  6094    .ENDEF
                           A  6095    
                           A  6096    .DEFINE "nargs"
                           A  6097    
                           A  6098    .CLASS 65
                           A  6099    
                           A  6100    .VALUE 18
                           A  6101    
                           A  6102    .TYPE 13
                           A  6103    
                           A  6104    .ENDEF
                           A  6105    
                           A  6106    .DEFINE "argv"
                           A  6107    
                           A  6108    .CLASS 65
                           A  6109    
                           A  6110    .VALUE 21
                           A  6111    
                           A  6112    .TYPE 290
                           A  6113    
                           A  6114    .ENDEF
                           A  6115    
                           A  6116    .DEFINE "fs_read_buffer"
                           A  6117    
                           A  6118    .CLASS 65
                           A  6119    
                           A  6120    .VALUE -3
                           A  6121    
                           A  6122    .TYPE 44
                           A  6123    
                           A  6124    .ENDEF
                           A  6125    
                           A  6126    .DEFINE "fileName"
                           A  6127    
                           A  6128    .CLASS 65
                           A  6129    
                           A  6130    .VALUE -6
                           A  6131    
                           A  6132    .TYPE 34
                           A  6133    
                           A  6134    .ENDEF
                           A  6135    
                           A  6136    .DEFINE "fileHandle1"
                           A  6137    
                           A  6138    .CLASS 65
                           A  6139    
                           A  6140    .VALUE -9
                           A  6141    
                           A  6142    .TYPE 33
                           A  6143    
                           A  6144    .ENDEF
                           A  6145    
                           A  6146    .DEFINE "ret_val"
                           A  6147    
                           A  6148    .CLASS 65
                           A  6149    
                           A  6150    .VALUE -11
                           A  6151    
                           A  6152    .TYPE 3
                           A  6153    
                           A  6154    .ENDEF
                           A  6155    
                           A  6156    .DEFINE "numBytes"
                           A  6157    
                           A  6158    .CLASS 65
                           A  6159    
                           A  6160    .VALUE -15
                           A  6161    
                           A  6162    .TYPE 15
                           A  6163    
                           A  6164    .ENDEF
                           A  6165    
                           A  6166    .DEFINE "readCnt"
                           A  6167    
                           A  6168    .CLASS 65
                           A  6169    
                           A  6170    .VALUE -19
                           A  6171    
                           A  6172    .TYPE 15
                           A  6173    
                           A  6174    .ENDEF
                           A  6175    
                           A  6176    .DEFINE "size"
                           A  6177    
                           A  6178    .CLASS 65
                           A  6179    
                           A  6180    .VALUE -23
                           A  6181    
                           A  6182    .TYPE 15
                           A  6183    
                           A  6184    .ENDEF
                           A  6185    
000EEE DDE5                A  6186    	PUSH	IX
000EF0 DD210000 00         A  6187    	LD	IX,0
000EF5 DD39                A  6188    	ADD	IX,SP
000EF7 ED22E9              A  6189    	LEA	HL,IX+%FFFFFFE9
000EFA F9                  A  6190    	LD	SP,HL
                           A  6191    ;  765		/** Get the directory name and the file name separately */
                           A  6192    ;  766		/** Get the size of all the files using ZFSList API present in the directory */
                           A  6193    ;  767		/** Compare the file sent by the application with the one got from the ZFSList API */
                           A  6194    ;  768		/** Open the file */
                           A  6195    ;  769		/** Read the contents into one buffer */
                           A  6196    ;  770		/** Close the file */
                           A  6197    ;  771		/** Create a file in the destonation directory specified by the application */
                           A  6198    ;  772		/** Write the contents in to the destination file from the buffer */
                           A  6199    ;  773		/** Close the file */
                           A  6200    ;  774	
                           A  6201    ;  775		INT8 *fileName ;
                           A  6202    ;  776		UINT32 numBytes;
                           A  6203    ;  777		UINT32 size;
                           A  6204    ;  778		ZFS_HANDLE_t fileHandle1 ;
                           A  6205    ;  779	
                           A  6206    ;  780		UINT32 readCnt = 0;
                           A  6207    .LINE 780
                           A  6208    
000EFB 01000000            A  6209    	LD	BC,0
000EFF AF                  A  6210    	XOR	A,A
000F00 DD0FED              A  6211    	LD	(IX+%FFFFFFED),BC
000F03 DD77F0              A  6212    	LD	(IX+%FFFFFFF0),A
                           A  6213    ;  781		UINT8  *fs_read_buffer ;
                           A  6214    ;  782		INT16 ret_val = ZSHELL_FAILURE ;
                           A  6215    .LINE 782
                           A  6216    
000F06 DD36F5FF            A  6217    	LD	(IX+%FFFFFFF5),%FF
000F0A DD36F6FF            A  6218    	LD	(IX+%FFFFFFF6),%FF
                           A  6219    ;  783	
                           A  6220    ;  784		if( nargs != 2 )
                           A  6221    .LINE 784
                           A  6222    
000F0E 49010200            A  6223    	LD.LIS	BC,2
000F12 DD2712              A  6224    	LD	HL,(IX+%12)
000F15 B7                  A  6225    	OR	A,A
000F16 40ED42              A  6226    	SBC.SIS	HL,BC
000F19 28 1C               A  6227    	JR	Z,L_197
                           A  6228    ;  785		{
                           A  6229    ;  786			printf("\nThe syntax of the command is incorrect\n");
                           A  6230    .LINE 786
                           A  6231    
000F1B 01 1A 08 00         A  6232    	LD	BC,L__155
000F1F C5                  A  6233    	PUSH	BC
000F20 CD 00 00 00         A  6234    	CALL	_printf
000F24 C1                  A  6235    	POP	BC
                           A  6236    ;  787			printf("type <file Name>\n");
                           A  6237    .LINE 787
                           A  6238    
000F25 01 43 08 00         A  6239    	LD	BC,L__156
000F29 C5                  A  6240    	PUSH	BC
000F2A CD 00 00 00         A  6241    	CALL	_printf
000F2E C1                  A  6242    	POP	BC
                           A  6243    ;  788			return ZSHELL_FAILURE ;
                           A  6244    .LINE 788
                           A  6245    
000F2F 4921FFFF            A  6246    	LD.LIS	HL,-1
000F33 C3 61 10 00         A  6247    	JR	L_215
                           A  6248    ;  789		}
000F37                     A  6249    L_197:
                           A  6250    .LINE 789
                           A  6251    
                           A  6252    ;  790	
                           A  6253    ;  791		fileName = ( INT8 * )malloc( MAX_FILE_PATH_SIZE );
                           A  6254    .LINE 791
                           A  6255    
000F37 01000100            A  6256    	LD	BC,256
000F3B C5                  A  6257    	PUSH	BC
000F3C CD 00 00 00         A  6258    	CALL	_malloc
000F40 C1                  A  6259    	POP	BC
000F41 DD2FFA              A  6260    	LD	(IX+%FFFFFFFA),HL
                           A  6261    ;  792		fs_read_buffer = ( UINT8 * )malloc( 2 * MAX_FILE_PATH_SIZE ) ;
                           A  6262    .LINE 792
                           A  6263    
000F44 01000200            A  6264    	LD	BC,512
000F48 C5                  A  6265    	PUSH	BC
000F49 CD 00 00 00         A  6266    	CALL	_malloc
000F4D C1                  A  6267    	POP	BC
000F4E DD2FFD              A  6268    	LD	(IX+%FFFFFFFD),HL
                           A  6269    ;  793	
                           A  6270    ;  794		if( fileName == NULL || fs_read_buffer == NULL )
                           A  6271    .LINE 794
                           A  6272    
000F51 DD27FA              A  6273    	LD	HL,(IX+%FFFFFFFA)
000F54 CD 00 00 00         A  6274    	CALL	__icmpzero
000F58 CA 3A 10 00         A  6275    	JR	Z,L_199
000F5C DD27FD              A  6276    	LD	HL,(IX+%FFFFFFFD)
000F5F CD 00 00 00         A  6277    	CALL	__icmpzero
000F63 CA 3A 10 00         A  6278    	JR	Z,L_199
                           A  6279    ;  795		{
                           A  6280    ;  796			goto end_Shell_ZFSDispFile ;
                           A  6281    ;  797		}
                           A  6282    ;  798		if( Shell_ZFSGetList( fileName, argv, &size,stdout ) )
                           A  6283    .LINE 798
                           A  6284    
000F67 DD070C              A  6285    	LD	BC,(IX+%C)
000F6A C5                  A  6286    	PUSH	BC
000F6B ED65E9              A  6287    	PEA	IX+%FFFFFFE9
000F6E DD0715              A  6288    	LD	BC,(IX+%15)
000F71 C5                  A  6289    	PUSH	BC
000F72 DD07FA              A  6290    	LD	BC,(IX+%FFFFFFFA)
000F75 C5                  A  6291    	PUSH	BC
000F76 CD 29 06 00         A  6292    	CALL	_Shell_ZFSGetList
000F7A C1                  A  6293    	POP	BC
000F7B C1                  A  6294    	POP	BC
000F7C C1                  A  6295    	POP	BC
000F7D C1                  A  6296    	POP	BC
000F7E CD 00 00 00         A  6297    	CALL	__scmpzero
000F82 28 0E               A  6298    	JR	Z,L_203
                           A  6299    ;  799		{
                           A  6300    ;  800			printf("\nThe specified file does not exist\n");
                           A  6301    .LINE 800
                           A  6302    
000F84 01 55 08 00         A  6303    	LD	BC,L__160
000F88 C5                  A  6304    	PUSH	BC
000F89 CD 00 00 00         A  6305    	CALL	_printf
000F8D C1                  A  6306    	POP	BC
                           A  6307    ;  801			goto end_Shell_ZFSDispFile ;
                           A  6308    .LINE 801
                           A  6309    
000F8E C3 3A 10 00         A  6310    	JR	L_199
                           A  6311    ;  802		}
000F92                     A  6312    L_203:
                           A  6313    .LINE 802
                           A  6314    
                           A  6315    ;  803	
                           A  6316    ;  804		/** Open the file */
                           A  6317    ;  805		fileHandle1 = ZFSOpen(argv[1], ZFS_READ, ZFS_MODE_BINARY );
                           A  6318    .LINE 805
                           A  6319    
000F92 01010000            A  6320    	LD	BC,1
000F96 C5                  A  6321    	PUSH	BC
000F97 C5                  A  6322    	PUSH	BC
000F98 DD3115              A  6323    	LD	IY,(IX+%15)
000F9B ED2303              A  6324    	LEA	HL,IY+%3
000F9E ED07                A  6325    	LD	BC,(HL)
000FA0 C5                  A  6326    	PUSH	BC
000FA1 CD 00 00 00         A  6327    	CALL	_ZFSOpen
000FA5 C1                  A  6328    	POP	BC
000FA6 C1                  A  6329    	POP	BC
000FA7 C1                  A  6330    	POP	BC
000FA8 DD2FF7              A  6331    	LD	(IX+%FFFFFFF7),HL
                           A  6332    ;  806		if( fileHandle1 )
                           A  6333    .LINE 806
                           A  6334    
000FAB CD 00 00 00         A  6335    	CALL	__icmpzero
000FAF 20 5C               A  6336    	JR	NZ,L_206
000FB1 18 7F               A  6337    	JR	L_210
                           A  6338    ;  807		{
                           A  6339    ;  808			while( readCnt < size )
000FB3                     A  6340    L_207:
                           A  6341    .LINE 808
                           A  6342    
                           A  6343    ;  809			{
                           A  6344    ;  810	//			if ( ZFSSeek(fileHandle1, readCnt, ZFS_FILE_BEGIN ) )
                           A  6345    ;  811	//			{
                           A  6346    ;  812	//				return ZSHELL_FAILURE;
                           A  6347    ;  813	//			}
                           A  6348    ;  814				numBytes = ZFSRead(fileHandle1, fs_read_buffer, 2 * MAX_FILE_PATH_SIZE );
                           A  6349    .LINE 814
                           A  6350    
000FB3 01000200            A  6351    	LD	BC,512
000FB7 C5                  A  6352    	PUSH	BC
000FB8 DD07FD              A  6353    	LD	BC,(IX+%FFFFFFFD)
000FBB C5                  A  6354    	PUSH	BC
000FBC DD07F7              A  6355    	LD	BC,(IX+%FFFFFFF7)
000FBF C5                  A  6356    	PUSH	BC
000FC0 CD 00 00 00         A  6357    	CALL	_ZFSRead
000FC4 C1                  A  6358    	POP	BC
000FC5 C1                  A  6359    	POP	BC
000FC6 C1                  A  6360    	POP	BC
000FC7 E5C1                A  6361    	LD	BC,HL
000FC9 DD0FF1              A  6362    	LD	(IX+%FFFFFFF1),BC
000FCC DD73F4              A  6363    	LD	(IX+%FFFFFFF4),E
                           A  6364    ;  815				if( numBytes > 0 )
                           A  6365    .LINE 815
                           A  6366    
000FCF B7                  A  6367    	OR	A,A
000FD0 ED62                A  6368    	SBC	HL,HL
000FD2 1E00                A  6369    	LD	E,%0
000FD4 DD7EF4              A  6370    	LD	A,(IX+%FFFFFFF4)
000FD7 CD 00 00 00         A  6371    	CALL	__lcmpu
000FDB 30 1A               A  6372    	JR	NC,L_205
                           A  6373    ;  816				{
                           A  6374    ;  817					RZKDevWrite( stdout, ( INT8 * ) fs_read_buffer, numBytes ) ; 
                           A  6375    .LINE 817
                           A  6376    
000FDD DD4EF4              A  6377    	LD	C,(IX+%FFFFFFF4)
000FE0 0600                A  6378    	LD	B,%0
000FE2 C5                  A  6379    	PUSH	BC
000FE3 DD07F1              A  6380    	LD	BC,(IX+%FFFFFFF1)
000FE6 C5                  A  6381    	PUSH	BC
000FE7 DD07FD              A  6382    	LD	BC,(IX+%FFFFFFFD)
000FEA C5                  A  6383    	PUSH	BC
000FEB DD070C              A  6384    	LD	BC,(IX+%C)
000FEE C5                  A  6385    	PUSH	BC
000FEF CD 00 00 00         A  6386    	CALL	_RZKDevWrite
000FF3 C1                  A  6387    	POP	BC
000FF4 C1                  A  6388    	POP	BC
000FF5 C1                  A  6389    	POP	BC
000FF6 C1                  A  6390    	POP	BC
                           A  6391    ;  818	
                           A  6392    ;  819	//TBD				retVal =  write(stdout, (char*)&fs_read_buffer[0],numBytes ) ;
                           A  6393    ;  820	//				if( retVal < 0  )
                           A  6394    ;  821	//				{
                           A  6395    ;  822	//					printf( "Type failed\n");
                           A  6396    ;  823	//					return ZSHELL_FAILURE ;
                           A  6397    ;  824	//				}
                           A  6398    ;  825				}
000FF7                     A  6399    L_205:
                           A  6400    .LINE 825
                           A  6401    
                           A  6402    ;  826				readCnt += numBytes ;
                           A  6403    .LINE 826
                           A  6404    
000FF7 DD27F1              A  6405    	LD	HL,(IX+%FFFFFFF1)
000FFA DD5EF4              A  6406    	LD	E,(IX+%FFFFFFF4)
000FFD DD07ED              A  6407    	LD	BC,(IX+%FFFFFFED)
001000 DD7EF0              A  6408    	LD	A,(IX+%FFFFFFF0)
001003 CD 00 00 00         A  6409    	CALL	__ladd
001007 DD2FED              A  6410    	LD	(IX+%FFFFFFED),HL
00100A DD73F0              A  6411    	LD	(IX+%FFFFFFF0),E
                           A  6412    ;  827			}
00100D                     A  6413    L_206:
                           A  6414    .LINE 827
                           A  6415    
00100D DD27ED              A  6416    	LD	HL,(IX+%FFFFFFED)
001010 DD5EF0              A  6417    	LD	E,(IX+%FFFFFFF0)
001013 DD07E9              A  6418    	LD	BC,(IX+%FFFFFFE9)
001016 DD7EEC              A  6419    	LD	A,(IX+%FFFFFFEC)
001019 CD 00 00 00         A  6420    	CALL	__lcmpu
00101D 38 94               A  6421    	JR	C,L_207
                           A  6422    ;  828			ZFSClose(fileHandle1);
                           A  6423    .LINE 828
                           A  6424    
00101F DD07F7              A  6425    	LD	BC,(IX+%FFFFFFF7)
001022 C5                  A  6426    	PUSH	BC
001023 CD 00 00 00         A  6427    	CALL	_ZFSClose
001027 C1                  A  6428    	POP	BC
                           A  6429    ;  829			printf("\n");
                           A  6430    .LINE 829
                           A  6431    
001028 01 79 08 00         A  6432    	LD	BC,L__164
00102C C5                  A  6433    	PUSH	BC
00102D CD 00 00 00         A  6434    	CALL	_printf
001031 C1                  A  6435    	POP	BC
                           A  6436    ;  830		}
001032                     A  6437    L_210:
                           A  6438    .LINE 830
                           A  6439    
                           A  6440    ;  831		ret_val = ZSHELL_SUCCESS;
                           A  6441    .LINE 831
                           A  6442    
001032 DD36F500            A  6443    	LD	(IX+%FFFFFFF5),%0
001036 DD36F600            A  6444    	LD	(IX+%FFFFFFF6),%0
00103A                     A  6445    L_199:
                           A  6446    ;  832	
                           A  6447    ;  833	end_Shell_ZFSDispFile :
                           A  6448    ;  834		if( fileName )
                           A  6449    .LINE 834
                           A  6450    
00103A DD27FA              A  6451    	LD	HL,(IX+%FFFFFFFA)
00103D CD 00 00 00         A  6452    	CALL	__icmpzero
001041 28 09               A  6453    	JR	Z,L_213
                           A  6454    ;  835			free( fileName ) ;
                           A  6455    .LINE 835
                           A  6456    
001043 DD07FA              A  6457    	LD	BC,(IX+%FFFFFFFA)
001046 C5                  A  6458    	PUSH	BC
001047 CD 00 00 00         A  6459    	CALL	_free
00104B C1                  A  6460    	POP	BC
00104C                     A  6461    L_213:
                           A  6462    ;  836		if( fs_read_buffer )
                           A  6463    .LINE 836
                           A  6464    
00104C DD27FD              A  6465    	LD	HL,(IX+%FFFFFFFD)
00104F CD 00 00 00         A  6466    	CALL	__icmpzero
001053 28 09               A  6467    	JR	Z,L_214
                           A  6468    ;  837			free( fs_read_buffer ) ;
                           A  6469    .LINE 837
                           A  6470    
001055 DD07FD              A  6471    	LD	BC,(IX+%FFFFFFFD)
001058 C5                  A  6472    	PUSH	BC
001059 CD 00 00 00         A  6473    	CALL	_free
00105D C1                  A  6474    	POP	BC
00105E                     A  6475    L_214:
                           A  6476    ;  838	
                           A  6477    ;  839		return ret_val ;
                           A  6478    .LINE 839
                           A  6479    
00105E DD27F5              A  6480    	LD	HL,(IX+%FFFFFFF5)
                           A  6481    ;  840	
                           A  6482    ;  841	}
001061                     A  6483    L_215:
                           A  6484    .LINE 841
                           A  6485    
001061 DDF9                A  6486    	LD	SP,IX
001063 DDE1                A  6487    	POP	IX
001065 C9                  A  6488    	RET	
                           A  6489    
                           A  6490    
                           A  6491    ;**************************** _Shell_ZFSDispFile ***************************
                           A  6492    ;Name                         Addr/Register   Size   Type
                           A  6493    ;_free                               IMPORT  -----   function
                           A  6494    ;_ZFSClose                           IMPORT  -----   function
                           A  6495    ;_RZKDevWrite                        IMPORT  -----   function
                           A  6496    ;_ZFSRead                            IMPORT  -----   function
                           A  6497    ;_ZFSOpen                            IMPORT  -----   function
                           A  6498    ;_malloc                             IMPORT  -----   function
                           A  6499    ;_printf                             IMPORT  -----   function
                           A  6500    ;size                                 IX-23      4   variable
                           A  6501    ;readCnt                              IX-19      4   variable
                           A  6502    ;numBytes                             IX-15      4   variable
                           A  6503    ;ret_val                              IX-11      2   variable
                           A  6504    ;fileHandle1                           IX-9      3   variable
                           A  6505    ;fileName                              IX-6      3   variable
                           A  6506    ;fs_read_buffer                        IX-3      3   variable
                           A  6507    ;argv                                 IX+21      3   parameter
                           A  6508    ;nargs                                IX+18      2   parameter
                           A  6509    ;stderr                               IX+15      3   parameter
                           A  6510    ;stdout                               IX+12      3   parameter
                           A  6511    ;stdin                                 IX+9      3   parameter
                           A  6512    ;Shl                                   IX+6      3   parameter
                           A  6513    
                           A  6514    
                           A  6515    ; Stack Frame Size: 47 (bytes)
                           A  6516    ;       Spill Code: 0 (instruction)
                           A  6517    
                           A  6518    
                           A  6519    .ENDFUNC "Shell_ZFSDispFile",841,"_Shell_ZFSDispFile"
                           A  6520    	SEGMENT STRSECT
00081A                     A  6521    L__155:
00081A 0A                  A  6522    	DB	10
00081B 54686520 73796E74   A  6523    	DB	"The syntax of the command is incorrect"
000823 6178206F 66207468 
00082B 6520636F 6D6D616E 
000833 64206973 20696E63 
00083B 6F727265 6374 
000841 0A00                A  6524    	DB	10,0
000843                     A  6525    L__156:
000843 74797065 203C6669   A  6526    	DB	"type <file Name>"
00084B 6C65204E 616D653E 
000853 0A00                A  6527    	DB	10,0
000855                     A  6528    L__160:
000855 0A                  A  6529    	DB	10
000856 54686520 73706563   A  6530    	DB	"The specified file does not exist"
00085E 69666965 64206669 
000866 6C652064 6F657320 
00086E 6E6F7420 65786973 
000876 74 
000877 0A00                A  6531    	DB	10,0
000879                     A  6532    L__164:
000879 0A00                A  6533    	DB	10,0
                           A  6534    	SEGMENT CODE
                           A  6535    ;  842	
                           A  6536    ;  843	INT16 Shell_ZFSGetVolumeInfo( struct shvars *			Shl,
                           A  6537    ;  844									RZK_DEVICE_CB_t *						stdin,
                           A  6538    ;  845									RZK_DEVICE_CB_t *						stdout, 
                           A  6539    ;  846									RZK_DEVICE_CB_t *						stderr, 
                           A  6540    ;  847									UINT16					nargs,
                           A  6541    ;  848									INT8					*argv[]
                           A  6542    ;  849								     )
                           A  6543    ;  850	
                           A  6544    ;  851	{
001066                     A  6545    _Shell_ZFSGetVolumeInfo:
                           A  6546    .DEFINE "_Shell_ZFSGetVolumeInfo"
                           A  6547    
                           A  6548    .VALUE _Shell_ZFSGetVolumeInfo
                           A  6549    
                           A  6550    .CLASS 2
                           A  6551    
                           A  6552    .TYPE 67
                           A  6553    
                           A  6554    .ENDEF
                           A  6555    
                           A  6556    .BEGFUNC "Shell_ZFSGetVolumeInfo",851,"_Shell_ZFSGetVolumeInfo"
                           A  6557    
                           A  6558    .LINE 851
                           A  6559    
                           A  6560    .DEFINE "Shl"
                           A  6561    
                           A  6562    .CLASS 65
                           A  6563    
                           A  6564    .VALUE 6
                           A  6565    
                           A  6566    .TAG "shvars"
                           A  6567    
                           A  6568    .TYPE 40
                           A  6569    
                           A  6570    .ENDEF
                           A  6571    
                           A  6572    .DEFINE "stdin"
                           A  6573    
                           A  6574    .CLASS 65
                           A  6575    
                           A  6576    .VALUE 9
                           A  6577    
                           A  6578    .TAG "RZK_DEVICE_CB_t"
                           A  6579    
                           A  6580    .TYPE 40
                           A  6581    
                           A  6582    .ENDEF
                           A  6583    
                           A  6584    .DEFINE "stdout"
                           A  6585    
                           A  6586    .CLASS 65
                           A  6587    
                           A  6588    .VALUE 12
                           A  6589    
                           A  6590    .TAG "RZK_DEVICE_CB_t"
                           A  6591    
                           A  6592    .TYPE 40
                           A  6593    
                           A  6594    .ENDEF
                           A  6595    
                           A  6596    .DEFINE "stderr"
                           A  6597    
                           A  6598    .CLASS 65
                           A  6599    
                           A  6600    .VALUE 15
                           A  6601    
                           A  6602    .TAG "RZK_DEVICE_CB_t"
                           A  6603    
                           A  6604    .TYPE 40
                           A  6605    
                           A  6606    .ENDEF
                           A  6607    
                           A  6608    .DEFINE "nargs"
                           A  6609    
                           A  6610    .CLASS 65
                           A  6611    
                           A  6612    .VALUE 18
                           A  6613    
                           A  6614    .TYPE 13
                           A  6615    
                           A  6616    .ENDEF
                           A  6617    
                           A  6618    .DEFINE "argv"
                           A  6619    
                           A  6620    .CLASS 65
                           A  6621    
                           A  6622    .VALUE 21
                           A  6623    
                           A  6624    .TYPE 290
                           A  6625    
                           A  6626    .ENDEF
                           A  6627    
                           A  6628    .DEFINE "ptempVal"
                           A  6629    
                           A  6630    .CLASS 65
                           A  6631    
                           A  6632    .VALUE -3
                           A  6633    
                           A  6634    .TAG "NONAME4"
                           A  6635    
                           A  6636    .TYPE 40
                           A  6637    
                           A  6638    .ENDEF
                           A  6639    
                           A  6640    .DEFINE "vol_cnt"
                           A  6641    
                           A  6642    .CLASS 65
                           A  6643    
                           A  6644    .VALUE -6
                           A  6645    
                           A  6646    .TYPE 4
                           A  6647    
                           A  6648    .ENDEF
                           A  6649    
                           A  6650    .DEFINE "pvol_params"
                           A  6651    
                           A  6652    .CLASS 65
                           A  6653    
                           A  6654    .VALUE -9
                           A  6655    
                           A  6656    .TAG "NONAME4"
                           A  6657    
                           A  6658    .TYPE 40
                           A  6659    
                           A  6660    .ENDEF
                           A  6661    
                           A  6662    .DEFINE "ret_val"
                           A  6663    
                           A  6664    .CLASS 65
                           A  6665    
                           A  6666    .VALUE -11
                           A  6667    
                           A  6668    .TYPE 3
                           A  6669    
                           A  6670    .ENDEF
                           A  6671    
                           A  6672    .DEFINE "status"
                           A  6673    
                           A  6674    .CLASS 65
                           A  6675    
                           A  6676    .VALUE -17
                           A  6677    
                           A  6678    .TYPE 4
                           A  6679    
                           A  6680    .ENDEF
                           A  6681    
001066 DDE5                A  6682    	PUSH	IX
001068 DD210000 00         A  6683    	LD	IX,0
00106D DD39                A  6684    	ADD	IX,SP
00106F ED22EF              A  6685    	LEA	HL,IX+%FFFFFFEF
001072 F9                  A  6686    	LD	SP,HL
                           A  6687    ;  852		ZFS_STATUS_t vol_cnt ;
                           A  6688    ;  853		ZFS_STATUS_t status ;
                           A  6689    ;  854		ZFS_VOL_PARAMS_t *pvol_params, *ptempVal ;//vol_params[ 4 ],
                           A  6690    ;  855	
                           A  6691    ;  856		INT16 ret_val = ZSHELL_FAILURE ;
                           A  6692    .LINE 856
                           A  6693    
001073 DD36F5FF            A  6694    	LD	(IX+%FFFFFFF5),%FF
001077 DD36F6FF            A  6695    	LD	(IX+%FFFFFFF6),%FF
                           A  6696    ;  857	
                           A  6697    ;  858		vol_cnt = ZFSGetVolumeCount() ;
                           A  6698    .LINE 858
                           A  6699    
00107B CD 00 00 00         A  6700    	CALL	_ZFSGetVolumeCount
00107F DD2FFA              A  6701    	LD	(IX+%FFFFFFFA),HL
                           A  6702    ;  859		if( vol_cnt <= 0 )
                           A  6703    .LINE 859
                           A  6704    
001082 E5C1                A  6705    	LD	BC,HL
001084 B7                  A  6706    	OR	A,A
001085 ED62                A  6707    	SBC	HL,HL
001087 B7                  A  6708    	OR	A,A
001088 ED42                A  6709    	SBC	HL,BC
00108A CD 00 00 00         A  6710    	CALL	__setflag
00108E FA A4 10 00         A  6711    	JP	M,L_217
                           A  6712    ;  860		{
                           A  6713    ;  861		  	printf("\nError\n" ) ;
                           A  6714    .LINE 861
                           A  6715    
001092 01 7B 08 00         A  6716    	LD	BC,L__169
001096 C5                  A  6717    	PUSH	BC
001097 CD 00 00 00         A  6718    	CALL	_printf
00109B C1                  A  6719    	POP	BC
                           A  6720    ;  862		  	return ZSHELL_FAILURE;
                           A  6721    .LINE 862
                           A  6722    
00109C 4921FFFF            A  6723    	LD.LIS	HL,-1
0010A0 C3 FD 11 00         A  6724    	JR	L_234
                           A  6725    ;  863		}
0010A4                     A  6726    L_217:
                           A  6727    .LINE 863
                           A  6728    
                           A  6729    ;  864	
                           A  6730    ;  865		pvol_params = ( ZFS_VOL_PARAMS_t * )malloc( sizeof( ZFS_VOL_PARAMS_t ) * vol_cnt ) ;
                           A  6731    .LINE 865
                           A  6732    
0010A4 DD27FA              A  6733    	LD	HL,(IX+%FFFFFFFA)
0010A7 3E22                A  6734    	LD	A,%22
0010A9 CD 00 00 00         A  6735    	CALL	__imul_b
0010AD E5                  A  6736    	PUSH	HL
0010AE CD 00 00 00         A  6737    	CALL	_malloc
0010B2 C1                  A  6738    	POP	BC
0010B3 DD2FF7              A  6739    	LD	(IX+%FFFFFFF7),HL
                           A  6740    ;  866		if( pvol_params == NULL ) 
                           A  6741    .LINE 866
                           A  6742    
0010B6 CD 00 00 00         A  6743    	CALL	__icmpzero
0010BA CA E8 11 00         A  6744    	JR	Z,L_218
                           A  6745    ;  867		{
                           A  6746    ;  868			goto end_Shell_ZFSGetVolumeInfo ;
                           A  6747    ;  869		}
                           A  6748    ;  870	
                           A  6749    ;  871		status = ZFSGetVolumeParams( (INT8*) "EXTF:/", pvol_params, ZFS_TRUE ) ;
                           A  6750    .LINE 871
                           A  6751    
0010BE 01010000            A  6752    	LD	BC,1
0010C2 C5                  A  6753    	PUSH	BC
0010C3 DD07F7              A  6754    	LD	BC,(IX+%FFFFFFF7)
0010C6 C5                  A  6755    	PUSH	BC
0010C7 01 83 08 00         A  6756    	LD	BC,L__171
0010CB C5                  A  6757    	PUSH	BC
0010CC CD 00 00 00         A  6758    	CALL	_ZFSGetVolumeParams
0010D0 C1                  A  6759    	POP	BC
0010D1 C1                  A  6760    	POP	BC
0010D2 C1                  A  6761    	POP	BC
0010D3 DD2FEF              A  6762    	LD	(IX+%FFFFFFEF),HL
                           A  6763    ;  872		if( status != ZFSERR_SUCCESS )
                           A  6764    .LINE 872
                           A  6765    
0010D6 CD 00 00 00         A  6766    	CALL	__icmpzero
0010DA 28 0E               A  6767    	JR	Z,L_222
                           A  6768    ;  873		{
                           A  6769    ;  874		 	printf("\nError in retrieving volume information\n" ) ;
                           A  6770    .LINE 874
                           A  6771    
0010DC 01 8A 08 00         A  6772    	LD	BC,L__173
0010E0 C5                  A  6773    	PUSH	BC
0010E1 CD 00 00 00         A  6774    	CALL	_printf
0010E5 C1                  A  6775    	POP	BC
                           A  6776    ;  875			goto end_Shell_ZFSGetVolumeInfo ;
                           A  6777    .LINE 875
                           A  6778    
0010E6 C3 E8 11 00         A  6779    	JR	L_218
                           A  6780    ;  876		}
0010EA                     A  6781    L_222:
                           A  6782    .LINE 876
                           A  6783    
                           A  6784    ;  877		ptempVal = pvol_params ;
                           A  6785    .LINE 877
                           A  6786    
0010EA DD07F7              A  6787    	LD	BC,(IX+%FFFFFFF7)
0010ED DD0FFD              A  6788    	LD	(IX+%FFFFFFFD),BC
                           A  6789    ;  878		printf("\n*******************************************************************************" ) ;
                           A  6790    .LINE 878
                           A  6791    
0010F0 01 B3 08 00         A  6792    	LD	BC,L__174
0010F4 C5                  A  6793    	PUSH	BC
0010F5 CD 00 00 00         A  6794    	CALL	_printf
0010F9 C1                  A  6795    	POP	BC
                           A  6796    ;  879		printf("\nVolume Name       Is Valid   Total Space   Free space   Used Space   Dirty Space");
                           A  6797    .LINE 879
                           A  6798    
0010FA 01 04 09 00         A  6799    	LD	BC,L__175
0010FE C5                  A  6800    	PUSH	BC
0010FF CD 00 00 00         A  6801    	CALL	_printf
001103 C1                  A  6802    	POP	BC
                           A  6803    ;  880		printf("\n                              (bytes)       (bytes)      (bytes)      (bytes)");
                           A  6804    .LINE 880
                           A  6805    
001104 01 56 09 00         A  6806    	LD	BC,L__176
001108 C5                  A  6807    	PUSH	BC
001109 CD 00 00 00         A  6808    	CALL	_printf
00110D C1                  A  6809    	POP	BC
                           A  6810    ;  881		printf("\n*******************************************************************************" ) ;
                           A  6811    .LINE 881
                           A  6812    
00110E 01 A5 09 00         A  6813    	LD	BC,L__177
001112 C5                  A  6814    	PUSH	BC
001113 CD 00 00 00         A  6815    	CALL	_printf
001117 C1                  A  6816    	POP	BC
                           A  6817    ;  882		while( vol_cnt > 0 )
                           A  6818    .LINE 882
                           A  6819    
001118 C3 C9 11 00         A  6820    	JR	L_229
00111C                     A  6821    L_230:
                           A  6822    ;  883		{
                           A  6823    ;  884			printf("\n%-15s", ptempVal->vol_name ) ;
                           A  6824    .LINE 884
                           A  6825    
00111C DD31FD              A  6826    	LD	IY,(IX+%FFFFFFFD)
00111F ED6600              A  6827    	PEA	IY+%0
001122 01 F6 09 00         A  6828    	LD	BC,L__178
001126 C5                  A  6829    	PUSH	BC
001127 CD 00 00 00         A  6830    	CALL	_printf
00112B C1                  A  6831    	POP	BC
00112C C1                  A  6832    	POP	BC
                           A  6833    ;  885			printf("%-15s", (ptempVal->is_valid?"VALID":"INVALID") ) ;
                           A  6834    .LINE 885
                           A  6835    
00112D DD31FD              A  6836    	LD	IY,(IX+%FFFFFFFD)
001130 FD7E11              A  6837    	LD	A,(IY+%11)
001133 B7                  A  6838    	OR	A,A
001134 28 09               A  6839    	JR	Z,L_225
001136 01 FD 09 00         A  6840    	LD	BC,L__180
00113A DD0FF2              A  6841    	LD	(IX+%FFFFFFF2),BC
00113D 18 07               A  6842    	JR	L_226
00113F                     A  6843    L_225:
00113F 01 03 0A 00         A  6844    	LD	BC,L__181
001143 DD0FF2              A  6845    	LD	(IX+%FFFFFFF2),BC
001146                     A  6846    L_226:
001146 DD07F2              A  6847    	LD	BC,(IX+%FFFFFFF2)
001149 C5                  A  6848    	PUSH	BC
00114A 01 0B 0A 00         A  6849    	LD	BC,L__182
00114E C5                  A  6850    	PUSH	BC
00114F CD 00 00 00         A  6851    	CALL	_printf
001153 C1                  A  6852    	POP	BC
001154 C1                  A  6853    	POP	BC
                           A  6854    ;  886	#ifdef _IAR_CODE		
                           A  6855    ;  887			printf("\t%ld", (UINT32)ptempVal->vol_size ) ;
                           A  6856    ;  888			printf("\t\t%ld", (UINT32)ptempVal->free_space ) ;
                           A  6857    ;  889			printf("\t%ld", (UINT32)ptempVal->used_space ) ;
                           A  6858    ;  890			printf("\t\t%ld", (UINT32)ptempVal->dirty_space ) ;
                           A  6859    ;  891	#else
                           A  6860    ;  892			printf("\t%u", (UINT32)ptempVal->vol_size ) ;
                           A  6861    .LINE 892
                           A  6862    
001155 DD31FD              A  6863    	LD	IY,(IX+%FFFFFFFD)
001158 FD0712              A  6864    	LD	BC,(IY+%12)
00115B FD6E15              A  6865    	LD	L,(IY+%15)
00115E 2600                A  6866    	LD	H,%0
001160 E5                  A  6867    	PUSH	HL
001161 C5                  A  6868    	PUSH	BC
001162 01 11 0A 00         A  6869    	LD	BC,L__183
001166 C5                  A  6870    	PUSH	BC
001167 CD 00 00 00         A  6871    	CALL	_printf
00116B C1                  A  6872    	POP	BC
00116C C1                  A  6873    	POP	BC
00116D C1                  A  6874    	POP	BC
                           A  6875    ;  893			printf("\t\t%u", (UINT32)ptempVal->free_space ) ;
                           A  6876    .LINE 893
                           A  6877    
00116E DD31FD              A  6878    	LD	IY,(IX+%FFFFFFFD)
001171 FD0716              A  6879    	LD	BC,(IY+%16)
001174 FD6E19              A  6880    	LD	L,(IY+%19)
001177 2600                A  6881    	LD	H,%0
001179 E5                  A  6882    	PUSH	HL
00117A C5                  A  6883    	PUSH	BC
00117B 01 15 0A 00         A  6884    	LD	BC,L__184
00117F C5                  A  6885    	PUSH	BC
001180 CD 00 00 00         A  6886    	CALL	_printf
001184 C1                  A  6887    	POP	BC
001185 C1                  A  6888    	POP	BC
001186 C1                  A  6889    	POP	BC
                           A  6890    ;  894			printf("\t%u", (UINT32)ptempVal->used_space ) ;
                           A  6891    .LINE 894
                           A  6892    
001187 DD31FD              A  6893    	LD	IY,(IX+%FFFFFFFD)
00118A FD071A              A  6894    	LD	BC,(IY+%1A)
00118D FD6E1D              A  6895    	LD	L,(IY+%1D)
001190 2600                A  6896    	LD	H,%0
001192 E5                  A  6897    	PUSH	HL
001193 C5                  A  6898    	PUSH	BC
001194 01 1A 0A 00         A  6899    	LD	BC,L__185
001198 C5                  A  6900    	PUSH	BC
001199 CD 00 00 00         A  6901    	CALL	_printf
00119D C1                  A  6902    	POP	BC
00119E C1                  A  6903    	POP	BC
00119F C1                  A  6904    	POP	BC
                           A  6905    ;  895			printf("\t\t%u", (UINT32)ptempVal->dirty_space ) ;
                           A  6906    .LINE 895
                           A  6907    
0011A0 DD31FD              A  6908    	LD	IY,(IX+%FFFFFFFD)
0011A3 FD071E              A  6909    	LD	BC,(IY+%1E)
0011A6 FD6E21              A  6910    	LD	L,(IY+%21)
0011A9 2600                A  6911    	LD	H,%0
0011AB E5                  A  6912    	PUSH	HL
0011AC C5                  A  6913    	PUSH	BC
0011AD 01 1E 0A 00         A  6914    	LD	BC,L__186
0011B1 C5                  A  6915    	PUSH	BC
0011B2 CD 00 00 00         A  6916    	CALL	_printf
0011B6 C1                  A  6917    	POP	BC
0011B7 C1                  A  6918    	POP	BC
0011B8 C1                  A  6919    	POP	BC
                           A  6920    ;  896	#endif
                           A  6921    ;  897	
                           A  6922    ;  898	/*
                           A  6923    ;  899			printf("%-15s %-10s\t%u\t\t%u\t\t%u\t\t%u", ptempVal->vol_name,
                           A  6924    ;  900															(ptempVal->is_valid?"VALID":"INVALID"),
                           A  6925    ;  901															ptempVal->vol_size,
                           A  6926    ;  902															ptempVal->free_space,
                           A  6927    ;  903															ptempVal->used_space,
                           A  6928    ;  904															ptempVal->dirty_space) ;
                           A  6929    ;  905	*/	
                           A  6930    ;  906			ptempVal++ ;
                           A  6931    .LINE 906
                           A  6932    
0011B9 DD31FD              A  6933    	LD	IY,(IX+%FFFFFFFD)
0011BC ED3322              A  6934    	LEA	IY,IY+%22
0011BF DD3EFD              A  6935    	LD	(IX+%FFFFFFFD),IY
                           A  6936    ;  907			vol_cnt-- ;
                           A  6937    .LINE 907
                           A  6938    
0011C2 DD07FA              A  6939    	LD	BC,(IX+%FFFFFFFA)
0011C5 0B                  A  6940    	DEC	BC
0011C6 DD0FFA              A  6941    	LD	(IX+%FFFFFFFA),BC
                           A  6942    ;  908		}
0011C9                     A  6943    L_229:
                           A  6944    .LINE 908
                           A  6945    
0011C9 DD07FA              A  6946    	LD	BC,(IX+%FFFFFFFA)
0011CC B7                  A  6947    	OR	A,A
0011CD ED62                A  6948    	SBC	HL,HL
0011CF B7                  A  6949    	OR	A,A
0011D0 ED42                A  6950    	SBC	HL,BC
0011D2 FA 1C 11 00         A  6951    	JP	M,L_230
                           A  6952    ;  909		printf("\n\n\n*******************************************************************************\n" ) ;
                           A  6953    .LINE 909
                           A  6954    
0011D6 01 23 0A 00         A  6955    	LD	BC,L__188
0011DA C5                  A  6956    	PUSH	BC
0011DB CD 00 00 00         A  6957    	CALL	_printf
0011DF C1                  A  6958    	POP	BC
                           A  6959    ;  910		ret_val = ZSHELL_SUCCESS ;
                           A  6960    .LINE 910
                           A  6961    
0011E0 DD36F500            A  6962    	LD	(IX+%FFFFFFF5),%0
0011E4 DD36F600            A  6963    	LD	(IX+%FFFFFFF6),%0
0011E8                     A  6964    L_218:
                           A  6965    ;  911	
                           A  6966    ;  912	end_Shell_ZFSGetVolumeInfo :
                           A  6967    ;  913		if( pvol_params )
                           A  6968    .LINE 913
                           A  6969    
0011E8 DD27F7              A  6970    	LD	HL,(IX+%FFFFFFF7)
0011EB CD 00 00 00         A  6971    	CALL	__icmpzero
0011EF 28 09               A  6972    	JR	Z,L_233
                           A  6973    ;  914			free( pvol_params ) ;
                           A  6974    .LINE 914
                           A  6975    
0011F1 DD07F7              A  6976    	LD	BC,(IX+%FFFFFFF7)
0011F4 C5                  A  6977    	PUSH	BC
0011F5 CD 00 00 00         A  6978    	CALL	_free
0011F9 C1                  A  6979    	POP	BC
0011FA                     A  6980    L_233:
                           A  6981    ;  915		return ret_val ;
                           A  6982    .LINE 915
                           A  6983    
0011FA DD27F5              A  6984    	LD	HL,(IX+%FFFFFFF5)
                           A  6985    ;  916	}
0011FD                     A  6986    L_234:
                           A  6987    .LINE 916
                           A  6988    
0011FD DDF9                A  6989    	LD	SP,IX
0011FF DDE1                A  6990    	POP	IX
001201 C9                  A  6991    	RET	
                           A  6992    
                           A  6993    
                           A  6994    ;**************************** _Shell_ZFSGetVolumeInfo ***************************
                           A  6995    ;Name                         Addr/Register   Size   Type
                           A  6996    ;_free                               IMPORT  -----   function
                           A  6997    ;_ZFSGetVolumeParams                 IMPORT  -----   function
                           A  6998    ;_malloc                             IMPORT  -----   function
                           A  6999    ;_printf                             IMPORT  -----   function
                           A  7000    ;_ZFSGetVolumeCount                  IMPORT  -----   function
                           A  7001    ;status                               IX-17      3   variable
                           A  7002    ;temp223                              IX-14      3   variable
                           A  7003    ;ret_val                              IX-11      2   variable
                           A  7004    ;pvol_params                           IX-9      3   variable
                           A  7005    ;vol_cnt                               IX-6      3   variable
                           A  7006    ;ptempVal                              IX-3      3   variable
                           A  7007    ;argv                                 IX+21      3   parameter
                           A  7008    ;nargs                                IX+18      2   parameter
                           A  7009    ;stderr                               IX+15      3   parameter
                           A  7010    ;stdout                               IX+12      3   parameter
                           A  7011    ;stdin                                 IX+9      3   parameter
                           A  7012    ;Shl                                   IX+6      3   parameter
                           A  7013    
                           A  7014    
                           A  7015    ; Stack Frame Size: 41 (bytes)
                           A  7016    ;       Spill Code: 0 (instruction)
                           A  7017    
                           A  7018    
                           A  7019    .ENDFUNC "Shell_ZFSGetVolumeInfo",916,"_Shell_ZFSGetVolumeInfo"
                           A  7020    	SEGMENT STRSECT
00087B                     A  7021    L__169:
00087B 0A                  A  7022    	DB	10
00087C 4572726F 72         A  7023    	DB	"Error"
000881 0A00                A  7024    	DB	10,0
000883                     A  7025    L__171:
000883 45585446 3A2F       A  7026    	DB	"EXTF:/"
000889 00                  A  7027    	DB	0
00088A                     A  7028    L__173:
00088A 0A                  A  7029    	DB	10
00088B 4572726F 7220696E   A  7030    	DB	"Error in retrieving volume information"
000893 20726574 72696576 
00089B 696E6720 766F6C75 
0008A3 6D652069 6E666F72 
0008AB 6D617469 6F6E 
0008B1 0A00                A  7031    	DB	10,0
0008B3                     A  7032    L__174:
0008B3 0A                  A  7033    	DB	10
0008B4 2A2A2A2A 2A2A2A2A   A  7034    	DB	"*******************************************************************************"
0008BC 2A2A2A2A 2A2A2A2A 
0008C4 2A2A2A2A 2A2A2A2A 
0008CC 2A2A2A2A 2A2A2A2A 
0008D4 2A2A2A2A 2A2A2A2A 
0008DC 2A2A2A2A 2A2A2A2A 
0008E4 2A2A2A2A 2A2A2A2A 
0008EC 2A2A2A2A 2A2A2A2A 
0008F4 2A2A2A2A 2A2A2A2A 
0008FC 2A2A2A2A 2A2A2A 
000903 00                  A  7035    	DB	0
000904                     A  7036    L__175:
000904 0A                  A  7037    	DB	10
000905 566F6C75 6D65204E   A  7038    	DB	"Volume Name       Is Valid   Total Space   Free space   Used Space   Dirty Space"
00090D 616D6520 20202020 
000915 20204973 2056616C 
00091D 69642020 20546F74 
000925 616C2053 70616365 
00092D 20202046 72656520 
000935 73706163 65202020 
00093D 55736564 20537061 
000945 63652020 20446972 
00094D 74792053 70616365 
000955 00                  A  7039    	DB	0
000956                     A  7040    L__176:
000956 0A                  A  7041    	DB	10
000957 20202020 20202020   A  7042    	DB	"                              (bytes)       (bytes)      (bytes)      (bytes)"
00095F 20202020 20202020 
000967 20202020 20202020 
00096F 20202020 20202862 
000977 79746573 29202020 
00097F 20202020 28627974 
000987 65732920 20202020 
00098F 20286279 74657329 
000997 20202020 20202862 
00099F 79746573 29 
0009A4 00                  A  7043    	DB	0
0009A5                     A  7044    L__177:
0009A5 0A                  A  7045    	DB	10
0009A6 2A2A2A2A 2A2A2A2A   A  7046    	DB	"*******************************************************************************"
0009AE 2A2A2A2A 2A2A2A2A 
0009B6 2A2A2A2A 2A2A2A2A 
0009BE 2A2A2A2A 2A2A2A2A 
0009C6 2A2A2A2A 2A2A2A2A 
0009CE 2A2A2A2A 2A2A2A2A 
0009D6 2A2A2A2A 2A2A2A2A 
0009DE 2A2A2A2A 2A2A2A2A 
0009E6 2A2A2A2A 2A2A2A2A 
0009EE 2A2A2A2A 2A2A2A 
0009F5 00                  A  7047    	DB	0
0009F6                     A  7048    L__178:
0009F6 0A                  A  7049    	DB	10
0009F7 252D3135 73         A  7050    	DB	"%-15s"
0009FC 00                  A  7051    	DB	0
0009FD                     A  7052    L__180:
0009FD 56414C49 44         A  7053    	DB	"VALID"
000A02 00                  A  7054    	DB	0
000A03                     A  7055    L__181:
000A03 494E5641 4C4944     A  7056    	DB	"INVALID"
000A0A 00                  A  7057    	DB	0
000A0B                     A  7058    L__182:
000A0B 252D3135 73         A  7059    	DB	"%-15s"
000A10 00                  A  7060    	DB	0
000A11                     A  7061    L__183:
000A11 09                  A  7062    	DB	9
000A12 2575                A  7063    	DB	"%u"
000A14 00                  A  7064    	DB	0
000A15                     A  7065    L__184:
000A15 0909                A  7066    	DB	9,9
000A17 2575                A  7067    	DB	"%u"
000A19 00                  A  7068    	DB	0
000A1A                     A  7069    L__185:
000A1A 09                  A  7070    	DB	9
000A1B 2575                A  7071    	DB	"%u"
000A1D 00                  A  7072    	DB	0
000A1E                     A  7073    L__186:
000A1E 0909                A  7074    	DB	9,9
000A20 2575                A  7075    	DB	"%u"
000A22 00                  A  7076    	DB	0
000A23                     A  7077    L__188:
000A23 0A0A0A              A  7078    	DB	10,10,10
000A26 2A2A2A2A 2A2A2A2A   A  7079    	DB	"*******************************************************************************"
000A2E 2A2A2A2A 2A2A2A2A 
000A36 2A2A2A2A 2A2A2A2A 
000A3E 2A2A2A2A 2A2A2A2A 
000A46 2A2A2A2A 2A2A2A2A 
000A4E 2A2A2A2A 2A2A2A2A 
000A56 2A2A2A2A 2A2A2A2A 
000A5E 2A2A2A2A 2A2A2A2A 
000A66 2A2A2A2A 2A2A2A2A 
000A6E 2A2A2A2A 2A2A2A 
000A75 0A00                A  7080    	DB	10,0
                           A  7081    	SEGMENT CODE
                           A  7082    ;  917	
                           A  7083    ;  918	INT16	Shell_ZFSHelp
                           A  7084    ;  919	(
                           A  7085    ;  920	  	struct shvars *Shl,
                           A  7086    ;  921		RZK_DEVICE_CB_t *								stdin,
                           A  7087    ;  922		RZK_DEVICE_CB_t *								stdout, 
                           A  7088    ;  923		RZK_DEVICE_CB_t *								stderr, 
                           A  7089    ;  924		UINT16							nargs,
                           A  7090    ;  925	   	INT8	*                    				args[]
                           A  7091    ;  926	)   
                           A  7092    ;  927	{
001202                     A  7093    _Shell_ZFSHelp:
                           A  7094    .DEFINE "_Shell_ZFSHelp"
                           A  7095    
                           A  7096    .VALUE _Shell_ZFSHelp
                           A  7097    
                           A  7098    .CLASS 2
                           A  7099    
                           A  7100    .TYPE 67
                           A  7101    
                           A  7102    .ENDEF
                           A  7103    
                           A  7104    .BEGFUNC "Shell_ZFSHelp",927,"_Shell_ZFSHelp"
                           A  7105    
                           A  7106    .LINE 927
                           A  7107    
                           A  7108    .DEFINE "Shl"
                           A  7109    
                           A  7110    .CLASS 65
                           A  7111    
                           A  7112    .VALUE 6
                           A  7113    
                           A  7114    .TAG "shvars"
                           A  7115    
                           A  7116    .TYPE 40
                           A  7117    
                           A  7118    .ENDEF
                           A  7119    
                           A  7120    .DEFINE "stdin"
                           A  7121    
                           A  7122    .CLASS 65
                           A  7123    
                           A  7124    .VALUE 9
                           A  7125    
                           A  7126    .TAG "RZK_DEVICE_CB_t"
                           A  7127    
                           A  7128    .TYPE 40
                           A  7129    
                           A  7130    .ENDEF
                           A  7131    
                           A  7132    .DEFINE "stdout"
                           A  7133    
                           A  7134    .CLASS 65
                           A  7135    
                           A  7136    .VALUE 12
                           A  7137    
                           A  7138    .TAG "RZK_DEVICE_CB_t"
                           A  7139    
                           A  7140    .TYPE 40
                           A  7141    
                           A  7142    .ENDEF
                           A  7143    
                           A  7144    .DEFINE "stderr"
                           A  7145    
                           A  7146    .CLASS 65
                           A  7147    
                           A  7148    .VALUE 15
                           A  7149    
                           A  7150    .TAG "RZK_DEVICE_CB_t"
                           A  7151    
                           A  7152    .TYPE 40
                           A  7153    
                           A  7154    .ENDEF
                           A  7155    
                           A  7156    .DEFINE "nargs"
                           A  7157    
                           A  7158    .CLASS 65
                           A  7159    
                           A  7160    .VALUE 18
                           A  7161    
                           A  7162    .TYPE 13
                           A  7163    
                           A  7164    .ENDEF
                           A  7165    
                           A  7166    .DEFINE "args"
                           A  7167    
                           A  7168    .CLASS 65
                           A  7169    
                           A  7170    .VALUE 21
                           A  7171    
                           A  7172    .TYPE 290
                           A  7173    
                           A  7174    .ENDEF
                           A  7175    
                           A  7176    .DEFINE "com"
                           A  7177    
                           A  7178    .CLASS 65
                           A  7179    
                           A  7180    .VALUE -3
                           A  7181    
                           A  7182    .TAG "cmdent"
                           A  7183    
                           A  7184    .TYPE 40
                           A  7185    
                           A  7186    .ENDEF
                           A  7187    
                           A  7188    .DEFINE "i"
                           A  7189    
                           A  7190    .CLASS 65
                           A  7191    
                           A  7192    .VALUE -5
                           A  7193    
                           A  7194    .TYPE 13
                           A  7195    
                           A  7196    .ENDEF
                           A  7197    
001202 DDE5                A  7198    	PUSH	IX
001204 DD210000 00         A  7199    	LD	IX,0
001209 DD39                A  7200    	ADD	IX,SP
00120B C5                  A  7201    	PUSH	BC
00120C 3B                  A  7202    	DEC	SP
00120D 3B                  A  7203    	DEC	SP
                           A  7204    ;  928		UINT16	i;
                           A  7205    ;  929		struct cmdent	*com;
                           A  7206    ;  930	
                           A  7207    ;  931		/** Meenakshi added newly */
                           A  7208    ;  932		if( nargs == 1 )
                           A  7209    .LINE 932
                           A  7210    
00120E 49010100            A  7211    	LD.LIS	BC,1
001212 DD2712              A  7212    	LD	HL,(IX+%12)
001215 B7                  A  7213    	OR	A,A
001216 40ED42              A  7214    	SBC.SIS	HL,BC
001219 C2 AE 12 00         A  7215    	JR	NZ,L_251
                           A  7216    ;  933		{
                           A  7217    ;  934			printf( "Commands are:\n");
                           A  7218    .LINE 934
                           A  7219    
00121D 01 77 0A 00         A  7220    	LD	BC,L__192
001221 C5                  A  7221    	PUSH	BC
001222 CD 00 00 00         A  7222    	CALL	_printf
001226 C1                  A  7223    	POP	BC
                           A  7224    ;  935			for(i=0,com=ShellCommands; com; com=com->cnext) {
                           A  7225    .LINE 935
                           A  7226    
001227 DD36FB00            A  7227    	LD	(IX+%FFFFFFFB),%0
00122B DD36FC00            A  7228    	LD	(IX+%FFFFFFFC),%0
00122F ED4B 00 00 00       A  7229    	LD	BC,(_ShellCommands)
001234 DD0FFD              A  7230    	LD	(IX+%FFFFFFFD),BC
001237 18 57               A  7231    	JR	L_240
001239                     A  7232    L_238:
                           A  7233    ;  936				if(i==0)
                           A  7234    .LINE 936
                           A  7235    
001239 DD27FB              A  7236    	LD	HL,(IX+%FFFFFFFB)
00123C CD 00 00 00         A  7237    	CALL	__scmpzero
001240 20 0A               A  7238    	JR	NZ,L_236
                           A  7239    ;  937					printf( "  ");
                           A  7240    .LINE 937
                           A  7241    
001242 01 86 0A 00         A  7242    	LD	BC,L__194
001246 C5                  A  7243    	PUSH	BC
001247 CD 00 00 00         A  7244    	CALL	_printf
00124B C1                  A  7245    	POP	BC
00124C                     A  7246    L_236:
                           A  7247    ;  938				printf( "%-16s", com->cmdnam);
                           A  7248    .LINE 938
                           A  7249    
00124C DD31FD              A  7250    	LD	IY,(IX+%FFFFFFFD)
00124F FD0700              A  7251    	LD	BC,(IY+%0)
001252 C5                  A  7252    	PUSH	BC
001253 01 89 0A 00         A  7253    	LD	BC,L__195
001257 C5                  A  7254    	PUSH	BC
001258 CD 00 00 00         A  7255    	CALL	_printf
00125C C1                  A  7256    	POP	BC
00125D C1                  A  7257    	POP	BC
                           A  7258    ;  939				if(++i == COLUMNS) {
                           A  7259    .LINE 939
                           A  7260    
00125E DD27FB              A  7261    	LD	HL,(IX+%FFFFFFFB)
001261 23                  A  7262    	INC	HL
001262 DD75FB              A  7263    	LD	(IX+%FFFFFFFB),L
001265 DD74FC              A  7264    	LD	(IX+%FFFFFFFC),H
001268 49010400            A  7265    	LD.LIS	BC,4
00126C DD27FB              A  7266    	LD	HL,(IX+%FFFFFFFB)
00126F B7                  A  7267    	OR	A,A
001270 40ED42              A  7268    	SBC.SIS	HL,BC
001273 20 12               A  7269    	JR	NZ,L_239
                           A  7270    ;  940					printf( "\n");
                           A  7271    .LINE 940
                           A  7272    
001275 01 8F 0A 00         A  7273    	LD	BC,L__197
001279 C5                  A  7274    	PUSH	BC
00127A CD 00 00 00         A  7275    	CALL	_printf
00127E C1                  A  7276    	POP	BC
                           A  7277    ;  941					i=0;
                           A  7278    .LINE 941
                           A  7279    
00127F DD36FB00            A  7280    	LD	(IX+%FFFFFFFB),%0
001283 DD36FC00            A  7281    	LD	(IX+%FFFFFFFC),%0
                           A  7282    ;  942				}
                           A  7283    ;  943			}
001287                     A  7284    L_239:
                           A  7285    .LINE 943
                           A  7286    
001287 DD31FD              A  7287    	LD	IY,(IX+%FFFFFFFD)
00128A FD0707              A  7288    	LD	BC,(IY+%7)
00128D DD0FFD              A  7289    	LD	(IX+%FFFFFFFD),BC
001290                     A  7290    L_240:
001290 DD27FD              A  7291    	LD	HL,(IX+%FFFFFFFD)
001293 CD 00 00 00         A  7292    	CALL	__icmpzero
001297 20 A0               A  7293    	JR	NZ,L_238
                           A  7294    ;  944			if(i!=0)
                           A  7295    .LINE 944
                           A  7296    
001299 DD27FB              A  7297    	LD	HL,(IX+%FFFFFFFB)
00129C CD 00 00 00         A  7298    	CALL	__scmpzero
0012A0 28 6B               A  7299    	JR	Z,L_252
                           A  7300    ;  945				printf( "\n");
                           A  7301    .LINE 945
                           A  7302    
0012A2 01 91 0A 00         A  7303    	LD	BC,L__200
0012A6 C5                  A  7304    	PUSH	BC
0012A7 CD 00 00 00         A  7305    	CALL	_printf
0012AB C1                  A  7306    	POP	BC
                           A  7307    ;  946		}
                           A  7308    ;  947		else /** MEENAKSHI ADDED NEWLY TO add description for each command */
                           A  7309    .LINE 947
                           A  7310    
0012AC 18 5F               A  7311    	JR	L_252
0012AE                     A  7312    L_251:
                           A  7313    ;  948		{
                           A  7314    ;  949			for( com = ShellCommands ; com ; com = com->cnext )
                           A  7315    .LINE 949
                           A  7316    
0012AE ED4B 00 00 00       A  7317    	LD	BC,(_ShellCommands)
0012B3 DD0FFD              A  7318    	LD	(IX+%FFFFFFFD),BC
0012B6 18 25               A  7319    	JR	L_246
0012B8                     A  7320    L_244:
                           A  7321    ;  950			{
                           A  7322    ;  951				if( strcmp( com->cmdnam, (const INT8 *)args[1] ) == 0 )
                           A  7323    .LINE 951
                           A  7324    
0012B8 DD3115              A  7325    	LD	IY,(IX+%15)
0012BB ED2303              A  7326    	LEA	HL,IY+%3
0012BE ED07                A  7327    	LD	BC,(HL)
0012C0 C5                  A  7328    	PUSH	BC
0012C1 DD31FD              A  7329    	LD	IY,(IX+%FFFFFFFD)
0012C4 FD0700              A  7330    	LD	BC,(IY+%0)
0012C7 C5                  A  7331    	PUSH	BC
0012C8 CD 00 00 00         A  7332    	CALL	_strcmp
0012CC C1                  A  7333    	POP	BC
0012CD C1                  A  7334    	POP	BC
0012CE CD 00 00 00         A  7335    	CALL	__icmpzero
0012D2 28 12               A  7336    	JR	Z,L_249
0012D4 DD31FD              A  7337    	LD	IY,(IX+%FFFFFFFD)
0012D7 FD0707              A  7338    	LD	BC,(IY+%7)
0012DA DD0FFD              A  7339    	LD	(IX+%FFFFFFFD),BC
                           A  7340    ;  952					break;
                           A  7341    ;  953			}
0012DD                     A  7342    L_246:
                           A  7343    .LINE 953
                           A  7344    
0012DD DD27FD              A  7345    	LD	HL,(IX+%FFFFFFFD)
0012E0 CD 00 00 00         A  7346    	CALL	__icmpzero
0012E4 20 D2               A  7347    	JR	NZ,L_244
0012E6                     A  7348    L_249:
                           A  7349    ;  954			if( !com )
                           A  7350    .LINE 954
                           A  7351    
0012E6 DD27FD              A  7352    	LD	HL,(IX+%FFFFFFFD)
0012E9 CD 00 00 00         A  7353    	CALL	__icmpzero
0012ED 20 0C               A  7354    	JR	NZ,L_248
                           A  7355    ;  955			{
                           A  7356    ;  956				printf("\nThis command is not supported by the help utility.\n");
                           A  7357    .LINE 956
                           A  7358    
0012EF 01 93 0A 00         A  7359    	LD	BC,L__204
0012F3 C5                  A  7360    	PUSH	BC
0012F4 CD 00 00 00         A  7361    	CALL	_printf
0012F8 C1                  A  7362    	POP	BC
                           A  7363    ;  957			}
                           A  7364    ;  958			else
                           A  7365    .LINE 958
                           A  7366    
0012F9 18 12               A  7367    	JR	L_252
0012FB                     A  7368    L_248:
                           A  7369    ;  959			{
                           A  7370    ;  960				printf( "%s", com->helpDesc );	
                           A  7371    .LINE 960
                           A  7372    
0012FB DD31FD              A  7373    	LD	IY,(IX+%FFFFFFFD)
0012FE FD070A              A  7374    	LD	BC,(IY+%A)
001301 C5                  A  7375    	PUSH	BC
001302 01 C8 0A 00         A  7376    	LD	BC,L__205
001306 C5                  A  7377    	PUSH	BC
001307 CD 00 00 00         A  7378    	CALL	_printf
00130B C1                  A  7379    	POP	BC
00130C C1                  A  7380    	POP	BC
                           A  7381    ;  961			}
                           A  7382    ;  962		}
00130D                     A  7383    L_252:
                           A  7384    .LINE 962
                           A  7385    
                           A  7386    ;  963		return OK;
                           A  7387    .LINE 963
                           A  7388    
00130D 49210100            A  7389    	LD.LIS	HL,1
                           A  7390    ;  964	}
                           A  7391    .LINE 964
                           A  7392    
001311 DDF9                A  7393    	LD	SP,IX
001313 DDE1                A  7394    	POP	IX
001315 C9                  A  7395    	RET	
                           A  7396    
                           A  7397    
                           A  7398    ;**************************** _Shell_ZFSHelp ***************************
                           A  7399    ;Name                         Addr/Register   Size   Type
                           A  7400    ;_strcmp                             IMPORT  -----   function
                           A  7401    ;_ShellCommands                      IMPORT      3   variable
                           A  7402    ;_printf                             IMPORT  -----   function
                           A  7403    ;i                                     IX-5      2   variable
                           A  7404    ;com                                   IX-3      3   variable
                           A  7405    ;args                                 IX+21      3   parameter
                           A  7406    ;nargs                                IX+18      2   parameter
                           A  7407    ;stderr                               IX+15      3   parameter
                           A  7408    ;stdout                               IX+12      3   parameter
                           A  7409    ;stdin                                 IX+9      3   parameter
                           A  7410    ;Shl                                   IX+6      3   parameter
                           A  7411    
                           A  7412    
                           A  7413    ; Stack Frame Size: 29 (bytes)
                           A  7414    ;       Spill Code: 0 (instruction)
                           A  7415    
                           A  7416    
                           A  7417    .ENDFUNC "Shell_ZFSHelp",964,"_Shell_ZFSHelp"
                           A  7418    	SEGMENT STRSECT
000A77                     A  7419    L__192:
000A77 436F6D6D 616E6473   A  7420    	DB	"Commands are:"
000A7F 20617265 3A 
000A84 0A00                A  7421    	DB	10,0
000A86                     A  7422    L__194:
000A86 2020                A  7423    	DB	"  "
000A88 00                  A  7424    	DB	0
000A89                     A  7425    L__195:
000A89 252D3136 73         A  7426    	DB	"%-16s"
000A8E 00                  A  7427    	DB	0
000A8F                     A  7428    L__197:
000A8F 0A00                A  7429    	DB	10,0
000A91                     A  7430    L__200:
000A91 0A00                A  7431    	DB	10,0
000A93                     A  7432    L__204:
000A93 0A                  A  7433    	DB	10
000A94 54686973 20636F6D   A  7434    	DB	"This command is not supported by the help utility."
000A9C 6D616E64 20697320 
000AA4 6E6F7420 73757070 
000AAC 6F727465 64206279 
000AB4 20746865 2068656C 
000ABC 70207574 696C6974 
000AC4 792E 
000AC6 0A00                A  7435    	DB	10,0
000AC8                     A  7436    L__205:
000AC8 2573                A  7437    	DB	"%s"
000ACA 00                  A  7438    	DB	0
                           A  7439    	SEGMENT CODE
                           A  7440    ;  965	
                           A  7441    ;  966	
                           A  7442    ;  967	/** @memo Gets the date
                           A  7443    ;  968	 * @doc {\bf date}
                           A  7444    ;  969	 *
                           A  7445    ;  970	 * This command gets the current date and time 
                           A  7446    ;  971	 * .
                           A  7447    ;  972	 *
                           A  7448    ;  973	 * This function takes no arguments.
                           A  7449    ;  974	 * @name date
                           A  7450    ;  975	 * @args
                           A  7451    ;  976	 * @type
                           A  7452    ;  977	 */
                           A  7453    ;  978	/*------------------------------------------------------------------------
                           A  7454    ;  979	 *  x_getdate  -  (command date) gets the date and time
                           A  7455    ;  980	 *------------------------------------------------------------------------
                           A  7456    ;  981	 */
                           A  7457    ;  982	INT16
                           A  7458    ;  983	Shell_getdatetime
                           A  7459    ;  984	(
                           A  7460    ;  985		struct shvars *				Shl,
                           A  7461    ;  986		RZK_DEVICE_CB_t *								stdin,
                           A  7462    ;  987		RZK_DEVICE_CB_t *								stdout, 
                           A  7463    ;  988		RZK_DEVICE_CB_t *								stderr, 
                           A  7464    ;  989		UINT16								nargs,
                           A  7465    ;  990		INT8 *							args[]
                           A  7466    ;  991	)
                           A  7467    ;  992	{
001316                     A  7468    _Shell_getdatetime:
                           A  7469    .DEFINE "_Shell_getdatetime"
                           A  7470    
                           A  7471    .VALUE _Shell_getdatetime
                           A  7472    
                           A  7473    .CLASS 2
                           A  7474    
                           A  7475    .TYPE 67
                           A  7476    
                           A  7477    .ENDEF
                           A  7478    
                           A  7479    .BEGFUNC "Shell_getdatetime",992,"_Shell_getdatetime"
                           A  7480    
                           A  7481    .LINE 992
                           A  7482    
                           A  7483    .DEFINE "Shl"
                           A  7484    
                           A  7485    .CLASS 65
                           A  7486    
                           A  7487    .VALUE 6
                           A  7488    
                           A  7489    .TAG "shvars"
                           A  7490    
                           A  7491    .TYPE 40
                           A  7492    
                           A  7493    .ENDEF
                           A  7494    
                           A  7495    .DEFINE "stdin"
                           A  7496    
                           A  7497    .CLASS 65
                           A  7498    
                           A  7499    .VALUE 9
                           A  7500    
                           A  7501    .TAG "RZK_DEVICE_CB_t"
                           A  7502    
                           A  7503    .TYPE 40
                           A  7504    
                           A  7505    .ENDEF
                           A  7506    
                           A  7507    .DEFINE "stdout"
                           A  7508    
                           A  7509    .CLASS 65
                           A  7510    
                           A  7511    .VALUE 12
                           A  7512    
                           A  7513    .TAG "RZK_DEVICE_CB_t"
                           A  7514    
                           A  7515    .TYPE 40
                           A  7516    
                           A  7517    .ENDEF
                           A  7518    
                           A  7519    .DEFINE "stderr"
                           A  7520    
                           A  7521    .CLASS 65
                           A  7522    
                           A  7523    .VALUE 15
                           A  7524    
                           A  7525    .TAG "RZK_DEVICE_CB_t"
                           A  7526    
                           A  7527    .TYPE 40
                           A  7528    
                           A  7529    .ENDEF
                           A  7530    
                           A  7531    .DEFINE "nargs"
                           A  7532    
                           A  7533    .CLASS 65
                           A  7534    
                           A  7535    .VALUE 18
                           A  7536    
                           A  7537    .TYPE 13
                           A  7538    
                           A  7539    .ENDEF
                           A  7540    
                           A  7541    .DEFINE "args"
                           A  7542    
                           A  7543    .CLASS 65
                           A  7544    
                           A  7545    .VALUE 21
                           A  7546    
                           A  7547    .TYPE 290
                           A  7548    
                           A  7549    .ENDEF
                           A  7550    
                           A  7551    .DEFINE "Time"
                           A  7552    
                           A  7553    .CLASS 65
                           A  7554    
                           A  7555    .VALUE -8
                           A  7556    
                           A  7557    .TAG "TIME"
                           A  7558    
                           A  7559    .TYPE 8
                           A  7560    
                           A  7561    .ENDEF
                           A  7562    
                           A  7563    .DEFINE "pdev"
                           A  7564    
                           A  7565    .CLASS 65
                           A  7566    
                           A  7567    .VALUE -11
                           A  7568    
                           A  7569    .TAG "RZK_DEVICE_CB_t"
                           A  7570    
                           A  7571    .TYPE 40
                           A  7572    
                           A  7573    .ENDEF
                           A  7574    
001316 DDE5                A  7575    	PUSH	IX
001318 DD210000 00         A  7576    	LD	IX,0
00131D DD39                A  7577    	ADD	IX,SP
00131F ED22BC              A  7578    	LEA	HL,IX+%FFFFFFBC
001322 F9                  A  7579    	LD	SP,HL
                           A  7580    ;  993		TIME Time;
                           A  7581    ;  994		TIME *pTime = &Time;
                           A  7582    ;  995		RZK_DEVICE_CB_t *pdev ;
                           A  7583    ;  996		
                           A  7584    ;  997		pdev = RZKDevOpen("RTC",0) ;
                           A  7585    .LINE 997
                           A  7586    
001323 01000000            A  7587    	LD	BC,0
001327 C5                  A  7588    	PUSH	BC
001328 01 CB 0A 00         A  7589    	LD	BC,L__207
00132C C5                  A  7590    	PUSH	BC
00132D CD 00 00 00         A  7591    	CALL	_RZKDevOpen
001331 C1                  A  7592    	POP	BC
001332 C1                  A  7593    	POP	BC
001333 DD2FF5              A  7594    	LD	(IX+%FFFFFFF5),HL
                           A  7595    ;  998		if( pdev == NULL )
                           A  7596    .LINE 998
                           A  7597    
001336 CD 00 00 00         A  7598    	CALL	__icmpzero
00133A 20 12               A  7599    	JR	NZ,L_255
                           A  7600    ;  999		{
                           A  7601    ; 1000			printf("\nRTC driver is not present");
                           A  7602    .LINE 1000
                           A  7603    
00133C 01 CF 0A 00         A  7604    	LD	BC,L__209
001340 C5                  A  7605    	PUSH	BC
001341 CD 00 00 00         A  7606    	CALL	_printf
001345 C1                  A  7607    	POP	BC
                           A  7608    ; 1001			return (-1);
                           A  7609    .LINE 1001
                           A  7610    
001346 4921FFFF            A  7611    	LD.LIS	HL,-1
00134A C3 6F 15 00         A  7612    	JR	L_332
                           A  7613    ; 1002		}
00134E                     A  7614    L_255:
                           A  7615    .LINE 1002
                           A  7616    
                           A  7617    ; 1003		RZKDevRead(pdev,(INT8 *)pTime,8);
                           A  7618    .LINE 1003
                           A  7619    
00134E 01000000            A  7620    	LD	BC,0
001352 C5                  A  7621    	PUSH	BC
001353 01080000            A  7622    	LD	BC,8
001357 C5                  A  7623    	PUSH	BC
001358 ED65F8              A  7624    	PEA	IX+%FFFFFFF8
00135B DD07F5              A  7625    	LD	BC,(IX+%FFFFFFF5)
00135E C5                  A  7626    	PUSH	BC
00135F CD 00 00 00         A  7627    	CALL	_RZKDevRead
001363 C1                  A  7628    	POP	BC
001364 C1                  A  7629    	POP	BC
001365 C1                  A  7630    	POP	BC
001366 C1                  A  7631    	POP	BC
                           A  7632    ; 1004	
                           A  7633    ; 1005		printf("%-4s, %2d %-4s %4d %3d:%2d:%2d\n",
                           A  7634    ; 1006			((INT)pTime->dayOfWeek == 1)?"Mon":
                           A  7635    .LINE 1006
                           A  7636    
001367 DD7EFC              A  7637    	LD	A,(IX+%FFFFFFFC)
00136A FE01                A  7638    	CP	A,%1
00136C 20 0B               A  7639    	JR	NZ,L_282
                           A  7640    ; 1007			((INT)pTime->dayOfWeek == 2)?"Tue":
                           A  7641    ; 1008			((INT)pTime->dayOfWeek == 3)?"Wed":
                           A  7642    ; 1009			((INT)pTime->dayOfWeek == 4)?"Thu":
                           A  7643    ; 1010			((INT)pTime->dayOfWeek == 5)?"Fri":
                           A  7644    ; 1011			((INT)pTime->dayOfWeek == 6)?"Sat":
                           A  7645    ; 1012			((INT)pTime->dayOfWeek == 7)?"Sun":
                           A  7646    ; 1013			"---",
                           A  7647    .LINE 1013
                           A  7648    
00136E 01 EA 0A 00         A  7649    	LD	BC,L__211
001372 DD0FF2              A  7650    	LD	(IX+%FFFFFFF2),BC
001375 C3 04 14 00         A  7651    	JR	L_283
001379                     A  7652    L_282:
001379 DD7EFC              A  7653    	LD	A,(IX+%FFFFFFFC)
00137C FE02                A  7654    	CP	A,%2
00137E 20 09               A  7655    	JR	NZ,L_278
001380 01 EE 0A 00         A  7656    	LD	BC,L__213
001384 DD0FEF              A  7657    	LD	(IX+%FFFFFFEF),BC
001387 18 75               A  7658    	JR	L_279
001389                     A  7659    L_278:
001389 DD7EFC              A  7660    	LD	A,(IX+%FFFFFFFC)
00138C FE03                A  7661    	CP	A,%3
00138E 20 09               A  7662    	JR	NZ,L_274
001390 01 F2 0A 00         A  7663    	LD	BC,L__215
001394 DD0FEC              A  7664    	LD	(IX+%FFFFFFEC),BC
001397 18 5F               A  7665    	JR	L_275
001399                     A  7666    L_274:
001399 DD7EFC              A  7667    	LD	A,(IX+%FFFFFFFC)
00139C FE04                A  7668    	CP	A,%4
00139E 20 09               A  7669    	JR	NZ,L_270
0013A0 01 F6 0A 00         A  7670    	LD	BC,L__217
0013A4 DD0FE9              A  7671    	LD	(IX+%FFFFFFE9),BC
0013A7 18 49               A  7672    	JR	L_271
0013A9                     A  7673    L_270:
0013A9 DD7EFC              A  7674    	LD	A,(IX+%FFFFFFFC)
0013AC FE05                A  7675    	CP	A,%5
0013AE 20 09               A  7676    	JR	NZ,L_266
0013B0 01 FA 0A 00         A  7677    	LD	BC,L__219
0013B4 DD0FE6              A  7678    	LD	(IX+%FFFFFFE6),BC
0013B7 18 33               A  7679    	JR	L_267
0013B9                     A  7680    L_266:
0013B9 DD7EFC              A  7681    	LD	A,(IX+%FFFFFFFC)
0013BC FE06                A  7682    	CP	A,%6
0013BE 20 09               A  7683    	JR	NZ,L_262
0013C0 01 FE 0A 00         A  7684    	LD	BC,L__221
0013C4 DD0FE3              A  7685    	LD	(IX+%FFFFFFE3),BC
0013C7 18 1D               A  7686    	JR	L_263
0013C9                     A  7687    L_262:
0013C9 DD7EFC              A  7688    	LD	A,(IX+%FFFFFFFC)
0013CC FE07                A  7689    	CP	A,%7
0013CE 20 09               A  7690    	JR	NZ,L_258
0013D0 01 02 0B 00         A  7691    	LD	BC,L__223
0013D4 DD0FE0              A  7692    	LD	(IX+%FFFFFFE0),BC
0013D7 18 07               A  7693    	JR	L_259
0013D9                     A  7694    L_258:
0013D9 01 06 0B 00         A  7695    	LD	BC,L__224
0013DD DD0FE0              A  7696    	LD	(IX+%FFFFFFE0),BC
0013E0                     A  7697    L_259:
0013E0 DD07E0              A  7698    	LD	BC,(IX+%FFFFFFE0)
0013E3 DD0FE3              A  7699    	LD	(IX+%FFFFFFE3),BC
0013E6                     A  7700    L_263:
0013E6 DD07E3              A  7701    	LD	BC,(IX+%FFFFFFE3)
0013E9 DD0FE6              A  7702    	LD	(IX+%FFFFFFE6),BC
0013EC                     A  7703    L_267:
0013EC DD07E6              A  7704    	LD	BC,(IX+%FFFFFFE6)
0013EF DD0FE9              A  7705    	LD	(IX+%FFFFFFE9),BC
0013F2                     A  7706    L_271:
0013F2 DD07E9              A  7707    	LD	BC,(IX+%FFFFFFE9)
0013F5 DD0FEC              A  7708    	LD	(IX+%FFFFFFEC),BC
0013F8                     A  7709    L_275:
0013F8 DD07EC              A  7710    	LD	BC,(IX+%FFFFFFEC)
0013FB DD0FEF              A  7711    	LD	(IX+%FFFFFFEF),BC
0013FE                     A  7712    L_279:
0013FE DD07EF              A  7713    	LD	BC,(IX+%FFFFFFEF)
001401 DD0FF2              A  7714    	LD	(IX+%FFFFFFF2),BC
001404                     A  7715    L_283:
                           A  7716    ; 1014			(INT)pTime->dayOfMonth,
                           A  7717    ; 1015			((INT)pTime->mon == 1)?"Jan":
                           A  7718    .LINE 1015
                           A  7719    
001404 DD7EFD              A  7720    	LD	A,(IX+%FFFFFFFD)
001407 FE01                A  7721    	CP	A,%1
001409 20 0B               A  7722    	JR	NZ,L_330
                           A  7723    ; 1016			((INT)pTime->mon == 2)?"Feb":
                           A  7724    ; 1017			((INT)pTime->mon == 3)?"Mar":
                           A  7725    ; 1018			((INT)pTime->mon == 4)?"Apr":
                           A  7726    ; 1019			((INT)pTime->mon == 5)?"May":
                           A  7727    ; 1020			((INT)pTime->mon == 6)?"Jun":
                           A  7728    ; 1021			((INT)pTime->mon == 7)?"Jul":
                           A  7729    ; 1022			((INT)pTime->mon == 8)?"Aug":
                           A  7730    ; 1023			((INT)pTime->mon == 9)?"Sep":
                           A  7731    ; 1024			((INT)pTime->mon == 10)?"Oct":
                           A  7732    ; 1025			((INT)pTime->mon == 11)?"Nov":
                           A  7733    ; 1026			((INT)pTime->mon == 12)?"Dec":
                           A  7734    ; 1027			"---",			
                           A  7735    .LINE 1027
                           A  7736    
00140B 01 0A 0B 00         A  7737    	LD	BC,L__226
00140F DD0FDD              A  7738    	LD	(IX+%FFFFFFDD),BC
001412 C3 19 15 00         A  7739    	JR	L_331
001416                     A  7740    L_330:
001416 DD7EFD              A  7741    	LD	A,(IX+%FFFFFFFD)
001419 FE02                A  7742    	CP	A,%2
00141B 20 0B               A  7743    	JR	NZ,L_326
00141D 01 0E 0B 00         A  7744    	LD	BC,L__228
001421 DD0FDA              A  7745    	LD	(IX+%FFFFFFDA),BC
001424 C3 13 15 00         A  7746    	JR	L_327
001428                     A  7747    L_326:
001428 DD7EFD              A  7748    	LD	A,(IX+%FFFFFFFD)
00142B FE03                A  7749    	CP	A,%3
00142D 20 0B               A  7750    	JR	NZ,L_322
00142F 01 12 0B 00         A  7751    	LD	BC,L__230
001433 DD0FD7              A  7752    	LD	(IX+%FFFFFFD7),BC
001436 C3 0D 15 00         A  7753    	JR	L_323
00143A                     A  7754    L_322:
00143A DD7EFD              A  7755    	LD	A,(IX+%FFFFFFFD)
00143D FE04                A  7756    	CP	A,%4
00143F 20 0B               A  7757    	JR	NZ,L_318
001441 01 16 0B 00         A  7758    	LD	BC,L__232
001445 DD0FD4              A  7759    	LD	(IX+%FFFFFFD4),BC
001448 C3 07 15 00         A  7760    	JR	L_319
00144C                     A  7761    L_318:
00144C DD7EFD              A  7762    	LD	A,(IX+%FFFFFFFD)
00144F FE05                A  7763    	CP	A,%5
001451 20 0B               A  7764    	JR	NZ,L_314
001453 01 1A 0B 00         A  7765    	LD	BC,L__234
001457 DD0FD1              A  7766    	LD	(IX+%FFFFFFD1),BC
00145A C3 01 15 00         A  7767    	JR	L_315
00145E                     A  7768    L_314:
00145E DD7EFD              A  7769    	LD	A,(IX+%FFFFFFFD)
001461 FE06                A  7770    	CP	A,%6
001463 20 0B               A  7771    	JR	NZ,L_310
001465 01 1E 0B 00         A  7772    	LD	BC,L__236
001469 DD0FCE              A  7773    	LD	(IX+%FFFFFFCE),BC
00146C C3 FB 14 00         A  7774    	JR	L_311
001470                     A  7775    L_310:
001470 DD7EFD              A  7776    	LD	A,(IX+%FFFFFFFD)
001473 FE07                A  7777    	CP	A,%7
001475 20 09               A  7778    	JR	NZ,L_306
001477 01 22 0B 00         A  7779    	LD	BC,L__238
00147B DD0FCB              A  7780    	LD	(IX+%FFFFFFCB),BC
00147E 18 75               A  7781    	JR	L_307
001480                     A  7782    L_306:
001480 DD7EFD              A  7783    	LD	A,(IX+%FFFFFFFD)
001483 FE08                A  7784    	CP	A,%8
001485 20 09               A  7785    	JR	NZ,L_302
001487 01 26 0B 00         A  7786    	LD	BC,L__240
00148B DD0FC8              A  7787    	LD	(IX+%FFFFFFC8),BC
00148E 18 5F               A  7788    	JR	L_303
001490                     A  7789    L_302:
001490 DD7EFD              A  7790    	LD	A,(IX+%FFFFFFFD)
001493 FE09                A  7791    	CP	A,%9
001495 20 09               A  7792    	JR	NZ,L_298
001497 01 2A 0B 00         A  7793    	LD	BC,L__242
00149B DD0FC5              A  7794    	LD	(IX+%FFFFFFC5),BC
00149E 18 49               A  7795    	JR	L_299
0014A0                     A  7796    L_298:
0014A0 DD7EFD              A  7797    	LD	A,(IX+%FFFFFFFD)
0014A3 FE0A                A  7798    	CP	A,%A
0014A5 20 09               A  7799    	JR	NZ,L_294
0014A7 01 2E 0B 00         A  7800    	LD	BC,L__244
0014AB DD0FC2              A  7801    	LD	(IX+%FFFFFFC2),BC
0014AE 18 33               A  7802    	JR	L_295
0014B0                     A  7803    L_294:
0014B0 DD7EFD              A  7804    	LD	A,(IX+%FFFFFFFD)
0014B3 FE0B                A  7805    	CP	A,%B
0014B5 20 09               A  7806    	JR	NZ,L_290
0014B7 01 32 0B 00         A  7807    	LD	BC,L__246
0014BB DD0FBF              A  7808    	LD	(IX+%FFFFFFBF),BC
0014BE 18 1D               A  7809    	JR	L_291
0014C0                     A  7810    L_290:
0014C0 DD7EFD              A  7811    	LD	A,(IX+%FFFFFFFD)
0014C3 FE0C                A  7812    	CP	A,%C
0014C5 20 09               A  7813    	JR	NZ,L_286
0014C7 01 36 0B 00         A  7814    	LD	BC,L__248
0014CB DD0FBC              A  7815    	LD	(IX+%FFFFFFBC),BC
0014CE 18 07               A  7816    	JR	L_287
0014D0                     A  7817    L_286:
0014D0 01 3A 0B 00         A  7818    	LD	BC,L__249
0014D4 DD0FBC              A  7819    	LD	(IX+%FFFFFFBC),BC
0014D7                     A  7820    L_287:
0014D7 DD07BC              A  7821    	LD	BC,(IX+%FFFFFFBC)
0014DA DD0FBF              A  7822    	LD	(IX+%FFFFFFBF),BC
0014DD                     A  7823    L_291:
0014DD DD07BF              A  7824    	LD	BC,(IX+%FFFFFFBF)
0014E0 DD0FC2              A  7825    	LD	(IX+%FFFFFFC2),BC
0014E3                     A  7826    L_295:
0014E3 DD07C2              A  7827    	LD	BC,(IX+%FFFFFFC2)
0014E6 DD0FC5              A  7828    	LD	(IX+%FFFFFFC5),BC
0014E9                     A  7829    L_299:
0014E9 DD07C5              A  7830    	LD	BC,(IX+%FFFFFFC5)
0014EC DD0FC8              A  7831    	LD	(IX+%FFFFFFC8),BC
0014EF                     A  7832    L_303:
0014EF DD07C8              A  7833    	LD	BC,(IX+%FFFFFFC8)
0014F2 DD0FCB              A  7834    	LD	(IX+%FFFFFFCB),BC
0014F5                     A  7835    L_307:
0014F5 DD07CB              A  7836    	LD	BC,(IX+%FFFFFFCB)
0014F8 DD0FCE              A  7837    	LD	(IX+%FFFFFFCE),BC
0014FB                     A  7838    L_311:
0014FB DD07CE              A  7839    	LD	BC,(IX+%FFFFFFCE)
0014FE DD0FD1              A  7840    	LD	(IX+%FFFFFFD1),BC
001501                     A  7841    L_315:
001501 DD07D1              A  7842    	LD	BC,(IX+%FFFFFFD1)
001504 DD0FD4              A  7843    	LD	(IX+%FFFFFFD4),BC
001507                     A  7844    L_319:
001507 DD07D4              A  7845    	LD	BC,(IX+%FFFFFFD4)
00150A DD0FD7              A  7846    	LD	(IX+%FFFFFFD7),BC
00150D                     A  7847    L_323:
00150D DD07D7              A  7848    	LD	BC,(IX+%FFFFFFD7)
001510 DD0FDA              A  7849    	LD	(IX+%FFFFFFDA),BC
001513                     A  7850    L_327:
001513 DD07DA              A  7851    	LD	BC,(IX+%FFFFFFDA)
001516 DD0FDD              A  7852    	LD	(IX+%FFFFFFDD),BC
001519                     A  7853    L_331:
                           A  7854    ; 1028			((INT)pTime->cent * 100 + (INT)pTime->year),(INT)pTime->hrs, (INT)pTime->minutes,(INT)pTime->sec);
                           A  7855    .LINE 1028
                           A  7856    
001519 DD7EF8              A  7857    	LD	A,(IX+%FFFFFFF8)
00151C B7ED62              A  7858    	UEXT	HL
00151F 6F                  A  7859    	LD	L,A
001520 E5                  A  7860    	PUSH	HL
001521 DD7EF9              A  7861    	LD	A,(IX+%FFFFFFF9)
001524 B7ED62              A  7862    	UEXT	HL
001527 6F                  A  7863    	LD	L,A
001528 E5                  A  7864    	PUSH	HL
001529 DD7EFA              A  7865    	LD	A,(IX+%FFFFFFFA)
00152C B7ED62              A  7866    	UEXT	HL
00152F 6F                  A  7867    	LD	L,A
001530 E5                  A  7868    	PUSH	HL
001531 DD7EFF              A  7869    	LD	A,(IX+%FFFFFFFF)
001534 B7ED62              A  7870    	UEXT	HL
001537 6F                  A  7871    	LD	L,A
001538 3E64                A  7872    	LD	A,%64
00153A CD 00 00 00         A  7873    	CALL	__imul_b
00153E E5C1                A  7874    	LD	BC,HL
001540 DD7EFE              A  7875    	LD	A,(IX+%FFFFFFFE)
001543 B7ED62              A  7876    	UEXT	HL
001546 6F                  A  7877    	LD	L,A
001547 09                  A  7878    	ADD	HL,BC
001548 E5                  A  7879    	PUSH	HL
001549 DD07DD              A  7880    	LD	BC,(IX+%FFFFFFDD)
00154C C5                  A  7881    	PUSH	BC
00154D DD7EFB              A  7882    	LD	A,(IX+%FFFFFFFB)
001550 B7ED62              A  7883    	UEXT	HL
001553 6F                  A  7884    	LD	L,A
001554 E5                  A  7885    	PUSH	HL
001555 DD07F2              A  7886    	LD	BC,(IX+%FFFFFFF2)
001558 C5                  A  7887    	PUSH	BC
001559 01 3E 0B 00         A  7888    	LD	BC,L__250
00155D C5                  A  7889    	PUSH	BC
00155E CD 00 00 00         A  7890    	CALL	_printf
001562 FD211800 00         A  7891    	LD	IY,24
001567 FD39                A  7892    	ADD	IY,SP
001569 FDF9                A  7893    	LD	SP,IY
                           A  7894    ; 1029		return(OK);
                           A  7895    .LINE 1029
                           A  7896    
00156B 49210100            A  7897    	LD.LIS	HL,1
                           A  7898    ; 1030	}
00156F                     A  7899    L_332:
                           A  7900    .LINE 1030
                           A  7901    
00156F DDF9                A  7902    	LD	SP,IX
001571 DDE1                A  7903    	POP	IX
001573 C9                  A  7904    	RET	
                           A  7905    
                           A  7906    
                           A  7907    ;**************************** _Shell_getdatetime ***************************
                           A  7908    ;Name                         Addr/Register   Size   Type
                           A  7909    ;_RZKDevRead                         IMPORT  -----   function
                           A  7910    ;_printf                             IMPORT  -----   function
                           A  7911    ;_RZKDevOpen                         IMPORT  -----   function
                           A  7912    ;temp284                              IX-68      3   variable
                           A  7913    ;temp288                              IX-65      3   variable
                           A  7914    ;temp292                              IX-62      3   variable
                           A  7915    ;temp296                              IX-59      3   variable
                           A  7916    ;temp300                              IX-56      3   variable
                           A  7917    ;temp304                              IX-53      3   variable
                           A  7918    ;temp308                              IX-50      3   variable
                           A  7919    ;temp312                              IX-47      3   variable
                           A  7920    ;temp316                              IX-44      3   variable
                           A  7921    ;temp320                              IX-41      3   variable
                           A  7922    ;temp324                              IX-38      3   variable
                           A  7923    ;temp328                              IX-35      3   variable
                           A  7924    ;temp256                              IX-32      3   variable
                           A  7925    ;temp260                              IX-29      3   variable
                           A  7926    ;temp264                              IX-26      3   variable
                           A  7927    ;temp268                              IX-23      3   variable
                           A  7928    ;temp272                              IX-20      3   variable
                           A  7929    ;temp276                              IX-17      3   variable
                           A  7930    ;temp280                              IX-14      3   variable
                           A  7931    ;pdev                                 IX-11      3   variable
                           A  7932    ;Time                                  IX-8      8   variable
                           A  7933    ;args                                 IX+21      3   parameter
                           A  7934    ;nargs                                IX+18      2   parameter
                           A  7935    ;stderr                               IX+15      3   parameter
                           A  7936    ;stdout                               IX+12      3   parameter
                           A  7937    ;stdin                                 IX+9      3   parameter
                           A  7938    ;Shl                                   IX+6      3   parameter
                           A  7939    
                           A  7940    
                           A  7941    ; Stack Frame Size: 92 (bytes)
                           A  7942    ;       Spill Code: 0 (instruction)
                           A  7943    
                           A  7944    
                           A  7945    .ENDFUNC "Shell_getdatetime",1030,"_Shell_getdatetime"
                           A  7946    	SEGMENT STRSECT
000ACB                     A  7947    L__207:
000ACB 525443              A  7948    	DB	"RTC"
000ACE 00                  A  7949    	DB	0
000ACF                     A  7950    L__209:
000ACF 0A                  A  7951    	DB	10
000AD0 52544320 64726976   A  7952    	DB	"RTC driver is not present"
000AD8 65722069 73206E6F 
000AE0 74207072 6573656E 
000AE8 74 
000AE9 00                  A  7953    	DB	0
000AEA                     A  7954    L__211:
000AEA 4D6F6E              A  7955    	DB	"Mon"
000AED 00                  A  7956    	DB	0
000AEE                     A  7957    L__213:
000AEE 547565              A  7958    	DB	"Tue"
000AF1 00                  A  7959    	DB	0
000AF2                     A  7960    L__215:
000AF2 576564              A  7961    	DB	"Wed"
000AF5 00                  A  7962    	DB	0
000AF6                     A  7963    L__217:
000AF6 546875              A  7964    	DB	"Thu"
000AF9 00                  A  7965    	DB	0
000AFA                     A  7966    L__219:
000AFA 467269              A  7967    	DB	"Fri"
000AFD 00                  A  7968    	DB	0
000AFE                     A  7969    L__221:
000AFE 536174              A  7970    	DB	"Sat"
000B01 00                  A  7971    	DB	0
000B02                     A  7972    L__223:
000B02 53756E              A  7973    	DB	"Sun"
000B05 00                  A  7974    	DB	0
000B06                     A  7975    L__224:
000B06 2D2D2D              A  7976    	DB	"---"
000B09 00                  A  7977    	DB	0
000B0A                     A  7978    L__226:
000B0A 4A616E              A  7979    	DB	"Jan"
000B0D 00                  A  7980    	DB	0
000B0E                     A  7981    L__228:
000B0E 466562              A  7982    	DB	"Feb"
000B11 00                  A  7983    	DB	0
000B12                     A  7984    L__230:
000B12 4D6172              A  7985    	DB	"Mar"
000B15 00                  A  7986    	DB	0
000B16                     A  7987    L__232:
000B16 417072              A  7988    	DB	"Apr"
000B19 00                  A  7989    	DB	0
000B1A                     A  7990    L__234:
000B1A 4D6179              A  7991    	DB	"May"
000B1D 00                  A  7992    	DB	0
000B1E                     A  7993    L__236:
000B1E 4A756E              A  7994    	DB	"Jun"
000B21 00                  A  7995    	DB	0
000B22                     A  7996    L__238:
000B22 4A756C              A  7997    	DB	"Jul"
000B25 00                  A  7998    	DB	0
000B26                     A  7999    L__240:
000B26 417567              A  8000    	DB	"Aug"
000B29 00                  A  8001    	DB	0
000B2A                     A  8002    L__242:
000B2A 536570              A  8003    	DB	"Sep"
000B2D 00                  A  8004    	DB	0
000B2E                     A  8005    L__244:
000B2E 4F6374              A  8006    	DB	"Oct"
000B31 00                  A  8007    	DB	0
000B32                     A  8008    L__246:
000B32 4E6F76              A  8009    	DB	"Nov"
000B35 00                  A  8010    	DB	0
000B36                     A  8011    L__248:
000B36 446563              A  8012    	DB	"Dec"
000B39 00                  A  8013    	DB	0
000B3A                     A  8014    L__249:
000B3A 2D2D2D              A  8015    	DB	"---"
000B3D 00                  A  8016    	DB	0
000B3E                     A  8017    L__250:
000B3E 252D3473 2C202532   A  8018    	DB	"%-4s, %2d %-4s %4d %3d:%2d:%2d"
000B46 6420252D 34732025 
000B4E 34642025 33643A25 
000B56 32643A25 3264 
000B5C 0A00                A  8019    	DB	10,0
                           A  8020    	SEGMENT CODE
                           A  8021    ; 1031	
                           A  8022    ; 1032	/** @memo Gets the date
                           A  8023    ; 1033	 * @doc {\bf date}
                           A  8024    ; 1034	 *
                           A  8025    ; 1035	 * This command gets the current date and time 
                           A  8026    ; 1036	 * .
                           A  8027    ; 1037	 *
                           A  8028    ; 1038	 * This function takes no arguments.
                           A  8029    ; 1039	 * @name date
                           A  8030    ; 1040	 * @args
                           A  8031    ; 1041	 * @type
                           A  8032    ; 1042	 */
                           A  8033    ; 1043	/*------------------------------------------------------------------------
                           A  8034    ; 1044	 *  x_setdate  -  (command date) sets the date and time
                           A  8035    ; 1045	 *------------------------------------------------------------------------
                           A  8036    ; 1046	 */
                           A  8037    ; 1047	INT16
                           A  8038    ; 1048	Shell_setdatetime
                           A  8039    ; 1049	(
                           A  8040    ; 1050		struct shvars *				Shl,
                           A  8041    ; 1051		RZK_DEVICE_CB_t *								stdin,
                           A  8042    ; 1052		RZK_DEVICE_CB_t *								stdout, 
                           A  8043    ; 1053		RZK_DEVICE_CB_t *								stderr, 
                           A  8044    ; 1054		UINT16								nargs,
                           A  8045    ; 1055		INT8 *							args[]
                           A  8046    ; 1056	)
                           A  8047    ; 1057	{
001574                     A  8048    _Shell_setdatetime:
                           A  8049    .DEFINE "_Shell_setdatetime"
                           A  8050    
                           A  8051    .VALUE _Shell_setdatetime
                           A  8052    
                           A  8053    .CLASS 2
                           A  8054    
                           A  8055    .TYPE 67
                           A  8056    
                           A  8057    .ENDEF
                           A  8058    
                           A  8059    .BEGFUNC "Shell_setdatetime",1057,"_Shell_setdatetime"
                           A  8060    
                           A  8061    .LINE 1057
                           A  8062    
                           A  8063    .DEFINE "Shl"
                           A  8064    
                           A  8065    .CLASS 65
                           A  8066    
                           A  8067    .VALUE 6
                           A  8068    
                           A  8069    .TAG "shvars"
                           A  8070    
                           A  8071    .TYPE 40
                           A  8072    
                           A  8073    .ENDEF
                           A  8074    
                           A  8075    .DEFINE "stdin"
                           A  8076    
                           A  8077    .CLASS 65
                           A  8078    
                           A  8079    .VALUE 9
                           A  8080    
                           A  8081    .TAG "RZK_DEVICE_CB_t"
                           A  8082    
                           A  8083    .TYPE 40
                           A  8084    
                           A  8085    .ENDEF
                           A  8086    
                           A  8087    .DEFINE "stdout"
                           A  8088    
                           A  8089    .CLASS 65
                           A  8090    
                           A  8091    .VALUE 12
                           A  8092    
                           A  8093    .TAG "RZK_DEVICE_CB_t"
                           A  8094    
                           A  8095    .TYPE 40
                           A  8096    
                           A  8097    .ENDEF
                           A  8098    
                           A  8099    .DEFINE "stderr"
                           A  8100    
                           A  8101    .CLASS 65
                           A  8102    
                           A  8103    .VALUE 15
                           A  8104    
                           A  8105    .TAG "RZK_DEVICE_CB_t"
                           A  8106    
                           A  8107    .TYPE 40
                           A  8108    
                           A  8109    .ENDEF
                           A  8110    
                           A  8111    .DEFINE "nargs"
                           A  8112    
                           A  8113    .CLASS 65
                           A  8114    
                           A  8115    .VALUE 18
                           A  8116    
                           A  8117    .TYPE 13
                           A  8118    
                           A  8119    .ENDEF
                           A  8120    
                           A  8121    .DEFINE "args"
                           A  8122    
                           A  8123    .CLASS 65
                           A  8124    
                           A  8125    .VALUE 21
                           A  8126    
                           A  8127    .TYPE 290
                           A  8128    
                           A  8129    .ENDEF
                           A  8130    
                           A  8131    .DEFINE "cFlag"
                           A  8132    
                           A  8133    .CLASS 65
                           A  8134    
                           A  8135    .VALUE -1
                           A  8136    
                           A  8137    .TYPE 12
                           A  8138    
                           A  8139    .ENDEF
                           A  8140    
                           A  8141    .DEFINE "Time"
                           A  8142    
                           A  8143    .CLASS 65
                           A  8144    
                           A  8145    .VALUE -9
                           A  8146    
                           A  8147    .TAG "TIME"
                           A  8148    
                           A  8149    .TYPE 8
                           A  8150    
                           A  8151    .ENDEF
                           A  8152    
                           A  8153    .DEFINE "uint1"
                           A  8154    
                           A  8155    .CLASS 65
                           A  8156    
                           A  8157    .VALUE -12
                           A  8158    
                           A  8159    .TYPE 14
                           A  8160    
                           A  8161    .ENDEF
                           A  8162    
                           A  8163    .DEFINE "uint4"
                           A  8164    
                           A  8165    .CLASS 65
                           A  8166    
                           A  8167    .VALUE -15
                           A  8168    
                           A  8169    .TYPE 14
                           A  8170    
                           A  8171    .ENDEF
                           A  8172    
                           A  8173    .DEFINE "uint2"
                           A  8174    
                           A  8175    .CLASS 65
                           A  8176    
                           A  8177    .VALUE -18
                           A  8178    
                           A  8179    .TYPE 14
                           A  8180    
                           A  8181    .ENDEF
                           A  8182    
                           A  8183    .DEFINE "uint3"
                           A  8184    
                           A  8185    .CLASS 65
                           A  8186    
                           A  8187    .VALUE -21
                           A  8188    
                           A  8189    .TYPE 14
                           A  8190    
                           A  8191    .ENDEF
                           A  8192    
                           A  8193    .DEFINE "pdev"
                           A  8194    
                           A  8195    .CLASS 65
                           A  8196    
                           A  8197    .VALUE -24
                           A  8198    
                           A  8199    .TAG "RZK_DEVICE_CB_t"
                           A  8200    
                           A  8201    .TYPE 40
                           A  8202    
                           A  8203    .ENDEF
                           A  8204    
                           A  8205    .DEFINE "uint5"
                           A  8206    
                           A  8207    .CLASS 65
                           A  8208    
                           A  8209    .VALUE -27
                           A  8210    
                           A  8211    .TYPE 14
                           A  8212    
                           A  8213    .ENDEF
                           A  8214    
                           A  8215    .DEFINE "uint6"
                           A  8216    
                           A  8217    .CLASS 65
                           A  8218    
                           A  8219    .VALUE -30
                           A  8220    
                           A  8221    .TYPE 14
                           A  8222    
                           A  8223    .ENDEF
                           A  8224    
                           A  8225    .DEFINE "uint7"
                           A  8226    
                           A  8227    .CLASS 65
                           A  8228    
                           A  8229    .VALUE -33
                           A  8230    
                           A  8231    .TYPE 14
                           A  8232    
                           A  8233    .ENDEF
                           A  8234    
                           A  8235    .DEFINE "uint11"
                           A  8236    
                           A  8237    .CLASS 65
                           A  8238    
                           A  8239    .VALUE -36
                           A  8240    
                           A  8241    .TYPE 14
                           A  8242    
                           A  8243    .ENDEF
                           A  8244    
001574 DDE5                A  8245    	PUSH	IX
001576 DD210000 00         A  8246    	LD	IX,0
00157B DD39                A  8247    	ADD	IX,SP
00157D ED22DC              A  8248    	LEA	HL,IX+%FFFFFFDC
001580 F9                  A  8249    	LD	SP,HL
                           A  8250    ; 1058		UINT uint1,uint11,uint2,uint3,uint4,uint5,uint6,uint7;
                           A  8251    ; 1059		TIME Time;
                           A  8252    ; 1060	//	UINT32 seconds;
                           A  8253    ; 1061		UINT8 cFlag=0; 
                           A  8254    .LINE 1061
                           A  8255    
001581 DD36FF00            A  8256    	LD	(IX+%FFFFFFFF),%0
                           A  8257    ; 1062		RZK_DEVICE_CB_t *pdev ;
                           A  8258    ; 1063	
                           A  8259    ; 1064		if( nargs < 8 )
                           A  8260    .LINE 1064
                           A  8261    
001585 49010800            A  8262    	LD.LIS	BC,8
001589 DD2712              A  8263    	LD	HL,(IX+%12)
00158C B7                  A  8264    	OR	A,A
00158D 40ED42              A  8265    	SBC.SIS	HL,BC
001590 30 1C               A  8266    	JR	NC,L_334
                           A  8267    ; 1065		{
                           A  8268    ; 1066			printf("\nThe syntax of the command is incorrect\n");
                           A  8269    .LINE 1066
                           A  8270    
001592 01 5E 0B 00         A  8271    	LD	BC,L__253
001596 C5                  A  8272    	PUSH	BC
001597 CD 00 00 00         A  8273    	CALL	_printf
00159B C1                  A  8274    	POP	BC
                           A  8275    ; 1067			printf("settime <year> <month> <dayofmonth> <dayofweek> <hrs> <mins> <secs>\n");
                           A  8276    .LINE 1067
                           A  8277    
00159C 01 87 0B 00         A  8278    	LD	BC,L__254
0015A0 C5                  A  8279    	PUSH	BC
0015A1 CD 00 00 00         A  8280    	CALL	_printf
0015A5 C1                  A  8281    	POP	BC
                           A  8282    ; 1068			return ZSHELL_FAILURE ;
                           A  8283    .LINE 1068
                           A  8284    
0015A6 4921FFFF            A  8285    	LD.LIS	HL,-1
0015AA C3 D5 17 00         A  8286    	JR	L_354
                           A  8287    ; 1069		}
0015AE                     A  8288    L_334:
                           A  8289    .LINE 1069
                           A  8290    
                           A  8291    ; 1070	
                           A  8292    ; 1071		sscanf((const INT8 *)args[1],"%6d",&uint1);
                           A  8293    .LINE 1071
                           A  8294    
0015AE ED65F4              A  8295    	PEA	IX+%FFFFFFF4
0015B1 01 CC 0B 00         A  8296    	LD	BC,L__255
0015B5 C5                  A  8297    	PUSH	BC
0015B6 DD3115              A  8298    	LD	IY,(IX+%15)
0015B9 ED2303              A  8299    	LEA	HL,IY+%3
0015BC ED07                A  8300    	LD	BC,(HL)
0015BE C5                  A  8301    	PUSH	BC
0015BF CD 00 00 00         A  8302    	CALL	_sscanf
0015C3 C1                  A  8303    	POP	BC
0015C4 C1                  A  8304    	POP	BC
0015C5 C1                  A  8305    	POP	BC
                           A  8306    ; 1072	
                           A  8307    ; 1073		uint11 = uint1%100;
                           A  8308    .LINE 1073
                           A  8309    
0015C6 DD27F4              A  8310    	LD	HL,(IX+%FFFFFFF4)
0015C9 01640000            A  8311    	LD	BC,100
0015CD CD 00 00 00         A  8312    	CALL	__iremu
0015D1 DD2FDC              A  8313    	LD	(IX+%FFFFFFDC),HL
                           A  8314    ; 1074		uint1 = uint1/100;
                           A  8315    .LINE 1074
                           A  8316    
0015D4 DD27F4              A  8317    	LD	HL,(IX+%FFFFFFF4)
0015D7 01640000            A  8318    	LD	BC,100
0015DB CD 00 00 00         A  8319    	CALL	__idivu
0015DF DD2FF4              A  8320    	LD	(IX+%FFFFFFF4),HL
                           A  8321    ; 1075		
                           A  8322    ; 1076		sscanf((const INT8 *)args[2],"%6d",&uint2);
                           A  8323    .LINE 1076
                           A  8324    
0015E2 ED65EE              A  8325    	PEA	IX+%FFFFFFEE
0015E5 01 D0 0B 00         A  8326    	LD	BC,L__256
0015E9 C5                  A  8327    	PUSH	BC
0015EA DD3115              A  8328    	LD	IY,(IX+%15)
0015ED ED2306              A  8329    	LEA	HL,IY+%6
0015F0 ED07                A  8330    	LD	BC,(HL)
0015F2 C5                  A  8331    	PUSH	BC
0015F3 CD 00 00 00         A  8332    	CALL	_sscanf
0015F7 C1                  A  8333    	POP	BC
0015F8 C1                  A  8334    	POP	BC
0015F9 C1                  A  8335    	POP	BC
                           A  8336    ; 1077		if((uint2 > 12) || (uint2 <= 0))
                           A  8337    .LINE 1077
                           A  8338    
0015FA DD07EE              A  8339    	LD	BC,(IX+%FFFFFFEE)
0015FD 210C0000            A  8340    	LD	HL,12
001601 B7                  A  8341    	OR	A,A
001602 ED42                A  8342    	SBC	HL,BC
001604 38 0B               A  8343    	JR	C,L_336
001606 DD07EE              A  8344    	LD	BC,(IX+%FFFFFFEE)
001609 B7                  A  8345    	OR	A,A
00160A ED62                A  8346    	SBC	HL,HL
00160C B7                  A  8347    	OR	A,A
00160D ED42                A  8348    	SBC	HL,BC
00160F 38 0E               A  8349    	JR	C,L_337
001611                     A  8350    L_336:
                           A  8351    ; 1078		{
                           A  8352    ; 1079			printf("\nPlease enter month less than or equal to 12\n");
                           A  8353    .LINE 1079
                           A  8354    
001611 01 D4 0B 00         A  8355    	LD	BC,L__259
001615 C5                  A  8356    	PUSH	BC
001616 CD 00 00 00         A  8357    	CALL	_printf
00161A C1                  A  8358    	POP	BC
                           A  8359    ; 1080			cFlag = 1;
                           A  8360    .LINE 1080
                           A  8361    
00161B DD36FF01            A  8362    	LD	(IX+%FFFFFFFF),%1
                           A  8363    ; 1081		}
00161F                     A  8364    L_337:
                           A  8365    .LINE 1081
                           A  8366    
                           A  8367    ; 1082	
                           A  8368    ; 1083		sscanf((const INT8 *)args[3],"%6d",&uint3);
                           A  8369    .LINE 1083
                           A  8370    
00161F ED65EB              A  8371    	PEA	IX+%FFFFFFEB
001622 01 02 0C 00         A  8372    	LD	BC,L__260
001626 C5                  A  8373    	PUSH	BC
001627 DD3115              A  8374    	LD	IY,(IX+%15)
00162A ED2309              A  8375    	LEA	HL,IY+%9
00162D ED07                A  8376    	LD	BC,(HL)
00162F C5                  A  8377    	PUSH	BC
001630 CD 00 00 00         A  8378    	CALL	_sscanf
001634 C1                  A  8379    	POP	BC
001635 C1                  A  8380    	POP	BC
001636 C1                  A  8381    	POP	BC
                           A  8382    ; 1084		if((uint3 > 31) || (uint3 <= 0))
                           A  8383    .LINE 1084
                           A  8384    
001637 DD07EB              A  8385    	LD	BC,(IX+%FFFFFFEB)
00163A 211F0000            A  8386    	LD	HL,31
00163E B7                  A  8387    	OR	A,A
00163F ED42                A  8388    	SBC	HL,BC
001641 38 0B               A  8389    	JR	C,L_339
001643 DD07EB              A  8390    	LD	BC,(IX+%FFFFFFEB)
001646 B7                  A  8391    	OR	A,A
001647 ED62                A  8392    	SBC	HL,HL
001649 B7                  A  8393    	OR	A,A
00164A ED42                A  8394    	SBC	HL,BC
00164C 38 0E               A  8395    	JR	C,L_340
00164E                     A  8396    L_339:
                           A  8397    ; 1085		{
                           A  8398    ; 1086			printf("\nPlease enter day of month less than or equal to 31\n");
                           A  8399    .LINE 1086
                           A  8400    
00164E 01 06 0C 00         A  8401    	LD	BC,L__263
001652 C5                  A  8402    	PUSH	BC
001653 CD 00 00 00         A  8403    	CALL	_printf
001657 C1                  A  8404    	POP	BC
                           A  8405    ; 1087			cFlag = 1;
                           A  8406    .LINE 1087
                           A  8407    
001658 DD36FF01            A  8408    	LD	(IX+%FFFFFFFF),%1
                           A  8409    ; 1088		}
00165C                     A  8410    L_340:
                           A  8411    .LINE 1088
                           A  8412    
                           A  8413    ; 1089	
                           A  8414    ; 1090		sscanf((const INT8 *)args[4],"%6d",&uint4);
                           A  8415    .LINE 1090
                           A  8416    
00165C ED65F1              A  8417    	PEA	IX+%FFFFFFF1
00165F 01 3B 0C 00         A  8418    	LD	BC,L__264
001663 C5                  A  8419    	PUSH	BC
001664 DD3115              A  8420    	LD	IY,(IX+%15)
001667 ED230C              A  8421    	LEA	HL,IY+%C
00166A ED07                A  8422    	LD	BC,(HL)
00166C C5                  A  8423    	PUSH	BC
00166D CD 00 00 00         A  8424    	CALL	_sscanf
001671 C1                  A  8425    	POP	BC
001672 C1                  A  8426    	POP	BC
001673 C1                  A  8427    	POP	BC
                           A  8428    ; 1091		if((uint4 > 7) || (uint4 <= 0))
                           A  8429    .LINE 1091
                           A  8430    
001674 DD07F1              A  8431    	LD	BC,(IX+%FFFFFFF1)
001677 21070000            A  8432    	LD	HL,7
00167B B7                  A  8433    	OR	A,A
00167C ED42                A  8434    	SBC	HL,BC
00167E 38 0B               A  8435    	JR	C,L_342
001680 DD07F1              A  8436    	LD	BC,(IX+%FFFFFFF1)
001683 B7                  A  8437    	OR	A,A
001684 ED62                A  8438    	SBC	HL,HL
001686 B7                  A  8439    	OR	A,A
001687 ED42                A  8440    	SBC	HL,BC
001689 38 0E               A  8441    	JR	C,L_343
00168B                     A  8442    L_342:
                           A  8443    ; 1092		{
                           A  8444    ; 1093			printf("\nPlease enter day of week less than or equal to 7, 1-Mon 7-Sun\n");
                           A  8445    .LINE 1093
                           A  8446    
00168B 01 3F 0C 00         A  8447    	LD	BC,L__267
00168F C5                  A  8448    	PUSH	BC
001690 CD 00 00 00         A  8449    	CALL	_printf
001694 C1                  A  8450    	POP	BC
                           A  8451    ; 1094			cFlag = 1;
                           A  8452    .LINE 1094
                           A  8453    
001695 DD36FF01            A  8454    	LD	(IX+%FFFFFFFF),%1
                           A  8455    ; 1095		}
001699                     A  8456    L_343:
                           A  8457    .LINE 1095
                           A  8458    
                           A  8459    ; 1096	
                           A  8460    ; 1097		sscanf((const INT8 *)args[5],"%6d",&uint5);
                           A  8461    .LINE 1097
                           A  8462    
001699 ED65E5              A  8463    	PEA	IX+%FFFFFFE5
00169C 01 7F 0C 00         A  8464    	LD	BC,L__268
0016A0 C5                  A  8465    	PUSH	BC
0016A1 DD3115              A  8466    	LD	IY,(IX+%15)
0016A4 ED230F              A  8467    	LEA	HL,IY+%F
0016A7 ED07                A  8468    	LD	BC,(HL)
0016A9 C5                  A  8469    	PUSH	BC
0016AA CD 00 00 00         A  8470    	CALL	_sscanf
0016AE C1                  A  8471    	POP	BC
0016AF C1                  A  8472    	POP	BC
0016B0 C1                  A  8473    	POP	BC
                           A  8474    ; 1098		if(uint5 >= 24)
                           A  8475    .LINE 1098
                           A  8476    
0016B1 01180000            A  8477    	LD	BC,24
0016B5 DD27E5              A  8478    	LD	HL,(IX+%FFFFFFE5)
0016B8 B7                  A  8479    	OR	A,A
0016B9 ED42                A  8480    	SBC	HL,BC
0016BB 38 0E               A  8481    	JR	C,L_345
                           A  8482    ; 1099		{
                           A  8483    ; 1100			printf("\nPlease enter hrs less than or equal to 24\n");
                           A  8484    .LINE 1100
                           A  8485    
0016BD 01 83 0C 00         A  8486    	LD	BC,L__270
0016C1 C5                  A  8487    	PUSH	BC
0016C2 CD 00 00 00         A  8488    	CALL	_printf
0016C6 C1                  A  8489    	POP	BC
                           A  8490    ; 1101			cFlag = 1;
                           A  8491    .LINE 1101
                           A  8492    
0016C7 DD36FF01            A  8493    	LD	(IX+%FFFFFFFF),%1
                           A  8494    ; 1102		}
0016CB                     A  8495    L_345:
                           A  8496    .LINE 1102
                           A  8497    
                           A  8498    ; 1103	
                           A  8499    ; 1104		sscanf((const INT8 *)args[6],"%6d",&uint6);
                           A  8500    .LINE 1104
                           A  8501    
0016CB ED65E2              A  8502    	PEA	IX+%FFFFFFE2
0016CE 01 AF 0C 00         A  8503    	LD	BC,L__271
0016D2 C5                  A  8504    	PUSH	BC
0016D3 DD3115              A  8505    	LD	IY,(IX+%15)
0016D6 ED2312              A  8506    	LEA	HL,IY+%12
0016D9 ED07                A  8507    	LD	BC,(HL)
0016DB C5                  A  8508    	PUSH	BC
0016DC CD 00 00 00         A  8509    	CALL	_sscanf
0016E0 C1                  A  8510    	POP	BC
0016E1 C1                  A  8511    	POP	BC
0016E2 C1                  A  8512    	POP	BC
                           A  8513    ; 1105		if(uint6 >= 60)
                           A  8514    .LINE 1105
                           A  8515    
0016E3 013C0000            A  8516    	LD	BC,60
0016E7 DD27E2              A  8517    	LD	HL,(IX+%FFFFFFE2)
0016EA B7                  A  8518    	OR	A,A
0016EB ED42                A  8519    	SBC	HL,BC
0016ED 38 0E               A  8520    	JR	C,L_347
                           A  8521    ; 1106		{
                           A  8522    ; 1107			printf("\nPlease enter minutes less than or equal to 60\n");
                           A  8523    .LINE 1107
                           A  8524    
0016EF 01 B3 0C 00         A  8525    	LD	BC,L__273
0016F3 C5                  A  8526    	PUSH	BC
0016F4 CD 00 00 00         A  8527    	CALL	_printf
0016F8 C1                  A  8528    	POP	BC
                           A  8529    ; 1108			cFlag = 1;
                           A  8530    .LINE 1108
                           A  8531    
0016F9 DD36FF01            A  8532    	LD	(IX+%FFFFFFFF),%1
                           A  8533    ; 1109		}
0016FD                     A  8534    L_347:
                           A  8535    .LINE 1109
                           A  8536    
                           A  8537    ; 1110	
                           A  8538    ; 1111		sscanf((const INT8 *)args[7],"%6d",&uint7);
                           A  8539    .LINE 1111
                           A  8540    
0016FD ED65DF              A  8541    	PEA	IX+%FFFFFFDF
001700 01 E3 0C 00         A  8542    	LD	BC,L__274
001704 C5                  A  8543    	PUSH	BC
001705 DD3115              A  8544    	LD	IY,(IX+%15)
001708 ED2315              A  8545    	LEA	HL,IY+%15
00170B ED07                A  8546    	LD	BC,(HL)
00170D C5                  A  8547    	PUSH	BC
00170E CD 00 00 00         A  8548    	CALL	_sscanf
001712 C1                  A  8549    	POP	BC
001713 C1                  A  8550    	POP	BC
001714 C1                  A  8551    	POP	BC
                           A  8552    ; 1112		if(uint7 >= 60)
                           A  8553    .LINE 1112
                           A  8554    
001715 013C0000            A  8555    	LD	BC,60
001719 DD27DF              A  8556    	LD	HL,(IX+%FFFFFFDF)
00171C B7                  A  8557    	OR	A,A
00171D ED42                A  8558    	SBC	HL,BC
00171F 38 0E               A  8559    	JR	C,L_350
                           A  8560    ; 1113		{
                           A  8561    ; 1114			printf("\nPlease enter seconds less than or equal to 60\n");
                           A  8562    .LINE 1114
                           A  8563    
001721 01 E7 0C 00         A  8564    	LD	BC,L__276
001725 C5                  A  8565    	PUSH	BC
001726 CD 00 00 00         A  8566    	CALL	_printf
00172A C1                  A  8567    	POP	BC
                           A  8568    ; 1115			cFlag = 1;
                           A  8569    .LINE 1115
                           A  8570    
00172B DD36FF01            A  8571    	LD	(IX+%FFFFFFFF),%1
                           A  8572    ; 1116		}
00172F                     A  8573    L_350:
                           A  8574    .LINE 1116
                           A  8575    
                           A  8576    ; 1117	
                           A  8577    ; 1118		if(cFlag == 1)
                           A  8578    .LINE 1118
                           A  8579    
00172F DD7EFF              A  8580    	LD	A,(IX+%FFFFFFFF)
001732 FE01                A  8581    	CP	A,%1
001734 20 08               A  8582    	JR	NZ,L_351
                           A  8583    ; 1119			return(-1);
                           A  8584    .LINE 1119
                           A  8585    
001736 4921FFFF            A  8586    	LD.LIS	HL,-1
00173A C3 D5 17 00         A  8587    	JR	L_354
00173E                     A  8588    L_351:
                           A  8589    ; 1120		Time.cent = (UINT8)uint1;
                           A  8590    .LINE 1120
                           A  8591    
00173E DD7EF4              A  8592    	LD	A,(IX+%FFFFFFF4)
001741 DD77FE              A  8593    	LD	(IX+%FFFFFFFE),A
                           A  8594    ; 1121		Time.year = (UINT8)uint11;
                           A  8595    .LINE 1121
                           A  8596    
001744 DD7EDC              A  8597    	LD	A,(IX+%FFFFFFDC)
001747 DD77FD              A  8598    	LD	(IX+%FFFFFFFD),A
                           A  8599    ; 1122		Time.mon = (UINT8)uint2;
                           A  8600    .LINE 1122
                           A  8601    
00174A DD7EEE              A  8602    	LD	A,(IX+%FFFFFFEE)
00174D DD77FC              A  8603    	LD	(IX+%FFFFFFFC),A
                           A  8604    ; 1123		Time.dayOfMonth = (UINT8)uint3;
                           A  8605    .LINE 1123
                           A  8606    
001750 DD7EEB              A  8607    	LD	A,(IX+%FFFFFFEB)
001753 DD77FA              A  8608    	LD	(IX+%FFFFFFFA),A
                           A  8609    ; 1124		Time.dayOfWeek = (UINT8)uint4;
                           A  8610    .LINE 1124
                           A  8611    
001756 DD7EF1              A  8612    	LD	A,(IX+%FFFFFFF1)
001759 DD77FB              A  8613    	LD	(IX+%FFFFFFFB),A
                           A  8614    ; 1125		Time.hrs = (UINT8)uint5;
                           A  8615    .LINE 1125
                           A  8616    
00175C DD7EE5              A  8617    	LD	A,(IX+%FFFFFFE5)
00175F DD77F9              A  8618    	LD	(IX+%FFFFFFF9),A
                           A  8619    ; 1126		Time.minutes = (UINT8)uint6;
                           A  8620    .LINE 1126
                           A  8621    
001762 DD7EE2              A  8622    	LD	A,(IX+%FFFFFFE2)
001765 DD77F8              A  8623    	LD	(IX+%FFFFFFF8),A
                           A  8624    ; 1127		Time.sec = (UINT8)uint7;
                           A  8625    .LINE 1127
                           A  8626    
001768 DD7EDF              A  8627    	LD	A,(IX+%FFFFFFDF)
00176B DD77F7              A  8628    	LD	(IX+%FFFFFFF7),A
                           A  8629    ; 1128	
                           A  8630    ; 1129		pdev = RZKDevOpen("RTC",0) ;
                           A  8631    .LINE 1129
                           A  8632    
00176E 01000000            A  8633    	LD	BC,0
001772 C5                  A  8634    	PUSH	BC
001773 01 17 0D 00         A  8635    	LD	BC,L__278
001777 C5                  A  8636    	PUSH	BC
001778 CD 00 00 00         A  8637    	CALL	_RZKDevOpen
00177C C1                  A  8638    	POP	BC
00177D C1                  A  8639    	POP	BC
00177E DD2FE8              A  8640    	LD	(IX+%FFFFFFE8),HL
                           A  8641    ; 1130		if( pdev == NULL )
                           A  8642    .LINE 1130
                           A  8643    
001781 CD 00 00 00         A  8644    	CALL	__icmpzero
001785 20 10               A  8645    	JR	NZ,L_353
                           A  8646    ; 1131		{
                           A  8647    ; 1132			printf("\nRTC driver is not present");
                           A  8648    .LINE 1132
                           A  8649    
001787 01 1B 0D 00         A  8650    	LD	BC,L__280
00178B C5                  A  8651    	PUSH	BC
00178C CD 00 00 00         A  8652    	CALL	_printf
001790 C1                  A  8653    	POP	BC
                           A  8654    ; 1133			return (-1);
                           A  8655    .LINE 1133
                           A  8656    
001791 4921FFFF            A  8657    	LD.LIS	HL,-1
001795 18 3E               A  8658    	JR	L_354
                           A  8659    ; 1134		}
001797                     A  8660    L_353:
                           A  8661    .LINE 1134
                           A  8662    
                           A  8663    ; 1135	
                           A  8664    ; 1136		RZKDevIOCTL( pdev, RTC_RESET_CONTROL, ( void * ) &Time, ( void * ) &Time ) ;
                           A  8665    .LINE 1136
                           A  8666    
001797 ED65F7              A  8667    	PEA	IX+%FFFFFFF7
00179A ED65F7              A  8668    	PEA	IX+%FFFFFFF7
00179D 01000000            A  8669    	LD	BC,0
0017A1 C5                  A  8670    	PUSH	BC
0017A2 01100000            A  8671    	LD	BC,16
0017A6 C5                  A  8672    	PUSH	BC
0017A7 DD07E8              A  8673    	LD	BC,(IX+%FFFFFFE8)
0017AA C5                  A  8674    	PUSH	BC
0017AB CD 00 00 00         A  8675    	CALL	_RZKDevIOCTL
0017AF C1                  A  8676    	POP	BC
0017B0 C1                  A  8677    	POP	BC
0017B1 C1                  A  8678    	POP	BC
0017B2 C1                  A  8679    	POP	BC
0017B3 C1                  A  8680    	POP	BC
                           A  8681    ; 1137		RZKDevIOCTL( pdev, RTC_SET_ALL, ( void * ) &Time, ( void * ) &Time ) ;
                           A  8682    .LINE 1137
                           A  8683    
0017B4 ED65F7              A  8684    	PEA	IX+%FFFFFFF7
0017B7 ED65F7              A  8685    	PEA	IX+%FFFFFFF7
0017BA 01000000            A  8686    	LD	BC,0
0017BE C5                  A  8687    	PUSH	BC
0017BF 010B0000            A  8688    	LD	BC,11
0017C3 C5                  A  8689    	PUSH	BC
0017C4 DD07E8              A  8690    	LD	BC,(IX+%FFFFFFE8)
0017C7 C5                  A  8691    	PUSH	BC
0017C8 CD 00 00 00         A  8692    	CALL	_RZKDevIOCTL
0017CC C1                  A  8693    	POP	BC
0017CD C1                  A  8694    	POP	BC
0017CE C1                  A  8695    	POP	BC
0017CF C1                  A  8696    	POP	BC
0017D0 C1                  A  8697    	POP	BC
                           A  8698    ; 1138		return(OK);
                           A  8699    .LINE 1138
                           A  8700    
0017D1 49210100            A  8701    	LD.LIS	HL,1
                           A  8702    ; 1139	}
0017D5                     A  8703    L_354:
                           A  8704    .LINE 1139
                           A  8705    
0017D5 DDF9                A  8706    	LD	SP,IX
0017D7 DDE1                A  8707    	POP	IX
0017D9 C9                  A  8708    	RET	
                           A  8709    
                           A  8710    
                           A  8711    ;**************************** _Shell_setdatetime ***************************
                           A  8712    ;Name                         Addr/Register   Size   Type
                           A  8713    ;_RZKDevIOCTL                        IMPORT  -----   function
                           A  8714    ;_RZKDevOpen                         IMPORT  -----   function
                           A  8715    ;_sscanf                             IMPORT  -----   function
                           A  8716    ;_printf                             IMPORT  -----   function
                           A  8717    ;uint11                               IX-36      3   variable
                           A  8718    ;uint7                                IX-33      3   variable
                           A  8719    ;uint6                                IX-30      3   variable
                           A  8720    ;uint5                                IX-27      3   variable
                           A  8721    ;pdev                                 IX-24      3   variable
                           A  8722    ;uint3                                IX-21      3   variable
                           A  8723    ;uint2                                IX-18      3   variable
                           A  8724    ;uint4                                IX-15      3   variable
                           A  8725    ;uint1                                IX-12      3   variable
                           A  8726    ;Time                                  IX-9      8   variable
                           A  8727    ;cFlag                                 IX-1      1   variable
                           A  8728    ;args                                 IX+21      3   parameter
                           A  8729    ;nargs                                IX+18      2   parameter
                           A  8730    ;stderr                               IX+15      3   parameter
                           A  8731    ;stdout                               IX+12      3   parameter
                           A  8732    ;stdin                                 IX+9      3   parameter
                           A  8733    ;Shl                                   IX+6      3   parameter
                           A  8734    
                           A  8735    
                           A  8736    ; Stack Frame Size: 60 (bytes)
                           A  8737    ;       Spill Code: 0 (instruction)
                           A  8738    
                           A  8739    
                           A  8740    .ENDFUNC "Shell_setdatetime",1139,"_Shell_setdatetime"
                           A  8741    	SEGMENT STRSECT
000B5E                     A  8742    L__253:
000B5E 0A                  A  8743    	DB	10
000B5F 54686520 73796E74   A  8744    	DB	"The syntax of the command is incorrect"
000B67 6178206F 66207468 
000B6F 6520636F 6D6D616E 
000B77 64206973 20696E63 
000B7F 6F727265 6374 
000B85 0A00                A  8745    	DB	10,0
000B87                     A  8746    L__254:
000B87 73657474 696D6520   A  8747    	DB	"settime <year> <month> <dayofmonth> <dayofweek> <hrs> <mins> <secs>"
000B8F 3C796561 723E203C 
000B97 6D6F6E74 683E203C 
000B9F 6461796F 666D6F6E 
000BA7 74683E20 3C646179 
000BAF 6F667765 656B3E20 
000BB7 3C687273 3E203C6D 
000BBF 696E733E 203C7365 
000BC7 63733E 
000BCA 0A00                A  8748    	DB	10,0
000BCC                     A  8749    L__255:
000BCC 253664              A  8750    	DB	"%6d"
000BCF 00                  A  8751    	DB	0
000BD0                     A  8752    L__256:
000BD0 253664              A  8753    	DB	"%6d"
000BD3 00                  A  8754    	DB	0
000BD4                     A  8755    L__259:
000BD4 0A                  A  8756    	DB	10
000BD5 506C6561 73652065   A  8757    	DB	"Please enter month less than or equal to 12"
000BDD 6E746572 206D6F6E 
000BE5 7468206C 65737320 
000BED 7468616E 206F7220 
000BF5 65717561 6C20746F 
000BFD 203132 
000C00 0A00                A  8758    	DB	10,0
000C02                     A  8759    L__260:
000C02 253664              A  8760    	DB	"%6d"
000C05 00                  A  8761    	DB	0
000C06                     A  8762    L__263:
000C06 0A                  A  8763    	DB	10
000C07 506C6561 73652065   A  8764    	DB	"Please enter day of month less than or equal to 31"
000C0F 6E746572 20646179 
000C17 206F6620 6D6F6E74 
000C1F 68206C65 73732074 
000C27 68616E20 6F722065 
000C2F 7175616C 20746F20 
000C37 3331 
000C39 0A00                A  8765    	DB	10,0
000C3B                     A  8766    L__264:
000C3B 253664              A  8767    	DB	"%6d"
000C3E 00                  A  8768    	DB	0
000C3F                     A  8769    L__267:
000C3F 0A                  A  8770    	DB	10
000C40 506C6561 73652065   A  8771    	DB	"Please enter day of week less than or equal to 7, 1-Mon 7-Sun"
000C48 6E746572 20646179 
000C50 206F6620 7765656B 
000C58 206C6573 73207468 
000C60 616E206F 72206571 
000C68 75616C20 746F2037 
000C70 2C20312D 4D6F6E20 
000C78 372D5375 6E 
000C7D 0A00                A  8772    	DB	10,0
000C7F                     A  8773    L__268:
000C7F 253664              A  8774    	DB	"%6d"
000C82 00                  A  8775    	DB	0
000C83                     A  8776    L__270:
000C83 0A                  A  8777    	DB	10
000C84 506C6561 73652065   A  8778    	DB	"Please enter hrs less than or equal to 24"
000C8C 6E746572 20687273 
000C94 206C6573 73207468 
000C9C 616E206F 72206571 
000CA4 75616C20 746F2032 
000CAC 34 
000CAD 0A00                A  8779    	DB	10,0
000CAF                     A  8780    L__271:
000CAF 253664              A  8781    	DB	"%6d"
000CB2 00                  A  8782    	DB	0
000CB3                     A  8783    L__273:
000CB3 0A                  A  8784    	DB	10
000CB4 506C6561 73652065   A  8785    	DB	"Please enter minutes less than or equal to 60"
000CBC 6E746572 206D696E 
000CC4 75746573 206C6573 
000CCC 73207468 616E206F 
000CD4 72206571 75616C20 
000CDC 746F2036 30 
000CE1 0A00                A  8786    	DB	10,0
000CE3                     A  8787    L__274:
000CE3 253664              A  8788    	DB	"%6d"
000CE6 00                  A  8789    	DB	0
000CE7                     A  8790    L__276:
000CE7 0A                  A  8791    	DB	10
000CE8 506C6561 73652065   A  8792    	DB	"Please enter seconds less than or equal to 60"
000CF0 6E746572 20736563 
000CF8 6F6E6473 206C6573 
000D00 73207468 616E206F 
000D08 72206571 75616C20 
000D10 746F2036 30 
000D15 0A00                A  8793    	DB	10,0
000D17                     A  8794    L__278:
000D17 525443              A  8795    	DB	"RTC"
000D1A 00                  A  8796    	DB	0
000D1B                     A  8797    L__280:
000D1B 0A                  A  8798    	DB	10
000D1C 52544320 64726976   A  8799    	DB	"RTC driver is not present"
000D24 65722069 73206E6F 
000D2C 74207072 6573656E 
000D34 74 
000D35 00                  A  8800    	DB	0
                           A  8801    	SEGMENT CODE
                           A  8802    ; 1140	
                           A  8803    ; 1141	
                           A  8804    ; 1142	/* The following function is used to delete a 
                           A  8805    ; 1143	   file given by the user */
                           A  8806    ; 1144	INT16 Shell_ZFSCreateFile (
                           A  8807    ; 1145		struct shvars *			Shl,
                           A  8808    ; 1146		RZK_DEVICE_CB_t *						stdin,
                           A  8809    ; 1147		RZK_DEVICE_CB_t *						stdout, 
                           A  8810    ; 1148		RZK_DEVICE_CB_t *						stderr, 
                           A  8811    ; 1149		UINT16					nargs,
                           A  8812    ; 1150		INT8					*argv[]
                           A  8813    ; 1151	)
                           A  8814    ; 1152	{
0017DA                     A  8815    _Shell_ZFSCreateFile:
                           A  8816    .DEFINE "_Shell_ZFSCreateFile"
                           A  8817    
                           A  8818    .VALUE _Shell_ZFSCreateFile
                           A  8819    
                           A  8820    .CLASS 2
                           A  8821    
                           A  8822    .TYPE 67
                           A  8823    
                           A  8824    .ENDEF
                           A  8825    
                           A  8826    .BEGFUNC "Shell_ZFSCreateFile",1152,"_Shell_ZFSCreateFile"
                           A  8827    
                           A  8828    .LINE 1152
                           A  8829    
                           A  8830    .DEFINE "Shl"
                           A  8831    
                           A  8832    .CLASS 65
                           A  8833    
                           A  8834    .VALUE 6
                           A  8835    
                           A  8836    .TAG "shvars"
                           A  8837    
                           A  8838    .TYPE 40
                           A  8839    
                           A  8840    .ENDEF
                           A  8841    
                           A  8842    .DEFINE "stdin"
                           A  8843    
                           A  8844    .CLASS 65
                           A  8845    
                           A  8846    .VALUE 9
                           A  8847    
                           A  8848    .TAG "RZK_DEVICE_CB_t"
                           A  8849    
                           A  8850    .TYPE 40
                           A  8851    
                           A  8852    .ENDEF
                           A  8853    
                           A  8854    .DEFINE "stdout"
                           A  8855    
                           A  8856    .CLASS 65
                           A  8857    
                           A  8858    .VALUE 12
                           A  8859    
                           A  8860    .TAG "RZK_DEVICE_CB_t"
                           A  8861    
                           A  8862    .TYPE 40
                           A  8863    
                           A  8864    .ENDEF
                           A  8865    
                           A  8866    .DEFINE "stderr"
                           A  8867    
                           A  8868    .CLASS 65
                           A  8869    
                           A  8870    .VALUE 15
                           A  8871    
                           A  8872    .TAG "RZK_DEVICE_CB_t"
                           A  8873    
                           A  8874    .TYPE 40
                           A  8875    
                           A  8876    .ENDEF
                           A  8877    
                           A  8878    .DEFINE "nargs"
                           A  8879    
                           A  8880    .CLASS 65
                           A  8881    
                           A  8882    .VALUE 18
                           A  8883    
                           A  8884    .TYPE 13
                           A  8885    
                           A  8886    .ENDEF
                           A  8887    
                           A  8888    .DEFINE "argv"
                           A  8889    
                           A  8890    .CLASS 65
                           A  8891    
                           A  8892    .VALUE 21
                           A  8893    
                           A  8894    .TYPE 290
                           A  8895    
                           A  8896    .ENDEF
                           A  8897    
                           A  8898    .DEFINE "buf"
                           A  8899    
                           A  8900    .CLASS 65
                           A  8901    
                           A  8902    .VALUE -3
                           A  8903    
                           A  8904    .TYPE 34
                           A  8905    
                           A  8906    .ENDEF
                           A  8907    
                           A  8908    .DEFINE "fileName"
                           A  8909    
                           A  8910    .CLASS 65
                           A  8911    
                           A  8912    .VALUE -6
                           A  8913    
                           A  8914    .TYPE 34
                           A  8915    
                           A  8916    .ENDEF
                           A  8917    
                           A  8918    .DEFINE "fileHandle1"
                           A  8919    
                           A  8920    .CLASS 65
                           A  8921    
                           A  8922    .VALUE -9
                           A  8923    
                           A  8924    .TYPE 33
                           A  8925    
                           A  8926    .ENDEF
                           A  8927    
                           A  8928    .DEFINE "len"
                           A  8929    
                           A  8930    .CLASS 65
                           A  8931    
                           A  8932    .VALUE -12
                           A  8933    
                           A  8934    .TYPE 4
                           A  8935    
                           A  8936    .ENDEF
                           A  8937    
                           A  8938    .DEFINE "numBytes"
                           A  8939    
                           A  8940    .CLASS 65
                           A  8941    
                           A  8942    .VALUE -16
                           A  8943    
                           A  8944    .TYPE 5
                           A  8945    
                           A  8946    .ENDEF
                           A  8947    
                           A  8948    .DEFINE "size"
                           A  8949    
                           A  8950    .CLASS 65
                           A  8951    
                           A  8952    .VALUE -20
                           A  8953    
                           A  8954    .TYPE 15
                           A  8955    
                           A  8956    .ENDEF
                           A  8957    
0017DA DDE5                A  8958    	PUSH	IX
0017DC DD210000 00         A  8959    	LD	IX,0
0017E1 DD39                A  8960    	ADD	IX,SP
0017E3 ED22EC              A  8961    	LEA	HL,IX+%FFFFFFEC
0017E6 F9                  A  8962    	LD	SP,HL
                           A  8963    ; 1153		INT8			*fileName;
                           A  8964    ; 1154		INT			len ;
                           A  8965    ; 1155		INT32			numBytes;
                           A  8966    ; 1156		UINT32			size;
                           A  8967    ; 1157		ZFS_HANDLE_t	fileHandle1;
                           A  8968    ; 1158		INT8 			*buf;
                           A  8969    ; 1159		INT16 ret_val = ZSHELL_FAILURE ;
                           A  8970    ; 1160	
                           A  8971    ; 1161	
                           A  8972    ; 1162		/** Chekck the number of arguments, return error if not valid number  */
                           A  8973    ; 1163		if( nargs != 2 )
                           A  8974    .LINE 1163
                           A  8975    
0017E7 49010200            A  8976    	LD.LIS	BC,2
0017EB DD2712              A  8977    	LD	HL,(IX+%12)
0017EE B7                  A  8978    	OR	A,A
0017EF 40ED42              A  8979    	SBC.SIS	HL,BC
0017F2 28 1C               A  8980    	JR	Z,L_356
                           A  8981    ; 1164		{
                           A  8982    ; 1165			printf("\nThe syntax of the command is incorrect\n");
                           A  8983    .LINE 1165
                           A  8984    
0017F4 01 36 0D 00         A  8985    	LD	BC,L__283
0017F8 C5                  A  8986    	PUSH	BC
0017F9 CD 00 00 00         A  8987    	CALL	_printf
0017FD C1                  A  8988    	POP	BC
                           A  8989    ; 1166			printf("create <file name>") ;
                           A  8990    .LINE 1166
                           A  8991    
0017FE 01 5F 0D 00         A  8992    	LD	BC,L__284
001802 C5                  A  8993    	PUSH	BC
001803 CD 00 00 00         A  8994    	CALL	_printf
001807 C1                  A  8995    	POP	BC
                           A  8996    ; 1167			return ZSHELL_FAILURE ;		
                           A  8997    .LINE 1167
                           A  8998    
001808 4921FFFF            A  8999    	LD.LIS	HL,-1
00180C C3 3B 19 00         A  9000    	JR	L_373
                           A  9001    ; 1168		}
001810                     A  9002    L_356:
                           A  9003    .LINE 1168
                           A  9004    
                           A  9005    ; 1169	
                           A  9006    ; 1170		fileName = (INT8 *) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  9007    .LINE 1170
                           A  9008    
001810 01000100            A  9009    	LD	BC,256
001814 C5                  A  9010    	PUSH	BC
001815 CD 00 00 00         A  9011    	CALL	_malloc
001819 C1                  A  9012    	POP	BC
00181A DD2FFA              A  9013    	LD	(IX+%FFFFFFFA),HL
                           A  9014    ; 1171		buf = (INT8 *) malloc( MAX_FILE_PATH_SIZE ) ;
                           A  9015    .LINE 1171
                           A  9016    
00181D 01000100            A  9017    	LD	BC,256
001821 C5                  A  9018    	PUSH	BC
001822 CD 00 00 00         A  9019    	CALL	_malloc
001826 C1                  A  9020    	POP	BC
001827 DD2FFD              A  9021    	LD	(IX+%FFFFFFFD),HL
                           A  9022    ; 1172	
                           A  9023    ; 1173		if( fileName == NULL || buf == NULL )
                           A  9024    .LINE 1173
                           A  9025    
00182A DD27FA              A  9026    	LD	HL,(IX+%FFFFFFFA)
00182D CD 00 00 00         A  9027    	CALL	__icmpzero
001831 CA 13 19 00         A  9028    	JR	Z,L_358
001835 DD27FD              A  9029    	LD	HL,(IX+%FFFFFFFD)
001838 CD 00 00 00         A  9030    	CALL	__icmpzero
00183C CA 13 19 00         A  9031    	JR	Z,L_358
                           A  9032    ; 1174			goto end_Shell_ZFSCreateFile ;
                           A  9033    ; 1175			
                           A  9034    ; 1176	
                           A  9035    ; 1177		if( !Shell_ZFSGetList( fileName, argv, &size, stdout ) )
                           A  9036    .LINE 1177
                           A  9037    
001840 DD070C              A  9038    	LD	BC,(IX+%C)
001843 C5                  A  9039    	PUSH	BC
001844 ED65EC              A  9040    	PEA	IX+%FFFFFFEC
001847 DD0715              A  9041    	LD	BC,(IX+%15)
00184A C5                  A  9042    	PUSH	BC
00184B DD07FA              A  9043    	LD	BC,(IX+%FFFFFFFA)
00184E C5                  A  9044    	PUSH	BC
00184F CD 29 06 00         A  9045    	CALL	_Shell_ZFSGetList
001853 C1                  A  9046    	POP	BC
001854 C1                  A  9047    	POP	BC
001855 C1                  A  9048    	POP	BC
001856 C1                  A  9049    	POP	BC
001857 CD 00 00 00         A  9050    	CALL	__scmpzero
00185B 20 0A               A  9051    	JR	NZ,L_362
                           A  9052    ; 1178		{
                           A  9053    ; 1179			printf("\nFILE IS ALREADY PRESENT, OVERWRITING THE FILE\n" ) ;
                           A  9054    .LINE 1179
                           A  9055    
00185D 01 72 0D 00         A  9056    	LD	BC,L__288
001861 C5                  A  9057    	PUSH	BC
001862 CD 00 00 00         A  9058    	CALL	_printf
001866 C1                  A  9059    	POP	BC
                           A  9060    ; 1180		}
001867                     A  9061    L_362:
                           A  9062    .LINE 1180
                           A  9063    
                           A  9064    ; 1181	
                           A  9065    ; 1182		// open the file in write mode.
                           A  9066    ; 1183		fileHandle1 = ZFSOpen(argv[1], ZFS_WRITE, ZFS_MODE_BINARY );
                           A  9067    .LINE 1183
                           A  9068    
001867 01010000            A  9069    	LD	BC,1
00186B C5                  A  9070    	PUSH	BC
00186C 01020000            A  9071    	LD	BC,2
001870 C5                  A  9072    	PUSH	BC
001871 DD3115              A  9073    	LD	IY,(IX+%15)
001874 ED2303              A  9074    	LEA	HL,IY+%3
001877 ED07                A  9075    	LD	BC,(HL)
001879 C5                  A  9076    	PUSH	BC
00187A CD 00 00 00         A  9077    	CALL	_ZFSOpen
00187E C1                  A  9078    	POP	BC
00187F C1                  A  9079    	POP	BC
001880 C1                  A  9080    	POP	BC
001881 DD2FF7              A  9081    	LD	(IX+%FFFFFFF7),HL
                           A  9082    ; 1184		if( fileHandle1 )
                           A  9083    .LINE 1184
                           A  9084    
001884 CD 00 00 00         A  9085    	CALL	__icmpzero
001888 28 7F               A  9086    	JR	Z,L_367
                           A  9087    ; 1185		{
                           A  9088    ; 1186			// get the data
                           A  9089    ; 1187			printf( "\nPlease Type the text upto 256 characters to be stored in the file.") ;
                           A  9090    .LINE 1187
                           A  9091    
00188A 01 A2 0D 00         A  9092    	LD	BC,L__290
00188E C5                  A  9093    	PUSH	BC
00188F CD 00 00 00         A  9094    	CALL	_printf
001893 C1                  A  9095    	POP	BC
                           A  9096    ; 1188		 	printf( "\nPress ENTER to save the typed text into the file\n" ) ;
                           A  9097    .LINE 1188
                           A  9098    
001894 01 E6 0D 00         A  9099    	LD	BC,L__291
001898 C5                  A  9100    	PUSH	BC
001899 CD 00 00 00         A  9101    	CALL	_printf
00189D C1                  A  9102    	POP	BC
                           A  9103    ; 1189	
                           A  9104    ; 1190			GetString( stdout, (INT8 *)&buf[0], 256, &len ) ;
                           A  9105    .LINE 1190
                           A  9106    
00189E ED65F4              A  9107    	PEA	IX+%FFFFFFF4
0018A1 01000100            A  9108    	LD	BC,256
0018A5 C5                  A  9109    	PUSH	BC
0018A6 DD07FD              A  9110    	LD	BC,(IX+%FFFFFFFD)
0018A9 C5                  A  9111    	PUSH	BC
0018AA DD070C              A  9112    	LD	BC,(IX+%C)
0018AD C5                  A  9113    	PUSH	BC
0018AE CD 00 00 00         A  9114    	CALL	_GetString
0018B2 C1                  A  9115    	POP	BC
0018B3 C1                  A  9116    	POP	BC
0018B4 C1                  A  9117    	POP	BC
0018B5 C1                  A  9118    	POP	BC
                           A  9119    ; 1191	
                           A  9120    ; 1192			if( len != 0 )
                           A  9121    .LINE 1192
                           A  9122    
0018B6 DD27F4              A  9123    	LD	HL,(IX+%FFFFFFF4)
0018B9 CD 00 00 00         A  9124    	CALL	__icmpzero
0018BD 28 35               A  9125    	JR	Z,L_365
                           A  9126    ; 1193			{
                           A  9127    ; 1194				numBytes = ZFSWrite(fileHandle1, ( UINT8* ) &buf[0], len ) ;
                           A  9128    .LINE 1194
                           A  9129    
0018BF DD07F4              A  9130    	LD	BC,(IX+%FFFFFFF4)
0018C2 C5                  A  9131    	PUSH	BC
0018C3 DD07FD              A  9132    	LD	BC,(IX+%FFFFFFFD)
0018C6 C5                  A  9133    	PUSH	BC
0018C7 DD07F7              A  9134    	LD	BC,(IX+%FFFFFFF7)
0018CA C5                  A  9135    	PUSH	BC
0018CB CD 00 00 00         A  9136    	CALL	_ZFSWrite
0018CF C1                  A  9137    	POP	BC
0018D0 C1                  A  9138    	POP	BC
0018D1 C1                  A  9139    	POP	BC
0018D2 DD2FF0              A  9140    	LD	(IX+%FFFFFFF0),HL
0018D5 DD73F3              A  9141    	LD	(IX+%FFFFFFF3),E
                           A  9142    ; 1195				if( numBytes < 0 )
                           A  9143    .LINE 1195
                           A  9144    
0018D8 DD27F0              A  9145    	LD	HL,(IX+%FFFFFFF0)
0018DB DD5EF3              A  9146    	LD	E,(IX+%FFFFFFF3)
0018DE CD 00 00 00         A  9147    	CALL	__lcmpzero
0018E2 CD 00 00 00         A  9148    	CALL	__setflag
0018E6 F2 F4 18 00         A  9149    	JP	P,L_365
                           A  9150    ; 1196					printf( "\nError in writing..." ) ;
                           A  9151    .LINE 1196
                           A  9152    
0018EA 01 19 0E 00         A  9153    	LD	BC,L__294
0018EE C5                  A  9154    	PUSH	BC
0018EF CD 00 00 00         A  9155    	CALL	_printf
0018F3 C1                  A  9156    	POP	BC
                           A  9157    ; 1197			}
0018F4                     A  9158    L_365:
                           A  9159    .LINE 1197
                           A  9160    
                           A  9161    ; 1198	
                           A  9162    ; 1199		   	ZFSClose( fileHandle1 ) ;
                           A  9163    .LINE 1199
                           A  9164    
0018F4 DD07F7              A  9165    	LD	BC,(IX+%FFFFFFF7)
0018F7 C5                  A  9166    	PUSH	BC
0018F8 CD 00 00 00         A  9167    	CALL	_ZFSClose
0018FC C1                  A  9168    	POP	BC
                           A  9169    ; 1200			printf("\nFile is created\n");
                           A  9170    .LINE 1200
                           A  9171    
0018FD 01 2E 0E 00         A  9172    	LD	BC,L__295
001901 C5                  A  9173    	PUSH	BC
001902 CD 00 00 00         A  9174    	CALL	_printf
001906 C1                  A  9175    	POP	BC
                           A  9176    ; 1201			ret_val = ZSHELL_SUCCESS ;	
                           A  9177    ; 1202		}
                           A  9178    ; 1203		else
                           A  9179    .LINE 1203
                           A  9180    
001907 18 0A               A  9181    	JR	L_369
001909                     A  9182    L_367:
                           A  9183    ; 1204		{
                           A  9184    ; 1205			printf( "Entered file name is not correct or accessing an invalid volume\n" ) ;
                           A  9185    .LINE 1205
                           A  9186    
001909 01 40 0E 00         A  9187    	LD	BC,L__296
00190D C5                  A  9188    	PUSH	BC
00190E CD 00 00 00         A  9189    	CALL	_printf
001912 C1                  A  9190    	POP	BC
                           A  9191    ; 1206		}
001913                     A  9192    L_369:
                           A  9193    .LINE 1206
                           A  9194    
001913                     A  9195    L_358:
                           A  9196    ; 1207	
                           A  9197    ; 1208	end_Shell_ZFSCreateFile :
                           A  9198    ; 1209		if( fileName)
                           A  9199    .LINE 1209
                           A  9200    
001913 DD27FA              A  9201    	LD	HL,(IX+%FFFFFFFA)
001916 CD 00 00 00         A  9202    	CALL	__icmpzero
00191A 28 09               A  9203    	JR	Z,L_371
                           A  9204    ; 1210			free( fileName ) ;
                           A  9205    .LINE 1210
                           A  9206    
00191C DD07FA              A  9207    	LD	BC,(IX+%FFFFFFFA)
00191F C5                  A  9208    	PUSH	BC
001920 CD 00 00 00         A  9209    	CALL	_free
001924 C1                  A  9210    	POP	BC
001925                     A  9211    L_371:
                           A  9212    ; 1211		if( buf)
                           A  9213    .LINE 1211
                           A  9214    
001925 DD27FD              A  9215    	LD	HL,(IX+%FFFFFFFD)
001928 CD 00 00 00         A  9216    	CALL	__icmpzero
00192C 28 09               A  9217    	JR	Z,L_372
                           A  9218    ; 1212			free( buf ) ;
                           A  9219    .LINE 1212
                           A  9220    
00192E DD07FD              A  9221    	LD	BC,(IX+%FFFFFFFD)
001931 C5                  A  9222    	PUSH	BC
001932 CD 00 00 00         A  9223    	CALL	_free
001936 C1                  A  9224    	POP	BC
001937                     A  9225    L_372:
                           A  9226    ; 1213	
                           A  9227    ; 1214	        return (OK);
                           A  9228    .LINE 1214
                           A  9229    
001937 49210100            A  9230    	LD.LIS	HL,1
                           A  9231    ; 1215	}
00193B                     A  9232    L_373:
                           A  9233    .LINE 1215
                           A  9234    
00193B DDF9                A  9235    	LD	SP,IX
00193D DDE1                A  9236    	POP	IX
00193F C9                  A  9237    	RET	
                           A  9238    
                           A  9239    
                           A  9240    ;**************************** _Shell_ZFSCreateFile ***************************
                           A  9241    ;Name                         Addr/Register   Size   Type
                           A  9242    ;_free                               IMPORT  -----   function
                           A  9243    ;_ZFSClose                           IMPORT  -----   function
                           A  9244    ;_ZFSWrite                           IMPORT  -----   function
                           A  9245    ;_GetString                          IMPORT  -----   function
                           A  9246    ;_ZFSOpen                            IMPORT  -----   function
                           A  9247    ;_malloc                             IMPORT  -----   function
                           A  9248    ;_printf                             IMPORT  -----   function
                           A  9249    ;size                                 IX-20      4   variable
                           A  9250    ;numBytes                             IX-16      4   variable
                           A  9251    ;len                                  IX-12      3   variable
                           A  9252    ;fileHandle1                           IX-9      3   variable
                           A  9253    ;fileName                              IX-6      3   variable
                           A  9254    ;buf                                   IX-3      3   variable
                           A  9255    ;argv                                 IX+21      3   parameter
                           A  9256    ;nargs                                IX+18      2   parameter
                           A  9257    ;stderr                               IX+15      3   parameter
                           A  9258    ;stdout                               IX+12      3   parameter
                           A  9259    ;stdin                                 IX+9      3   parameter
                           A  9260    ;Shl                                   IX+6      3   parameter
                           A  9261    
                           A  9262    
                           A  9263    ; Stack Frame Size: 44 (bytes)
                           A  9264    ;       Spill Code: 0 (instruction)
                           A  9265    
                           A  9266    
                           A  9267    .ENDFUNC "Shell_ZFSCreateFile",1215,"_Shell_ZFSCreateFile"
                           A  9268    	SEGMENT STRSECT
000D36                     A  9269    L__283:
000D36 0A                  A  9270    	DB	10
000D37 54686520 73796E74   A  9271    	DB	"The syntax of the command is incorrect"
000D3F 6178206F 66207468 
000D47 6520636F 6D6D616E 
000D4F 64206973 20696E63 
000D57 6F727265 6374 
000D5D 0A00                A  9272    	DB	10,0
000D5F                     A  9273    L__284:
000D5F 63726561 7465203C   A  9274    	DB	"create <file name>"
000D67 66696C65 206E616D 
000D6F 653E 
000D71 00                  A  9275    	DB	0
000D72                     A  9276    L__288:
000D72 0A                  A  9277    	DB	10
000D73 46494C45 20495320   A  9278    	DB	"FILE IS ALREADY PRESENT, OVERWRITING THE FILE"
000D7B 414C5245 41445920 
000D83 50524553 454E542C 
000D8B 204F5645 52575249 
000D93 54494E47 20544845 
000D9B 2046494C 45 
000DA0 0A00                A  9279    	DB	10,0
000DA2                     A  9280    L__290:
000DA2 0A                  A  9281    	DB	10
000DA3 506C6561 73652054   A  9282    	DB	"Please Type the text upto 256 characters to be stored in the file."
000DAB 79706520 74686520 
000DB3 74657874 20757074 
000DBB 6F203235 36206368 
000DC3 61726163 74657273 
000DCB 20746F20 62652073 
000DD3 746F7265 6420696E 
000DDB 20746865 2066696C 
000DE3 652E 
000DE5 00                  A  9283    	DB	0
000DE6                     A  9284    L__291:
000DE6 0A                  A  9285    	DB	10
000DE7 50726573 7320454E   A  9286    	DB	"Press ENTER to save the typed text into the file"
000DEF 54455220 746F2073 
000DF7 61766520 74686520 
000DFF 74797065 64207465 
000E07 78742069 6E746F20 
000E0F 74686520 66696C65 
000E17 0A00                A  9287    	DB	10,0
000E19                     A  9288    L__294:
000E19 0A                  A  9289    	DB	10
000E1A 4572726F 7220696E   A  9290    	DB	"Error in writing..."
000E22 20777269 74696E67 
000E2A 2E2E2E 
000E2D 00                  A  9291    	DB	0
000E2E                     A  9292    L__295:
000E2E 0A                  A  9293    	DB	10
000E2F 46696C65 20697320   A  9294    	DB	"File is created"
000E37 63726561 746564 
000E3E 0A00                A  9295    	DB	10,0
000E40                     A  9296    L__296:
000E40 456E7465 72656420   A  9297    	DB	"Entered file name is not correct or accessing an invalid volume"
000E48 66696C65 206E616D 
000E50 65206973 206E6F74 
000E58 20636F72 72656374 
000E60 206F7220 61636365 
000E68 7373696E 6720616E 
000E70 20696E76 616C6964 
000E78 20766F6C 756D65 
000E7F 0A00                A  9298    	DB	10,0
                           A  9299    	SEGMENT CODE
                           A  9300    ; 1216	
                           A  9301    ; 1217	
                           A  9302    ; 1218	
                           A  9303    ; 1219	/* The following function is used to delete a 
                           A  9304    ; 1220	   file given by the user */
                           A  9305    ; 1221	INT16 Shell_ZFSFormat (
                           A  9306    ; 1222		struct shvars *			Shl,
                           A  9307    ; 1223		RZK_DEVICE_CB_t *						stdin,
                           A  9308    ; 1224		RZK_DEVICE_CB_t *						stdout, 
                           A  9309    ; 1225		RZK_DEVICE_CB_t *						stderr, 
                           A  9310    ; 1226		UINT16					nargs,
                           A  9311    ; 1227		INT8					*argv[]
                           A  9312    ; 1228	)
                           A  9313    ; 1229	{
001940                     A  9314    _Shell_ZFSFormat:
                           A  9315    .DEFINE "_Shell_ZFSFormat"
                           A  9316    
                           A  9317    .VALUE _Shell_ZFSFormat
                           A  9318    
                           A  9319    .CLASS 2
                           A  9320    
                           A  9321    .TYPE 67
                           A  9322    
                           A  9323    .ENDEF
                           A  9324    
                           A  9325    .BEGFUNC "Shell_ZFSFormat",1229,"_Shell_ZFSFormat"
                           A  9326    
                           A  9327    .LINE 1229
                           A  9328    
                           A  9329    .DEFINE "Shl"
                           A  9330    
                           A  9331    .CLASS 65
                           A  9332    
                           A  9333    .VALUE 6
                           A  9334    
                           A  9335    .TAG "shvars"
                           A  9336    
                           A  9337    .TYPE 40
                           A  9338    
                           A  9339    .ENDEF
                           A  9340    
                           A  9341    .DEFINE "stdin"
                           A  9342    
                           A  9343    .CLASS 65
                           A  9344    
                           A  9345    .VALUE 9
                           A  9346    
                           A  9347    .TAG "RZK_DEVICE_CB_t"
                           A  9348    
                           A  9349    .TYPE 40
                           A  9350    
                           A  9351    .ENDEF
                           A  9352    
                           A  9353    .DEFINE "stdout"
                           A  9354    
                           A  9355    .CLASS 65
                           A  9356    
                           A  9357    .VALUE 12
                           A  9358    
                           A  9359    .TAG "RZK_DEVICE_CB_t"
                           A  9360    
                           A  9361    .TYPE 40
                           A  9362    
                           A  9363    .ENDEF
                           A  9364    
                           A  9365    .DEFINE "stderr"
                           A  9366    
                           A  9367    .CLASS 65
                           A  9368    
                           A  9369    .VALUE 15
                           A  9370    
                           A  9371    .TAG "RZK_DEVICE_CB_t"
                           A  9372    
                           A  9373    .TYPE 40
                           A  9374    
                           A  9375    .ENDEF
                           A  9376    
                           A  9377    .DEFINE "nargs"
                           A  9378    
                           A  9379    .CLASS 65
                           A  9380    
                           A  9381    .VALUE 18
                           A  9382    
                           A  9383    .TYPE 13
                           A  9384    
                           A  9385    .ENDEF
                           A  9386    
                           A  9387    .DEFINE "argv"
                           A  9388    
                           A  9389    .CLASS 65
                           A  9390    
                           A  9391    .VALUE 21
                           A  9392    
                           A  9393    .TYPE 290
                           A  9394    
                           A  9395    .ENDEF
                           A  9396    
                           A  9397    .DEFINE "status"
                           A  9398    
                           A  9399    .CLASS 65
                           A  9400    
                           A  9401    .VALUE -3
                           A  9402    
                           A  9403    .TYPE 4
                           A  9404    
                           A  9405    .ENDEF
                           A  9406    
001940 DDE5                A  9407    	PUSH	IX
001942 DD210000 00         A  9408    	LD	IX,0
001947 DD39                A  9409    	ADD	IX,SP
001949 C5                  A  9410    	PUSH	BC
                           A  9411    ; 1230		ZFS_STATUS_t	status;
                           A  9412    ; 1231	
                           A  9413    ; 1232	
                           A  9414    ; 1233		/** Chekck the number of arguments, return error if not valid number  */
                           A  9415    ; 1234		if( nargs != 2 )
                           A  9416    .LINE 1234
                           A  9417    
00194A 49010200            A  9418    	LD.LIS	BC,2
00194E DD2712              A  9419    	LD	HL,(IX+%12)
001951 B7                  A  9420    	OR	A,A
001952 40ED42              A  9421    	SBC.SIS	HL,BC
001955 28 1A               A  9422    	JR	Z,L_375
                           A  9423    ; 1235		{
                           A  9424    ; 1236			printf("\nThe syntax of the command is incorrect\n");
                           A  9425    .LINE 1236
                           A  9426    
001957 01 81 0E 00         A  9427    	LD	BC,L__301
00195B C5                  A  9428    	PUSH	BC
00195C CD 00 00 00         A  9429    	CALL	_printf
001960 C1                  A  9430    	POP	BC
                           A  9431    ; 1237			printf("format <vol name>") ;
                           A  9432    .LINE 1237
                           A  9433    
001961 01 AA 0E 00         A  9434    	LD	BC,L__302
001965 C5                  A  9435    	PUSH	BC
001966 CD 00 00 00         A  9436    	CALL	_printf
00196A C1                  A  9437    	POP	BC
                           A  9438    ; 1238			return ZSHELL_FAILURE ;		
                           A  9439    .LINE 1238
                           A  9440    
00196B 4921FFFF            A  9441    	LD.LIS	HL,-1
00196F 18 48               A  9442    	JR	L_378
                           A  9443    ; 1239		}
001971                     A  9444    L_375:
                           A  9445    .LINE 1239
                           A  9446    
                           A  9447    ; 1240	
                           A  9448    ; 1241		printf("\nFormatting the volume %s, Please wait...", argv[1]);
                           A  9449    .LINE 1241
                           A  9450    
001971 DD3115              A  9451    	LD	IY,(IX+%15)
001974 ED2303              A  9452    	LEA	HL,IY+%3
001977 ED07                A  9453    	LD	BC,(HL)
001979 C5                  A  9454    	PUSH	BC
00197A 01 BC 0E 00         A  9455    	LD	BC,L__303
00197E C5                  A  9456    	PUSH	BC
00197F CD 00 00 00         A  9457    	CALL	_printf
001983 C1                  A  9458    	POP	BC
001984 C1                  A  9459    	POP	BC
                           A  9460    ; 1242		// call the format.
                           A  9461    ; 1243		status = ZFSFormat( argv[1] ) ;
                           A  9462    .LINE 1243
                           A  9463    
001985 DD3115              A  9464    	LD	IY,(IX+%15)
001988 ED2303              A  9465    	LEA	HL,IY+%3
00198B ED07                A  9466    	LD	BC,(HL)
00198D C5                  A  9467    	PUSH	BC
00198E CD 00 00 00         A  9468    	CALL	_ZFSFormat
001992 C1                  A  9469    	POP	BC
001993 DD2FFD              A  9470    	LD	(IX+%FFFFFFFD),HL
                           A  9471    ; 1244		if( status == ZFSERR_SUCCESS )
                           A  9472    .LINE 1244
                           A  9473    
001996 CD 00 00 00         A  9474    	CALL	__icmpzero
00199A 20 10               A  9475    	JR	NZ,L_377
                           A  9476    ; 1245		{
                           A  9477    ; 1246			printf("SUCCESSFULL\n");
                           A  9478    .LINE 1246
                           A  9479    
00199C 01 E6 0E 00         A  9480    	LD	BC,L__305
0019A0 C5                  A  9481    	PUSH	BC
0019A1 CD 00 00 00         A  9482    	CALL	_printf
0019A5 C1                  A  9483    	POP	BC
                           A  9484    ; 1247			return ZSHELL_FAILURE ;
                           A  9485    .LINE 1247
                           A  9486    
0019A6 4921FFFF            A  9487    	LD.LIS	HL,-1
0019AA 18 0D               A  9488    	JR	L_378
                           A  9489    ; 1248		}
                           A  9490    ; 1249		else
0019AC                     A  9491    L_377:
                           A  9492    .LINE 1249
                           A  9493    
                           A  9494    ; 1250		{
                           A  9495    ; 1251			printf("FAILED\nCouldn't format the volume as it is in use/not present in the system\n");
                           A  9496    .LINE 1251
                           A  9497    
0019AC 01 F3 0E 00         A  9498    	LD	BC,L__306
0019B0 C5                  A  9499    	PUSH	BC
0019B1 CD 00 00 00         A  9500    	CALL	_printf
0019B5 C1                  A  9501    	POP	BC
                           A  9502    ; 1252			return ZSHELL_SUCCESS ;	
                           A  9503    .LINE 1252
                           A  9504    
0019B6 B7                  A  9505    	OR	A,A
0019B7 ED62                A  9506    	SBC	HL,HL
                           A  9507    ; 1253		}
                           A  9508    ; 1254	}
0019B9                     A  9509    L_378:
                           A  9510    .LINE 1254
                           A  9511    
0019B9 DDF9                A  9512    	LD	SP,IX
0019BB DDE1                A  9513    	POP	IX
0019BD C9                  A  9514    	RET	
                           A  9515    
                           A  9516    
                           A  9517    ;**************************** _Shell_ZFSFormat ***************************
                           A  9518    ;Name                         Addr/Register   Size   Type
                           A  9519    ;_ZFSFormat                          IMPORT  -----   function
                           A  9520    ;_printf                             IMPORT  -----   function
                           A  9521    ;status                                IX-3      3   variable
                           A  9522    ;argv                                 IX+21      3   parameter
                           A  9523    ;nargs                                IX+18      2   parameter
                           A  9524    ;stderr                               IX+15      3   parameter
                           A  9525    ;stdout                               IX+12      3   parameter
                           A  9526    ;stdin                                 IX+9      3   parameter
                           A  9527    ;Shl                                   IX+6      3   parameter
                           A  9528    
                           A  9529    
                           A  9530    ; Stack Frame Size: 27 (bytes)
                           A  9531    ;       Spill Code: 0 (instruction)
                           A  9532    
                           A  9533    
                           A  9534    .ENDFUNC "Shell_ZFSFormat",1254,"_Shell_ZFSFormat"
                           A  9535    	SEGMENT STRSECT
000E81                     A  9536    L__301:
000E81 0A                  A  9537    	DB	10
000E82 54686520 73796E74   A  9538    	DB	"The syntax of the command is incorrect"
000E8A 6178206F 66207468 
000E92 6520636F 6D6D616E 
000E9A 64206973 20696E63 
000EA2 6F727265 6374 
000EA8 0A00                A  9539    	DB	10,0
000EAA                     A  9540    L__302:
000EAA 666F726D 6174203C   A  9541    	DB	"format <vol name>"
000EB2 766F6C20 6E616D65 
000EBA 3E 
000EBB 00                  A  9542    	DB	0
000EBC                     A  9543    L__303:
000EBC 0A                  A  9544    	DB	10
000EBD 466F726D 61747469   A  9545    	DB	"Formatting the volume %s, Please wait..."
000EC5 6E672074 68652076 
000ECD 6F6C756D 65202573 
000ED5 2C20506C 65617365 
000EDD 20776169 742E2E2E 
000EE5 00                  A  9546    	DB	0
000EE6                     A  9547    L__305:
000EE6 53554343 45535346   A  9548    	DB	"SUCCESSFULL"
000EEE 554C4C 
000EF1 0A00                A  9549    	DB	10,0
000EF3                     A  9550    L__306:
000EF3 4641494C 4544       A  9551    	DB	"FAILED"
000EF9 0A                  A  9552    	DB	10
000EFA 436F756C 646E2774   A  9553    	DB	"Couldn't format the volume as it is in use/not present in the system"
000F02 20666F72 6D617420 
000F0A 74686520 766F6C75 
000F12 6D652061 73206974 
000F1A 20697320 696E2075 
000F22 73652F6E 6F742070 
000F2A 72657365 6E742069 
000F32 6E207468 65207379 
000F3A 7374656D 
000F3E 0A00                A  9554    	DB	10,0
                           A  9555    	XREF _GetString:ROM
                           A  9556    	XREF _ShellCommands:ROM
                           A  9557    	XREF _ZFSWrite:ROM
                           A  9558    	XREF _ZFSSeek:ROM
                           A  9559    	XREF _ZFSRenameDir:ROM
                           A  9560    	XREF _ZFSRename:ROM
                           A  9561    	XREF _ZFSRead:ROM
                           A  9562    	XREF _ZFSOpen:ROM
                           A  9563    	XREF _ZFSMkdir:ROM
                           A  9564    	XREF _ZFSList:ROM
                           A  9565    	XREF _ZFSGetVolumeParams:ROM
                           A  9566    	XREF _ZFSGetVolumeCount:ROM
                           A  9567    	XREF _ZFSGetCwd:ROM
                           A  9568    	XREF _ZFSFormat:ROM
                           A  9569    	XREF _ZFSDeleteDir:ROM
                           A  9570    	XREF _ZFSDelete:ROM
                           A  9571    	XREF _ZFSClose:ROM
                           A  9572    	XREF _ZFSChdir:ROM
                           A  9573    	XREF _RZKDevIOCTL:ROM
                           A  9574    	XREF _RZKDevWrite:ROM
                           A  9575    	XREF _RZKDevRead:ROM
                           A  9576    	XREF _RZKDevOpen:ROM
                           A  9577    	XREF _malloc:ROM
                           A  9578    	XREF _free:ROM
                           A  9579    	XREF _strlen:ROM
                           A  9580    	XREF _strcmp:ROM
                           A  9581    	XREF _strcat:ROM
                           A  9582    	XREF _memset:ROM
                           A  9583    	XREF _memcpy:ROM
                           A  9584    	XREF _strcpy:ROM
                           A  9585    	XREF _sscanf:ROM
                           A  9586    	XREF _printf:ROM
                           A  9587    	XREF __lcmpu:ROM
                           A  9588    	XREF __ladd:ROM
                           A  9589    	XREF __idivu:ROM
                           A  9590    	XREF __inot:ROM
                           A  9591    	XREF __iremu:ROM
                           A  9592    	XREF __stoi:ROM
                           A  9593    	XREF __stoiu:ROM
                           A  9594    	XREF __setflag:ROM
                           A  9595    	XREF __scmpzero:ROM
                           A  9596    	XREF __icmpzero:ROM
                           A  9597    	XREF __lcmpzero:ROM
                           A  9598    	XREF __imul_b:ROM
                           A  9599    	XDEF _Shell_ZFSFormat
                           A  9600    	XDEF _Shell_ZFSCreateFile
                           A  9601    	XDEF _Shell_setdatetime
                           A  9602    	XDEF _Shell_getdatetime
                           A  9603    	XDEF _Shell_ZFSHelp
                           A  9604    	XDEF _Shell_ZFSGetVolumeInfo
                           A  9605    	XDEF _Shell_ZFSDispFile
                           A  9606    	XDEF _Shell_ZFSListFileDirs
                           A  9607    	XDEF _Shell_ZFSGetCWD
                           A  9608    	XDEF _Shell_ZFSCopyMoveFile
                           A  9609    	XDEF _Shell_ZFSGetList
                           A  9610    	XDEF _Shell_ZFSRenDir
                           A  9611    	XDEF _Shell_ZFSRenFile
                           A  9612    	XDEF _Shell_ZFSDelDir
                           A  9613    	XDEF _Shell_ZFSDelDirAll
                           A  9614    	XDEF _ShellDeleteDir
                           A  9615    	XDEF _Shell_ZFSDelFile
                           A  9616    	XDEF _Shell_ZFSChdir
                           A  9617    	XDEF _Shell_ZFSMkdir
                           A  9618    	XDEF _Shell_ZFSGetDirFileName
                           A  9619    	END


Errors: 0
Warnings: 0
Lines Assembled: 9620
